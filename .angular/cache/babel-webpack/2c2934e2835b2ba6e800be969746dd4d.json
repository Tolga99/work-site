{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { UUID } from 'angular2-uuid';\nimport { NgbdModalFocus } from '../modal/modal-focus';\nimport { Hour } from '../models/hour';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/storage.service\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@ngx-translate/core\";\nexport let Hours = /*#__PURE__*/(() => {\n  class Hours {\n    constructor(modalS, router, storageService, route, cd) {\n      this.modalS = modalS;\n      this.router = router;\n      this.storageService = storageService;\n      this.route = route;\n      this.cd = cd;\n      this.formHour = new FormGroup({\n        date: new FormControl('', Validators.required),\n        description: new FormControl('')\n      });\n      this.hoursList = [];\n      this.modal = new NgbdModalFocus(this.modalS);\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const nowDate = new Date();\n        this.date = nowDate.getDate() + '/' + (nowDate.getMonth() + 1) + '/' + nowDate.getFullYear();\n        this.chantierId = this.route.snapshot.paramMap.get('chantierId');\n        this.storageService.init();\n        const chantierl = yield this.storageService.get('Chantiers');\n        const chantier = chantierl.find(a => a.chantierId === this.chantierId);\n        this.hoursList = chantier.hours;\n        if (this.hoursList == null) this.hoursList = new Array();\n        const existId = this.route.snapshot.paramMap.get('hourId');\n        this.chantierId = this.route.snapshot.paramMap.get('chantierId');\n\n        if (existId != null) {\n          // console.log('modification',existId);\n          this.indexFind = this.hoursList.findIndex(x => x.hourId === existId);\n\n          if (this.indexFind >= 0) {\n            this.hourId = this.hoursList[this.indexFind].hourId;\n            this.hour = new Hour(this.hoursList[this.indexFind].hourId, this.hoursList[this.indexFind].date, this.hoursList[this.indexFind].description, this.hoursList[this.indexFind].hour, this.hoursList[this.indexFind].minute);\n            const d = new Date(); // console.log(this.hour.hour, 'et ',this.hour.minute);\n\n            d.setUTCHours(this.hour.hour, this.hour.minute, 0, 0); // d.setHours(this.hour.hour,this.hour.minute,0,0);\n            // let dd = new Date(d.toString());\n            // console.log(d.toLocaleDateString(),d.toTimeString(),d.toUTCString(),d.toLocaleTimeString());\n\n            console.log('dt', d.toISOString());\n            this.formHour.setValue({\n              date: d.toISOString(),\n              description: this.hoursList[this.indexFind].description\n            });\n            this.formHour.updateValueAndValidity();\n            console.log('opening Hours');\n            this.cd.detectChanges(); // this.cd.detectChanges();\n            // this.formHour.get('date').setValue(d.toISOString());\n            // this.formHour.patchValue({ date : d.toISOString()});\n          }\n        } else {\n          console.log('creation', existId);\n          this.hourId = this.generateUUID();\n        }\n      });\n    }\n\n    customFormatter(value) {\n      return `${value}%`;\n    }\n\n    CreateHour() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const invalid = [];\n        const controls = this.formHour.controls;\n\n        for (const name in controls) {\n          if (controls[name].invalid) {\n            let nom = '';\n            if (name === 'date') nom = 'Heure';\n            invalid.push(nom);\n          }\n        }\n\n        if (!this.formHour.valid) {\n          let res = null;\n          yield this.modal.open('field', invalid.toString()).then(result => result.result.then(data => {\n            res = 'OK';\n          }, reason => {\n            res = 'DISMISS';\n          }));\n          return;\n        }\n\n        const dd = new Date(this.formHour.get('date').value);\n        console.log(dd.getHours(), ':', dd.getMinutes());\n        console.log(this.generateUUID());\n        console.log('form status', this.formHour);\n        if (!this.formHour.valid) return;\n        this.hour = new Hour(this.hourId, this.date, this.formHour.get('description').value, dd.getHours(), dd.getMinutes());\n\n        if (this.indexFind >= 0) {\n          // this.hoursList.splice(this.indexFind,1);\n          this.hoursList[this.indexFind] = this.hour;\n        } else this.hoursList.push(this.hour);\n\n        const chantierl = yield this.storageService.get('Chantiers');\n        const chantier = chantierl.find(a => a.chantierId === this.chantierId);\n        const chantierIndex = chantierl.findIndex(a => a.chantierId === this.chantierId);\n        chantier.hours = this.hoursList;\n        chantierl[chantierIndex] = chantier;\n        this.storageService.set('Chantiers', chantierl); // this.storageService.set('Hours='+this.chantierId,this.hoursList);\n\n        this.router.navigate(['/worksite', {\n          chantierId: this.chantierId\n        }], {\n          replaceUrl: true\n        });\n      });\n    }\n\n    generateUUID() {\n      this.uuidValue = UUID.UUID();\n      return this.uuidValue;\n    }\n\n    GoBack() {\n      this.router.navigate(['/worksite', {\n        chantierId: this.chantierId\n      }], {\n        replaceUrl: true\n      });\n    }\n\n  }\n\n  Hours.ɵfac = function Hours_Factory(t) {\n    return new (t || Hours)(i0.ɵɵdirectiveInject(i1.NgbModal), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.StorageService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  Hours.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Hours,\n    selectors: [[\"app-hours\"]],\n    decls: 18,\n    vars: 10,\n    consts: [[3, \"click\"], [\"name\", \"arrow-back\"], [1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [\"formControlName\", \"date\", \"presentation\", \"time\"], [\"position\", \"floating\"], [\"id\", \"description\", \"name\", \"description\", \"formControlName\", \"description\", \"placeholder\", \"...\", 2, \"height\", \"100px\"], [\"type\", \"submit\", 3, \"value\"]],\n    template: function Hours_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-button\", 0);\n        i0.ɵɵlistener(\"click\", function Hours_Template_ion_button_click_2_listener() {\n          return ctx.GoBack();\n        });\n        i0.ɵɵelement(3, \"ion-icon\", 1);\n        i0.ɵɵelementStart(4, \"ion-label\");\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 2);\n        i0.ɵɵelementStart(8, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function Hours_Template_form_ngSubmit_8_listener() {\n          return ctx.CreateHour();\n        });\n        i0.ɵɵelement(9, \"ion-datetime\", 4);\n        i0.ɵɵelement(10, \"hr\");\n        i0.ɵɵelementStart(11, \"ion-item\");\n        i0.ɵɵelementStart(12, \"ion-label\", 5);\n        i0.ɵɵtext(13);\n        i0.ɵɵpipe(14, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(15, \"ion-textarea\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"input\", 7);\n        i0.ɵɵpipe(17, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 4, \"back\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.formHour);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(14, 6, \"description\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(17, 8, \"addWork\"));\n      }\n    },\n    directives: [i4.IonHeader, i4.IonToolbar, i4.IonButton, i4.IonIcon, i4.IonLabel, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i4.IonDatetime, i4.SelectValueAccessor, i5.NgControlStatus, i5.FormControlName, i4.IonItem, i4.IonTextarea, i4.TextValueAccessor],\n    pipes: [i6.TranslatePipe],\n    styles: [\".form-group[required=required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:not(.required){border:1px solid black}.form-group[required=required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid red}.form-group[required=required][_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:after{content:\\\" *\\\";color:red}.form-group[required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid red}.form-group[required][_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:after{content:\\\" *\\\";color:red}\"]\n  });\n  return Hours;\n})();","map":null,"metadata":{},"sourceType":"module"}