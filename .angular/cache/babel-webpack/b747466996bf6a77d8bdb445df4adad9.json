{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/t_olg/Desktop/Tolga/Ov/Projets/DevisApp/work-site/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ComponentHarness, HarnessPredicate } from '@angular/cdk/testing';\nimport { MatSelectHarness } from '@angular/material/select/testing';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nclass _MatPaginatorHarnessBase extends ComponentHarness {\n  /** Goes to the next page in the paginator. */\n  goToNextPage() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this._nextButton()).click();\n    })();\n  }\n  /** Goes to the previous page in the paginator. */\n\n\n  goToPreviousPage() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this2._previousButton()).click();\n    })();\n  }\n  /** Goes to the first page in the paginator. */\n\n\n  goToFirstPage() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const button = yield _this3._firstPageButton(); // The first page button isn't enabled by default so we need to check for it.\n\n      if (!button) {\n        throw Error('Could not find first page button inside paginator. ' + 'Make sure that `showFirstLastButtons` is enabled.');\n      }\n\n      return button.click();\n    })();\n  }\n  /** Goes to the last page in the paginator. */\n\n\n  goToLastPage() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const button = yield _this4._lastPageButton(); // The last page button isn't enabled by default so we need to check for it.\n\n      if (!button) {\n        throw Error('Could not find last page button inside paginator. ' + 'Make sure that `showFirstLastButtons` is enabled.');\n      }\n\n      return button.click();\n    })();\n  }\n  /**\n   * Sets the page size of the paginator.\n   * @param size Page size that should be select.\n   */\n\n\n  setPageSize(size) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      const select = yield _this5._select(); // The select is only available if the `pageSizeOptions` are\n      // set to an array with more than one item.\n\n      if (!select) {\n        throw Error('Cannot find page size selector in paginator. ' + 'Make sure that the `pageSizeOptions` have been configured.');\n      }\n\n      return select.clickOptions({\n        text: `${size}`\n      });\n    })();\n  }\n  /** Gets the page size of the paginator. */\n\n\n  getPageSize() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const select = yield _this6._select();\n      const value = select ? select.getValueText() : (yield _this6._pageSizeFallback()).text();\n      return coerceNumberProperty(yield value);\n    })();\n  }\n  /** Gets the text of the range labe of the paginator. */\n\n\n  getRangeLabel() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this7._rangeLabel()).text();\n    })();\n  }\n\n}\n/** Harness for interacting with a standard mat-paginator in tests. */\n\n\nclass MatPaginatorHarness extends _MatPaginatorHarnessBase {\n  constructor() {\n    super(...arguments);\n    this._nextButton = this.locatorFor('.mat-paginator-navigation-next');\n    this._previousButton = this.locatorFor('.mat-paginator-navigation-previous');\n    this._firstPageButton = this.locatorForOptional('.mat-paginator-navigation-first');\n    this._lastPageButton = this.locatorForOptional('.mat-paginator-navigation-last');\n    this._select = this.locatorForOptional(MatSelectHarness.with({\n      ancestor: '.mat-paginator-page-size'\n    }));\n    this._pageSizeFallback = this.locatorFor('.mat-paginator-page-size-value');\n    this._rangeLabel = this.locatorFor('.mat-paginator-range-label');\n  }\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatPaginatorHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which paginator instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n\n\n  static with(options = {}) {\n    return new HarnessPredicate(MatPaginatorHarness, options);\n  }\n\n}\n/** Selector used to find paginator instances. */\n\n\nMatPaginatorHarness.hostSelector = '.mat-paginator';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { MatPaginatorHarness, _MatPaginatorHarnessBase };","map":{"version":3,"sources":["C:/Users/t_olg/Desktop/Tolga/Ov/Projets/DevisApp/work-site/node_modules/@angular/material/fesm2020/paginator/testing.mjs"],"names":["ComponentHarness","HarnessPredicate","MatSelectHarness","coerceNumberProperty","_MatPaginatorHarnessBase","goToNextPage","_nextButton","click","goToPreviousPage","_previousButton","goToFirstPage","button","_firstPageButton","Error","goToLastPage","_lastPageButton","setPageSize","size","select","_select","clickOptions","text","getPageSize","value","getValueText","_pageSizeFallback","getRangeLabel","_rangeLabel","MatPaginatorHarness","constructor","arguments","locatorFor","locatorForOptional","with","ancestor","options","hostSelector"],"mappings":"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","sourcesContent":["import { ComponentHarness, HarnessPredicate } from '@angular/cdk/testing';\nimport { MatSelectHarness } from '@angular/material/select/testing';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass _MatPaginatorHarnessBase extends ComponentHarness {\n    /** Goes to the next page in the paginator. */\n    async goToNextPage() {\n        return (await this._nextButton()).click();\n    }\n    /** Goes to the previous page in the paginator. */\n    async goToPreviousPage() {\n        return (await this._previousButton()).click();\n    }\n    /** Goes to the first page in the paginator. */\n    async goToFirstPage() {\n        const button = await this._firstPageButton();\n        // The first page button isn't enabled by default so we need to check for it.\n        if (!button) {\n            throw Error('Could not find first page button inside paginator. ' +\n                'Make sure that `showFirstLastButtons` is enabled.');\n        }\n        return button.click();\n    }\n    /** Goes to the last page in the paginator. */\n    async goToLastPage() {\n        const button = await this._lastPageButton();\n        // The last page button isn't enabled by default so we need to check for it.\n        if (!button) {\n            throw Error('Could not find last page button inside paginator. ' +\n                'Make sure that `showFirstLastButtons` is enabled.');\n        }\n        return button.click();\n    }\n    /**\n     * Sets the page size of the paginator.\n     * @param size Page size that should be select.\n     */\n    async setPageSize(size) {\n        const select = await this._select();\n        // The select is only available if the `pageSizeOptions` are\n        // set to an array with more than one item.\n        if (!select) {\n            throw Error('Cannot find page size selector in paginator. ' +\n                'Make sure that the `pageSizeOptions` have been configured.');\n        }\n        return select.clickOptions({ text: `${size}` });\n    }\n    /** Gets the page size of the paginator. */\n    async getPageSize() {\n        const select = await this._select();\n        const value = select ? select.getValueText() : (await this._pageSizeFallback()).text();\n        return coerceNumberProperty(await value);\n    }\n    /** Gets the text of the range labe of the paginator. */\n    async getRangeLabel() {\n        return (await this._rangeLabel()).text();\n    }\n}\n/** Harness for interacting with a standard mat-paginator in tests. */\nclass MatPaginatorHarness extends _MatPaginatorHarnessBase {\n    constructor() {\n        super(...arguments);\n        this._nextButton = this.locatorFor('.mat-paginator-navigation-next');\n        this._previousButton = this.locatorFor('.mat-paginator-navigation-previous');\n        this._firstPageButton = this.locatorForOptional('.mat-paginator-navigation-first');\n        this._lastPageButton = this.locatorForOptional('.mat-paginator-navigation-last');\n        this._select = this.locatorForOptional(MatSelectHarness.with({\n            ancestor: '.mat-paginator-page-size',\n        }));\n        this._pageSizeFallback = this.locatorFor('.mat-paginator-page-size-value');\n        this._rangeLabel = this.locatorFor('.mat-paginator-range-label');\n    }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for a `MatPaginatorHarness` that meets\n     * certain criteria.\n     * @param options Options for filtering which paginator instances are considered a match.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return new HarnessPredicate(MatPaginatorHarness, options);\n    }\n}\n/** Selector used to find paginator instances. */\nMatPaginatorHarness.hostSelector = '.mat-paginator';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { MatPaginatorHarness, _MatPaginatorHarnessBase };\n"]},"metadata":{},"sourceType":"module"}