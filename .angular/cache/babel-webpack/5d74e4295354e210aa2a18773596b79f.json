{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { UUID } from 'angular2-uuid';\nimport { Facture } from '../models/facture';\nimport { NgbdModalFocus } from '../modal/modal-focus';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"../services/storage.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@ngx-translate/core\";\n\nfunction Invoice_th_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 28);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const head_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", head_r3, \" \");\n  }\n}\n\nfunction Invoice_tr_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 29);\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const p_r4 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(p_r4.product.productName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(p_r4.product.description);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(p_r4.product.priceHtva);\n  }\n}\n\nfunction Invoice_div_48_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"img\", 30);\n    i0.ɵɵelementStart(2, \"button\", 31);\n    i0.ɵɵlistener(\"click\", function Invoice_div_48_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.resetImages();\n    });\n    i0.ɵɵelement(3, \"i\", 32);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const img_r5 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hidden\", !ctx_r2.ScanMode)(\"alt\", img_r5.Name)(\"src\", img_r5, i0.ɵɵsanitizeUrl);\n  }\n}\n\nexport let Invoice = /*#__PURE__*/(() => {\n  class Invoice {\n    constructor(modalS, storageService, router, route) {\n      this.modalS = modalS;\n      this.storageService = storageService;\n      this.router = router;\n      this.route = route;\n      this.images = [];\n      this.invList = []; // productsList : Array<Product>= [];\n\n      this.headElementsArt = ['Nom article', 'Description', 'Prix HTVA', 'Catégorie'];\n      this.panierList = [];\n      this.formInv = new FormGroup({\n        factureName: new FormControl('', Validators.required),\n        description: new FormControl(''),\n        typePay: new FormControl('', [Validators.required]),\n        priceHtva: new FormControl({\n          value: '0',\n          disabled: true\n        }),\n        tva: new FormControl('0'),\n        remise: new FormControl('0'),\n        totalPrice: new FormControl('0')\n      });\n      this.modal = new NgbdModalFocus(this.modalS);\n    }\n\n    ionViewDidEnter() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const tmpMode = this.route.snapshot.paramMap.get('mode');\n\n        if (tmpMode === 'false') // creation\n          {\n            this.ScanMode = false; // creation\n          } else if (tmpMode === 'true') {\n          this.ScanMode = true;\n        }\n      });\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const nowDate = new Date();\n        this.date = nowDate.getDate() + '/' + (nowDate.getMonth() + 1) + '/' + nowDate.getFullYear();\n        const existId = this.route.snapshot.paramMap.get('factureId');\n        const invoiceId = this.route.snapshot.paramMap.get('invoiceId');\n        this.chantierId = this.route.snapshot.paramMap.get('chantierId');\n        const tmpMode = this.route.snapshot.paramMap.get('mode');\n        this.type = this.route.snapshot.paramMap.get('type'); // devis ou facture\n\n        const chantierl = yield this.storageService.get('Chantiers');\n\n        if (this.chantierId != null) {\n          if (this.type === 'facture') this.invList = chantierl.find(a => a.chantierId === this.chantierId).factures;else this.invList = chantierl.find(a => a.chantierId === this.chantierId).devis;\n        }\n\n        if (this.invList == null) this.invList = new Array();\n\n        if (tmpMode === 'false') {\n          this.ScanMode = false;\n          this.mode = 'creation';\n        } else if (tmpMode === 'true') {\n          this.ScanMode = true;\n          this.mode = 'scan';\n        }\n\n        if (existId != null) {\n          console.log('modification', existId);\n          this.indexFind = this.invList.findIndex(x => x.factureId === existId);\n\n          if (this.indexFind >= 0) {\n            this.invoiceId = this.invList[this.indexFind].factureId;\n            this.formInv.setValue({\n              factureName: this.invList[this.indexFind].factureName,\n              description: this.invList[this.indexFind].description,\n              typePay: this.invList[this.indexFind].typePay,\n              priceHtva: this.invList[this.indexFind].priceHtva,\n              remise: this.invList[this.indexFind].remise,\n              tva: this.invList[this.indexFind].tva,\n              totalPrice: this.invList[this.indexFind].totalPrice\n            });\n            this.images = this.invList[this.indexFind].images;\n            this.mode = this.invList[this.indexFind].mode;\n            this.receivedMoney = this.invList[this.indexFind].receivedMoney;\n            console.log('mode ', this.mode);\n            console.log(this.invList[this.indexFind].cart);\n            if (this.mode === 'creation') this.panierList = this.invList[this.indexFind].cart;\n            console.log(this.panierList);\n          }\n        } else {\n          console.log('creation : ', existId);\n          this.invoiceId = this.generateUUID();\n        }\n\n        if (this.mode === 'creation') {\n          this.ScanMode = false;\n        } else if (this.mode === 'scan') {\n          this.ScanMode = true;\n        }\n\n        if (invoiceId != null) {\n          this.invoiceId = invoiceId;\n          this.panierList = this.invList.find(a => a.factureId === this.invoiceId).cart;\n          let total = 0;\n          this.panierList.forEach(element => {\n            console.log('total value :', total);\n            total = total + Number.parseFloat(element.product.priceHtva.toString()) * element.quantity;\n            total = Math.round(total * 100) / 100; // arrondi\n          });\n          console.log('total value :', total);\n          this.formInv.get('priceHtva').setValue(total);\n        }\n\n        this.invSettings = yield this.storageService.get('MyInvoiceSettings');\n        console.log(this.invSettings);\n        let generatedName = '';\n\n        if (this.invSettings.positionApres) {\n          generatedName += this.invSettings.factureName + this.invSettings.extType;\n        }\n\n        console.log(this.invSettings.exts, this.invSettings.exts.length);\n\n        if (this.invSettings.exts === 'Num') {\n          generatedName += this.invSettings.extNum;\n          this.invSettings.extNum = Number.parseInt(this.invSettings.extNum.toString()) + 1;\n          console.log(generatedName);\n        } else if (this.invSettings.exts === 'Date') {\n          generatedName += nowDate.getDate() + '/' + (nowDate.getMonth() + 1) + '/' + nowDate.getFullYear();\n          console.log(generatedName);\n        } else if (this.invSettings.exts === 'NumDate') {\n          generatedName += this.invSettings.extNum;\n          generatedName += '-' + nowDate.getDate() + '/' + (nowDate.getMonth() + 1) + '/' + nowDate.getFullYear();\n          this.invSettings.extNum = Number.parseInt(this.invSettings.extNum.toString()) + 1;\n          console.log(generatedName);\n        } else if (this.invSettings.exts === 'DateNum') {\n          generatedName += nowDate.getDate() + '/' + (nowDate.getMonth() + 1) + '/' + nowDate.getFullYear();\n          generatedName += '-' + this.invSettings.extNum;\n          this.invSettings.extNum = Number.parseInt(this.invSettings.extNum.toString()) + 1;\n          console.log(generatedName);\n        }\n\n        if (this.invSettings.positionAvant) {\n          generatedName += this.invSettings.extType + this.invSettings.factureName;\n        }\n\n        this.formInv.get('factureName').setValue(generatedName);\n      });\n    }\n\n    GoShopping() {\n      // this.router.navigate(['shop',{invoiceId : this.invoiceId,type : this.type,chantierId : this.chantierId}],{replaceUrl:true});\n      this.router.navigate(['shop', {\n        invoiceId: this.invoiceId,\n        type: this.type,\n        chantierId: this.chantierId\n      }], {\n        replaceUrl: true\n      });\n    }\n\n    CreateWorksite() {\n      return __awaiter(this, void 0, void 0, function* () {});\n    }\n\n    get f() {\n      return this.formInv.controls;\n    }\n\n    onFileChange(event) {\n      if (event.target.files && event.target.files[0]) {\n        const filesAmount = event.target.files.length;\n\n        for (let i = 0; i < filesAmount; i++) {\n          const reader = new FileReader();\n\n          reader.onload = event => {\n            console.log(event.target.result);\n            this.images.push(event.target.result);\n            this.formInv.patchValue({\n              fileSource: this.images\n            });\n          };\n\n          reader.readAsDataURL(event.target.files[i]);\n        }\n      }\n    }\n\n    onSubmit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.mode === 'creation') {\n          this.formInv.get('priceHtva').setValidators([Validators.required]);\n          this.formInv.get('priceHtva').updateValueAndValidity();\n          this.formInv.get('tva').setValidators([Validators.required]);\n          this.formInv.get('tva').updateValueAndValidity();\n          this.formInv.get('remise').setValidators([Validators.required]);\n          this.formInv.get('remise').updateValueAndValidity();\n        } else {\n          this.formInv.get('totalPrice').setValidators([Validators.required]);\n          this.formInv.get('totalPrice').updateValueAndValidity();\n        }\n\n        console.log('form status', this.formInv);\n        const invalid = [];\n        const controls = this.formInv.controls;\n\n        for (const name in controls) {\n          if (controls[name].invalid) {\n            let nom = '';\n            if (name === 'factureName') nom = 'Nom facture';\n            if (name === 'typePay') nom = 'Type de paiement';\n            if (name === 'priceHtva') nom = 'Prix HTVA';\n            if (name === 'tva') nom = 'TVA';\n            if (name === 'remise') nom = 'Remise';\n            if (name === 'totalPrice') nom = 'Prix total';\n            invalid.push(nom);\n          }\n        }\n\n        if (!this.formInv.valid) {\n          let res = null;\n          yield this.modal.open('field', invalid.toString()).then(result => result.result.then(data => {\n            res = 'OK';\n          }, reason => {\n            res = 'DISMISS';\n          }));\n          return;\n        }\n\n        if (this.ScanMode === false) {\n          let total = 0;\n          let totalTva = 0;\n          var remise = this.formInv.get('remise').value;\n          remise = remise.toString().replace(',', '.');\n          var htvaString = this.formInv.get('priceHtva').value;\n          htvaString = htvaString.toString().replace(',', '.');\n          let htva = Number.parseFloat(htvaString);\n          var tvaString = this.formInv.get('tva').value;\n          tvaString = tvaString.toString().replace(',', '.');\n          var tva = Number.parseFloat(tvaString);\n\n          if (!Number(remise.toString())) {\n            console.log('pas un numeric', remise.toString());\n          }\n\n          if (!Number(htva.toString())) {\n            console.log('pas un numeric', htva.toString());\n          }\n\n          if (!Number(tva.toString())) {\n            console.log('pas un numeric', tva.toString());\n          }\n\n          if (Number.parseFloat(remise) !== 0) {\n            htva = htva * (1 - Number.parseFloat(remise) / 100);\n            htva = Math.round(htva * 100) / 100; // arrondi\n          }\n\n          totalTva = htva / 100 * Number.parseFloat(tva.toString());\n          totalTva = Math.round(totalTva * 100) / 100; // arrondi\n\n          total = Number.parseFloat(htva.toString()) + totalTva;\n          total = Math.round(total * 100) / 100; // arrondi\n\n          console.log('Tva : ', tva);\n          console.log('TTva : ', totalTva);\n          console.log('htva : ', htva);\n          this.formInv.get('totalPrice').setValue(total);\n        }\n\n        this.inv = new Facture(this.invoiceId, this.formInv.get('factureName').value, this.formInv.get('description').value, this.date, this.formInv.get('typePay').value, this.formInv.get('remise').value, this.formInv.get('priceHtva').value, this.formInv.get('tva').value, this.formInv.get('totalPrice').value, this.images, this.receivedMoney, this.panierList, this.mode, this.type);\n        console.log('list avant : ', this.invList);\n\n        if (this.indexFind >= 0) {\n          // this.invList.splice(this.indexFind,1);\n          this.invList[this.indexFind] = this.inv;\n        } else {\n          const index = this.invList.findIndex(a => a.factureId === this.invoiceId);\n          if (index >= 0) this.invList[index] = this.inv;else this.invList.push(this.inv);\n        }\n\n        console.log('list apres : ', this.invList);\n        const chantierl = yield this.storageService.get('Chantiers');\n        const chantier = chantierl.find(a => a.chantierId === this.chantierId);\n        const chantierIndex = chantierl.findIndex(a => a.chantierId === this.chantierId);\n        if (this.type === 'facture') chantier.factures = this.invList;else chantier.devis = this.invList;\n        chantierl[chantierIndex] = chantier;\n        this.storageService.set('Chantiers', chantierl);\n        this.storageService.set('MyInvoiceSettings', this.invSettings);\n        console.log('invoice saved', this.invList);\n        this.router.navigate(['/worksite', {\n          chantierId: this.chantierId\n        }], {\n          replaceUrl: true\n        });\n      });\n    }\n\n    generateUUID() {\n      this.uuidValue = UUID.UUID();\n      return this.uuidValue;\n    }\n\n    resetImages() {\n      this.images = [];\n    }\n\n    hideInput() {\n      if (this.ScanMode === true) this.ScanMode = false;else this.ScanMode = true;\n    }\n\n    GoBack() {\n      this.router.navigate(['worksite', {\n        chantierId: this.chantierId\n      }], {\n        replaceUrl: true\n      });\n    }\n\n  }\n\n  Invoice.ɵfac = function Invoice_Factory(t) {\n    return new (t || Invoice)(i0.ɵɵdirectiveInject(i1.NgbModal), i0.ɵɵdirectiveInject(i2.StorageService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n\n  Invoice.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Invoice,\n    selectors: [[\"app-invoice\"]],\n    decls: 96,\n    vars: 95,\n    consts: [[3, \"click\"], [\"name\", \"arrow-back\"], [1, \"container\", 2, \"overflow-y\", \"auto\"], [3, \"formGroup\", \"ngSubmit\"], [\"required\", \"required\", 1, \"form-group\"], [\"position\", \"floating\", 3, \"hidden\"], [\"type\", \"text\", \"id\", \"factureName\", \"name\", \"factureName\", \"formControlName\", \"factureName\", \"placeholder\", \"...\", \"required\", \"required\"], [\"for\", \"art\", \"type\", \"button\", 3, \"hidden\", \"click\"], [1, \"card-header\", 3, \"hidden\"], [1, \"col-auto\", \"table-wrapper-scroll-y\", \"my-custom-scrollbar\", 3, \"hidden\"], [1, \"table\", \"table-bordered\", \"table-striped\", \"mb-0\"], [\"scope\", \"col\", 4, \"ngFor\", \"ngForOf\"], [\"mdbTableCol\", \"\", 4, \"ngFor\", \"ngForOf\"], [3, \"hidden\"], [\"for\", \"imgFactures\", 3, \"hidden\"], [\"id\", \"imgFactures\", \"type\", \"file\", \"multiple\", \"\", 1, \"form-control\", 3, \"hidden\", \"change\"], [4, \"ngFor\", \"ngForOf\"], [\"interface\", \"alert\", \"okText\", \"Ok\", \"cancelText\", \"Annuler\", \"formControlName\", \"typePay\", \"required\", \"required\"], [\"value\", \"cash\"], [\"value\", \"bancaire\"], [\"required\", \"required\", 1, \"form-group\", 3, \"hidden\"], [\"position\", \"floating\"], [\"type\", \"text\", \"id\", \"htva\", \"name\", \"htva\", \"formControlName\", \"priceHtva\", \"placeholder\", \"124.5\", \"required\", \"required\", 3, \"hidden\"], [\"type\", \"text\", \"id\", \"tva\", \"name\", \"tva\", \"formControlName\", \"tva\", \"placeholder\", \"21.6\", \"required\", \"required\", 3, \"hidden\"], [\"type\", \"text\", \"id\", \"remise\", \"name\", \"remise\", \"formControlName\", \"remise\", \"placeholder\", \"10\", \"required\", \"required\", 3, \"hidden\"], [\"type\", \"text\", \"id\", \"totalPrice\", \"name\", \"totalPrice\", \"formControlName\", \"totalPrice\", \"required\", \"required\", \"placeholder\", \"125.35\", 3, \"hidden\"], [\"id\", \"description\", \"name\", \"description\", \"formControlName\", \"description\", \"placeholder\", \"...\", 2, \"height\", \"100px\"], [\"type\", \"submit\", 3, \"hidden\", \"value\"], [\"scope\", \"col\"], [\"mdbTableCol\", \"\"], [\"height\", \"150\", \"width\", \"200px\", 1, \"original\", 2, \"margin\", \"3px\", 3, \"hidden\", \"alt\", \"src\"], [\"type\", \"submit\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"far\", \"fa-trash-alt\"]],\n    template: function Invoice_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-button\", 0);\n        i0.ɵɵlistener(\"click\", function Invoice_Template_ion_button_click_2_listener() {\n          return ctx.GoBack();\n        });\n        i0.ɵɵelement(3, \"ion-icon\", 1);\n        i0.ɵɵelementStart(4, \"ion-label\");\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 2);\n        i0.ɵɵelementStart(8, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function Invoice_Template_form_ngSubmit_8_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(9, \"ion-item\", 4);\n        i0.ɵɵelementStart(10, \"ion-label\", 5);\n        i0.ɵɵtext(11);\n        i0.ɵɵpipe(12, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"ion-label\", 5);\n        i0.ɵɵtext(14);\n        i0.ɵɵpipe(15, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"ion-input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 4);\n        i0.ɵɵelementStart(18, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function Invoice_Template_button_click_18_listener() {\n          return ctx.GoShopping();\n        });\n        i0.ɵɵtext(19);\n        i0.ɵɵpipe(20, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"div\", 8);\n        i0.ɵɵtext(22);\n        i0.ɵɵpipe(23, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 9);\n        i0.ɵɵelementStart(25, \"table\", 10);\n        i0.ɵɵelementStart(26, \"thead\");\n        i0.ɵɵelementStart(27, \"tr\");\n        i0.ɵɵtemplate(28, Invoice_th_28_Template, 2, 1, \"th\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(29, \"tbody\");\n        i0.ɵɵtemplate(30, Invoice_tr_30_Template, 7, 3, \"tr\", 12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"div\", 13);\n        i0.ɵɵelementStart(32, \"label\", 14);\n        i0.ɵɵtext(33);\n        i0.ɵɵpipe(34, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"div\", 13);\n        i0.ɵɵelementStart(36, \"label\", 14);\n        i0.ɵɵtext(37);\n        i0.ɵɵpipe(38, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"ion-item\", 13);\n        i0.ɵɵelementStart(40, \"ion-label\", 5);\n        i0.ɵɵtext(41);\n        i0.ɵɵpipe(42, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(43, \"ion-item\", 13);\n        i0.ɵɵelementStart(44, \"ion-label\", 5);\n        i0.ɵɵtext(45);\n        i0.ɵɵpipe(46, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"input\", 15);\n        i0.ɵɵlistener(\"change\", function Invoice_Template_input_change_47_listener($event) {\n          return ctx.onFileChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(48, Invoice_div_48_Template, 4, 3, \"div\", 16);\n        i0.ɵɵelementStart(49, \"ion-item\");\n        i0.ɵɵelementStart(50, \"ion-label\");\n        i0.ɵɵtext(51);\n        i0.ɵɵpipe(52, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(53, \"ion-select\", 17);\n        i0.ɵɵelementStart(54, \"ion-select-option\", 18);\n        i0.ɵɵtext(55);\n        i0.ɵɵpipe(56, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(57, \"ion-select-option\", 19);\n        i0.ɵɵtext(58);\n        i0.ɵɵpipe(59, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(60, \"ion-item\", 20);\n        i0.ɵɵelementStart(61, \"ion-label\", 21);\n        i0.ɵɵtext(62);\n        i0.ɵɵpipe(63, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(64, \"ion-input\", 22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(65, \"ion-item\", 20);\n        i0.ɵɵelementStart(66, \"ion-label\", 21);\n        i0.ɵɵtext(67);\n        i0.ɵɵpipe(68, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(69, \"ion-input\", 23);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"ion-item\", 20);\n        i0.ɵɵelementStart(71, \"ion-label\", 21);\n        i0.ɵɵtext(72);\n        i0.ɵɵpipe(73, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(74, \"ion-input\", 24);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(75, \"ion-item\", 20);\n        i0.ɵɵelementStart(76, \"ion-label\", 21);\n        i0.ɵɵtext(77);\n        i0.ɵɵpipe(78, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(79, \"ion-input\", 25);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(80, \"hr\");\n        i0.ɵɵelementStart(81, \"ion-item\");\n        i0.ɵɵelementStart(82, \"ion-label\", 21);\n        i0.ɵɵtext(83);\n        i0.ɵɵpipe(84, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(85, \"ion-textarea\", 26);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(86, \"div\", 13);\n        i0.ɵɵelement(87, \"input\", 27);\n        i0.ɵɵpipe(88, \"translate\");\n        i0.ɵɵelement(89, \"input\", 27);\n        i0.ɵɵpipe(90, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(91, \"div\", 13);\n        i0.ɵɵelement(92, \"input\", 27);\n        i0.ɵɵpipe(93, \"translate\");\n        i0.ɵɵelement(94, \"input\", 27);\n        i0.ɵɵpipe(95, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 53, \"back\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.formInv);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.type == \"devis\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(12, 55, \"invoiceName\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.type == \"facture\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(15, 57, \"estimateName\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"hidden\", ctx.ScanMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 59, \"addProduct\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.ScanMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(23, 61, \"cart\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.ScanMode);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.headElementsArt);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.panierList);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", ctx.type == \"devis\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.ScanMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(34, 63, \"invoicePicture\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.type == \"facture\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.ScanMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(38, 65, \"estimatePicture\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.type == \"devis\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.ScanMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(42, 67, \"invoicePicture\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.type == \"facture\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.ScanMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(46, 69, \"estimatePicture\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", !ctx.ScanMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.images);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(52, 71, \"paymentType\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(56, 73, \"byCash\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(59, 75, \"byBank\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.ScanMode);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(63, 77, \"htvaPrice\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.ScanMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", ctx.ScanMode);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(68, 79, \"tva\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.ScanMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", ctx.ScanMode);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(73, 81, \"discount\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.ScanMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.ScanMode);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(78, 83, \"priceToPay\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", !ctx.ScanMode);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(84, 85, \"description\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"hidden\", ctx.type == \"devis\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(88, 87, \"scanInvoice\"));\n        i0.ɵɵproperty(\"hidden\", !ctx.ScanMode);\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(90, 89, \"createInvoice\"));\n        i0.ɵɵproperty(\"hidden\", ctx.ScanMode == true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"hidden\", ctx.type != \"devis\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(93, 91, \"scanEstimate\"));\n        i0.ɵɵproperty(\"hidden\", !ctx.ScanMode);\n        i0.ɵɵadvance(2);\n        i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(95, 93, \"createEstimate\"));\n        i0.ɵɵproperty(\"hidden\", ctx.ScanMode == true);\n      }\n    },\n    directives: [i4.IonHeader, i4.IonToolbar, i4.IonButton, i4.IonIcon, i4.IonLabel, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i4.IonItem, i4.IonInput, i4.TextValueAccessor, i5.NgControlStatus, i5.FormControlName, i5.RequiredValidator, i6.NgForOf, i4.IonSelect, i4.SelectValueAccessor, i4.IonSelectOption, i4.IonTextarea],\n    pipes: [i7.TranslatePipe],\n    styles: [\".abs-center-x[_ngcontent-%COMP%]{position:absolute;left:50%;transform:translate(-50%)}.my-custom-scrollbar[_ngcontent-%COMP%]{position:relative;height:200px;overflow:auto}.table-wrapper-scroll-y[_ngcontent-%COMP%]{display:block}input[type=text][_ngcontent-%COMP%], select[_ngcontent-%COMP%], textarea[_ngcontent-%COMP%]{width:100%;padding:12px;border:1px solid #ccc;border-radius:4px;box-sizing:border-box;margin-top:6px;margin-bottom:16px;resize:vertical}input[type=submit][_ngcontent-%COMP%]{background-color:#04aa6d;color:#fff;padding:12px 20px;border:none;border-radius:4px;cursor:pointer}input[type=submit][_ngcontent-%COMP%]:hover{background-color:#45a049}.form-group[required=required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:not(.required){border:1px solid black}.form-group[required=required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid red}.form-group[required=required][_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:after{content:\\\" *\\\";color:red}.form-group[required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid red}.form-group[required][_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:after{content:\\\" *\\\";color:red}\"]\n  });\n  return Invoice;\n})();","map":null,"metadata":{},"sourceType":"module"}