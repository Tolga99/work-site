{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { NgbdModalFocus } from '../modal/modal-focus';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/storage.service\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@ngx-translate/core\";\n\nfunction Payment_th_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const head_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", head_r2, \" \");\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"class_name\": a0\n  };\n};\n\nfunction Payment_tr_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"tr\", 15);\n    i0.ɵɵlistener(\"click\", function Payment_tr_18_Template_tr_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const inv_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.SelectInvoice(inv_r3);\n    });\n    i0.ɵɵelementStart(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"td\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const inv_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c0, inv_r3 === ctx_r1.selectedInv));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(inv_r3.factureName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(inv_r3.totalPrice);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(7, 5, (inv_r3 == null ? null : inv_r3.totalPrice) - ctx_r1.GetAllReceivedMoney(inv_r3), \"1.2\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(inv_r3.date);\n  }\n}\n\nexport let Payment = /*#__PURE__*/(() => {\n  class Payment {\n    constructor(modalS, router, route, storageService) {\n      this.modalS = modalS;\n      this.router = router;\n      this.route = route;\n      this.storageService = storageService;\n      this.formPay = new FormGroup({\n        chantierName: new FormControl(''),\n        payment: new FormControl('', [Validators.required]),\n        address: new FormControl('')\n      });\n      this.headElementsInv = ['Nom facture', 'Total', 'Reste à payer', 'Date'];\n      this.modal = new NgbdModalFocus(this.modalS);\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const nowDate = new Date();\n        this.date = nowDate.getDate() + '/' + (nowDate.getMonth() + 1) + '/' + nowDate.getFullYear();\n        this.chantierId = this.route.snapshot.paramMap.get('chantierId');\n        this.storageService.init();\n        this.chantierList = yield this.storageService.get('Chantiers');\n        this.chantierIndex = this.chantierList.findIndex(a => a.chantierId === this.chantierId);\n        this.chantier = this.chantierList.find(a => a.chantierId === this.chantierId); // console.log(this.invList);\n      });\n    }\n\n    SelectInvoice(f) {\n      this.selectedInv = f;\n      if (this.selectedInv.receivedMoney == null) this.selectedInv.receivedMoney = new Array();\n      this.ReceivedMoney = 0;\n      this.selectedInv.receivedMoney.forEach(element => {\n        this.ReceivedMoney = element.price + this.ReceivedMoney;\n      });\n    }\n\n    GetAllReceivedMoney(f) {\n      let total = 0;\n      if (f.receivedMoney == null) f.receivedMoney = new Array();\n      f.receivedMoney.forEach(element => {\n        if (element.price.toString().includes(',') === true) {\n          const price = element.price.toString().replace(',', '.');\n          element.price = Number.parseFloat(price);\n        }\n\n        total = element.price + total;\n      });\n      total = Math.round(total * 100) / 100; // arrondi\n\n      return total;\n    }\n\n    GoBack() {\n      this.router.navigate(['worksite', {\n        chantierId: this.chantierId\n      }], {\n        replaceUrl: true\n      });\n    }\n\n    SavePay() {\n      var _a;\n\n      return __awaiter(this, void 0, void 0, function* () {\n        const invalid = [];\n        const controls = this.formPay.controls;\n\n        for (const name in controls) {\n          if (controls[name].invalid) {\n            let nom = '';\n            if (name === 'payment') nom = 'Paiement';\n            invalid.push(nom);\n          }\n        }\n\n        if (this.selectedInv == null) invalid.push('Facture non selectionné');\n\n        if (!this.formPay.valid || this.selectedInv == null) {\n          let res = null;\n          yield this.modal.open('field', invalid.toString()).then(result => result.result.then(data => {\n            res = 'OK';\n          }, reason => {\n            res = 'DISMISS';\n          }));\n          return;\n        }\n\n        var payString = this.formPay.get('payment').value;\n\n        if (payString.toString().includes(',') === true) {\n          payString.toString().replace(',', '.');\n        }\n\n        var pay = Number.parseFloat(payString);\n        console.log(\"payString : \", payString);\n        console.log(\"pay : \", pay);\n        if (pay == null) return;\n        if (this.selectedInv == null) return;\n\n        if (pay > ((_a = this.selectedInv) === null || _a === void 0 ? void 0 : _a.totalPrice) - this.GetAllReceivedMoney(this.selectedInv)) {\n          let res = null;\n          yield this.modal.open('field', 'Argent encodé plus grand que le reste à payer').then(result => result.result.then(data => {\n            res = 'OK';\n          }, reason => {\n            res = 'DISMISS';\n          }));\n          return;\n        }\n\n        this.selectedInv.receivedMoney.push({\n          price: pay,\n          date: this.date\n        });\n        const index = this.chantier.factures.findIndex(a => a.factureId === this.selectedInv.factureId);\n        this.chantier.factures[index] = this.selectedInv;\n        this.chantierList[this.chantierIndex] = this.chantier;\n        this.storageService.set('Chantiers', this.chantierList);\n      });\n    }\n\n    Terminer() {\n      this.router.navigate(['/worksite', {\n        chantierId: this.chantierId\n      }], {\n        replaceUrl: true\n      });\n    }\n\n  }\n\n  Payment.ɵfac = function Payment_Factory(t) {\n    return new (t || Payment)(i0.ɵɵdirectiveInject(i1.NgbModal), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.StorageService));\n  };\n\n  Payment.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Payment,\n    selectors: [[\"app-payment\"]],\n    decls: 30,\n    vars: 18,\n    consts: [[3, \"click\"], [\"name\", \"arrow-back\"], [1, \"container\", 2, \"overflow-y\", \"auto\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"card-header\"], [1, \"col-auto\", \"table-wrapper-scroll-y\", \"my-custom-scrollbar\"], [1, \"table\", \"table-bordered\", \"table-striped\", \"mb-0\"], [\"scope\", \"col\", 4, \"ngFor\", \"ngForOf\"], [\"mdbTableCol\", \"\", 3, \"ngClass\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"required\", \"required\", 1, \"form-group\"], [\"position\", \"floating\"], [\"type\", \"number\", \"id\", \"payment\", \"name\", \"payment\", \"formControlName\", \"payment\", \"placeholder\", \"...\", \"required\", \"required\"], [1, \"btn\", \"btn-danger\"], [\"type\", \"submit\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [\"scope\", \"col\"], [\"mdbTableCol\", \"\", 3, \"ngClass\", \"click\"]],\n    template: function Payment_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-button\", 0);\n        i0.ɵɵlistener(\"click\", function Payment_Template_ion_button_click_2_listener() {\n          return ctx.GoBack();\n        });\n        i0.ɵɵelement(3, \"ion-icon\", 1);\n        i0.ɵɵelementStart(4, \"ion-label\");\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 2);\n        i0.ɵɵelementStart(8, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function Payment_Template_form_ngSubmit_8_listener() {\n          return ctx.SavePay();\n        });\n        i0.ɵɵelementStart(9, \"div\", 4);\n        i0.ɵɵtext(10);\n        i0.ɵɵpipe(11, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 5);\n        i0.ɵɵelementStart(13, \"table\", 6);\n        i0.ɵɵelementStart(14, \"thead\");\n        i0.ɵɵelementStart(15, \"tr\");\n        i0.ɵɵtemplate(16, Payment_th_16_Template, 2, 1, \"th\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"tbody\");\n        i0.ɵɵtemplate(18, Payment_tr_18_Template, 10, 10, \"tr\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"ion-item\", 9);\n        i0.ɵɵelementStart(20, \"ion-label\", 10);\n        i0.ɵɵtext(21);\n        i0.ɵɵpipe(22, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(23, \"ion-input\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"button\", 12);\n        i0.ɵɵtext(25);\n        i0.ɵɵpipe(26, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function Payment_Template_button_click_27_listener() {\n          return ctx.Terminer();\n        });\n        i0.ɵɵtext(28);\n        i0.ɵɵpipe(29, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 8, \"back\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.formPay);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(11, 10, \"selectInvoice\"), \" \");\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngForOf\", ctx.headElementsInv);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.chantier == null ? null : ctx.chantier.factures);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(22, 12, \"payment\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(26, 14, \"addPay\"), \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(29, 16, \"savePay\"));\n      }\n    },\n    directives: [i4.IonHeader, i4.IonToolbar, i4.IonButton, i4.IonIcon, i4.IonLabel, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i6.NgForOf, i4.IonItem, i4.IonInput, i4.NumericValueAccessor, i5.NgControlStatus, i5.FormControlName, i5.RequiredValidator, i6.NgClass],\n    pipes: [i7.TranslatePipe, i6.DecimalPipe],\n    styles: [\".class_name[_ngcontent-%COMP%]{background-color:#ff0!important}.form-group[required=required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:not(.required){border:1px solid black}.form-group[required=required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid red}.form-group[required=required][_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:after{content:\\\" *\\\";color:red}.form-group[required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid red}.form-group[required][_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:after{content:\\\" *\\\";color:red}\"]\n  });\n  return Payment;\n})();","map":null,"metadata":{},"sourceType":"module"}