{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/t_olg/Desktop/Tolga/Ov/Projets/DevisApp/work-site/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ComponentHarness, HarnessPredicate } from '@angular/cdk/testing';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Harness for interacting with a `mat-option` in tests. */\n\nclass MatOptionHarness extends ComponentHarness {\n  constructor() {\n    super(...arguments);\n    /** Element containing the option's text. */\n\n    this._text = this.locatorFor('.mat-option-text');\n  }\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatOptionsHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which option instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n\n\n  static with(options = {}) {\n    return new HarnessPredicate(MatOptionHarness, options).addOption('text', options.text, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (harness, title) {\n        return HarnessPredicate.stringMatches(yield harness.getText(), title);\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()).addOption('isSelected', options.isSelected, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (harness, isSelected) {\n        return (yield harness.isSelected()) === isSelected;\n      });\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n  /** Clicks the option. */\n\n\n  click() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this.host()).click();\n    })();\n  }\n  /** Gets the option's label text. */\n\n\n  getText() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this2._text()).text();\n    })();\n  }\n  /** Gets whether the option is disabled. */\n\n\n  isDisabled() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this3.host()).hasClass('mat-option-disabled');\n    })();\n  }\n  /** Gets whether the option is selected. */\n\n\n  isSelected() {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this4.host()).hasClass('mat-selected');\n    })();\n  }\n  /** Gets whether the option is active. */\n\n\n  isActive() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this5.host()).hasClass('mat-active');\n    })();\n  }\n  /** Gets whether the option is in multiple selection mode. */\n\n\n  isMultiple() {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this6.host()).hasClass('mat-option-multiple');\n    })();\n  }\n\n}\n/** Selector used to locate option instances. */\n\n\nMatOptionHarness.hostSelector = '.mat-option';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Harness for interacting with a `mat-optgroup` in tests. */\n\nclass MatOptgroupHarness extends ComponentHarness {\n  constructor() {\n    super(...arguments);\n    this._label = this.locatorFor('.mat-optgroup-label');\n  }\n  /**\n   * Gets a `HarnessPredicate` that can be used to search for a `MatOptgroupHarness` that meets\n   * certain criteria.\n   * @param options Options for filtering which option instances are considered a match.\n   * @return a `HarnessPredicate` configured with the given options.\n   */\n\n\n  static with(options = {}) {\n    return new HarnessPredicate(MatOptgroupHarness, options).addOption('labelText', options.labelText, /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (harness, title) {\n        return HarnessPredicate.stringMatches(yield harness.getLabelText(), title);\n      });\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  }\n  /** Gets the option group's label text. */\n\n\n  getLabelText() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this7._label()).text();\n    })();\n  }\n  /** Gets whether the option group is disabled. */\n\n\n  isDisabled() {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return (yield _this8.host()).hasClass('mat-optgroup-disabled');\n    })();\n  }\n  /**\n   * Gets the options that are inside the group.\n   * @param filter Optionally filters which options are included.\n   */\n\n\n  getOptions(filter = {}) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      return _this9.locatorForAll(MatOptionHarness.with(filter))();\n    })();\n  }\n\n}\n/** Selector used to locate option group instances. */\n\n\nMatOptgroupHarness.hostSelector = '.mat-optgroup';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { MatOptgroupHarness, MatOptionHarness };","map":{"version":3,"sources":["C:/Users/t_olg/Desktop/Tolga/Ov/Projets/DevisApp/work-site/node_modules/@angular/material/fesm2020/core/testing.mjs"],"names":["ComponentHarness","HarnessPredicate","MatOptionHarness","constructor","arguments","_text","locatorFor","with","options","addOption","text","harness","title","stringMatches","getText","isSelected","click","host","isDisabled","hasClass","isActive","isMultiple","hostSelector","MatOptgroupHarness","_label","labelText","getLabelText","getOptions","filter","locatorForAll"],"mappings":"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","sourcesContent":["import { ComponentHarness, HarnessPredicate } from '@angular/cdk/testing';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Harness for interacting with a `mat-option` in tests. */\nclass MatOptionHarness extends ComponentHarness {\n    constructor() {\n        super(...arguments);\n        /** Element containing the option's text. */\n        this._text = this.locatorFor('.mat-option-text');\n    }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for a `MatOptionsHarness` that meets\n     * certain criteria.\n     * @param options Options for filtering which option instances are considered a match.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return new HarnessPredicate(MatOptionHarness, options)\n            .addOption('text', options.text, async (harness, title) => HarnessPredicate.stringMatches(await harness.getText(), title))\n            .addOption('isSelected', options.isSelected, async (harness, isSelected) => (await harness.isSelected()) === isSelected);\n    }\n    /** Clicks the option. */\n    async click() {\n        return (await this.host()).click();\n    }\n    /** Gets the option's label text. */\n    async getText() {\n        return (await this._text()).text();\n    }\n    /** Gets whether the option is disabled. */\n    async isDisabled() {\n        return (await this.host()).hasClass('mat-option-disabled');\n    }\n    /** Gets whether the option is selected. */\n    async isSelected() {\n        return (await this.host()).hasClass('mat-selected');\n    }\n    /** Gets whether the option is active. */\n    async isActive() {\n        return (await this.host()).hasClass('mat-active');\n    }\n    /** Gets whether the option is in multiple selection mode. */\n    async isMultiple() {\n        return (await this.host()).hasClass('mat-option-multiple');\n    }\n}\n/** Selector used to locate option instances. */\nMatOptionHarness.hostSelector = '.mat-option';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Harness for interacting with a `mat-optgroup` in tests. */\nclass MatOptgroupHarness extends ComponentHarness {\n    constructor() {\n        super(...arguments);\n        this._label = this.locatorFor('.mat-optgroup-label');\n    }\n    /**\n     * Gets a `HarnessPredicate` that can be used to search for a `MatOptgroupHarness` that meets\n     * certain criteria.\n     * @param options Options for filtering which option instances are considered a match.\n     * @return a `HarnessPredicate` configured with the given options.\n     */\n    static with(options = {}) {\n        return new HarnessPredicate(MatOptgroupHarness, options).addOption('labelText', options.labelText, async (harness, title) => HarnessPredicate.stringMatches(await harness.getLabelText(), title));\n    }\n    /** Gets the option group's label text. */\n    async getLabelText() {\n        return (await this._label()).text();\n    }\n    /** Gets whether the option group is disabled. */\n    async isDisabled() {\n        return (await this.host()).hasClass('mat-optgroup-disabled');\n    }\n    /**\n     * Gets the options that are inside the group.\n     * @param filter Optionally filters which options are included.\n     */\n    async getOptions(filter = {}) {\n        return this.locatorForAll(MatOptionHarness.with(filter))();\n    }\n}\n/** Selector used to locate option group instances. */\nMatOptgroupHarness.hostSelector = '.mat-optgroup';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport { MatOptgroupHarness, MatOptionHarness };\n"]},"metadata":{},"sourceType":"module"}