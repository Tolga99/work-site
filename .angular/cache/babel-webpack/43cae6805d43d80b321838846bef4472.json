{"ast":null,"code":"import { int, pad } from \"../utils\";\n\nconst doNothing = () => undefined;\n\nexport const monthToStr = (monthNumber, shorthand, locale) => locale.months[shorthand ? \"shorthand\" : \"longhand\"][monthNumber];\nexport const revFormat = {\n  D: doNothing,\n  F: function (dateObj, monthName, locale) {\n    dateObj.setMonth(locale.months.longhand.indexOf(monthName));\n  },\n  G: (dateObj, hour) => {\n    dateObj.setHours(parseFloat(hour));\n  },\n  H: (dateObj, hour) => {\n    dateObj.setHours(parseFloat(hour));\n  },\n  J: (dateObj, day) => {\n    dateObj.setDate(parseFloat(day));\n  },\n  K: (dateObj, amPM, locale) => {\n    dateObj.setHours(dateObj.getHours() % 12 + 12 * int(new RegExp(locale.amPM[1], \"i\").test(amPM)));\n  },\n  M: function (dateObj, shortMonth, locale) {\n    dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));\n  },\n  S: (dateObj, seconds) => {\n    dateObj.setSeconds(parseFloat(seconds));\n  },\n  U: (_, unixSeconds) => new Date(parseFloat(unixSeconds) * 1000),\n  W: function (dateObj, weekNum, locale) {\n    const weekNumber = parseInt(weekNum);\n    const date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);\n    date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);\n    return date;\n  },\n  Y: (dateObj, year) => {\n    dateObj.setFullYear(parseFloat(year));\n  },\n  Z: (_, ISODate) => new Date(ISODate),\n  d: (dateObj, day) => {\n    dateObj.setDate(parseFloat(day));\n  },\n  h: (dateObj, hour) => {\n    dateObj.setHours(parseFloat(hour));\n  },\n  i: (dateObj, minutes) => {\n    dateObj.setMinutes(parseFloat(minutes));\n  },\n  j: (dateObj, day) => {\n    dateObj.setDate(parseFloat(day));\n  },\n  l: doNothing,\n  m: (dateObj, month) => {\n    dateObj.setMonth(parseFloat(month) - 1);\n  },\n  n: (dateObj, month) => {\n    dateObj.setMonth(parseFloat(month) - 1);\n  },\n  s: (dateObj, seconds) => {\n    dateObj.setSeconds(parseFloat(seconds));\n  },\n  u: (_, unixMillSeconds) => new Date(parseFloat(unixMillSeconds)),\n  w: doNothing,\n  y: (dateObj, year) => {\n    dateObj.setFullYear(2000 + parseFloat(year));\n  }\n};\nexport const tokenRegex = {\n  D: \"(\\\\w+)\",\n  F: \"(\\\\w+)\",\n  G: \"(\\\\d\\\\d|\\\\d)\",\n  H: \"(\\\\d\\\\d|\\\\d)\",\n  J: \"(\\\\d\\\\d|\\\\d)\\\\w+\",\n  K: \"\",\n  M: \"(\\\\w+)\",\n  S: \"(\\\\d\\\\d|\\\\d)\",\n  U: \"(.+)\",\n  W: \"(\\\\d\\\\d|\\\\d)\",\n  Y: \"(\\\\d{4})\",\n  Z: \"(.+)\",\n  d: \"(\\\\d\\\\d|\\\\d)\",\n  h: \"(\\\\d\\\\d|\\\\d)\",\n  i: \"(\\\\d\\\\d|\\\\d)\",\n  j: \"(\\\\d\\\\d|\\\\d)\",\n  l: \"(\\\\w+)\",\n  m: \"(\\\\d\\\\d|\\\\d)\",\n  n: \"(\\\\d\\\\d|\\\\d)\",\n  s: \"(\\\\d\\\\d|\\\\d)\",\n  u: \"(.+)\",\n  w: \"(\\\\d\\\\d|\\\\d)\",\n  y: \"(\\\\d{2})\"\n};\nexport const formats = {\n  Z: date => date.toISOString(),\n  D: function (date, locale, options) {\n    return locale.weekdays.shorthand[formats.w(date, locale, options)];\n  },\n  F: function (date, locale, options) {\n    return monthToStr(formats.n(date, locale, options) - 1, false, locale);\n  },\n  G: function (date, locale, options) {\n    return pad(formats.h(date, locale, options));\n  },\n  H: date => pad(date.getHours()),\n  J: function (date, locale) {\n    return locale.ordinal !== undefined ? date.getDate() + locale.ordinal(date.getDate()) : date.getDate();\n  },\n  K: (date, locale) => locale.amPM[int(date.getHours() > 11)],\n  M: function (date, locale) {\n    return monthToStr(date.getMonth(), true, locale);\n  },\n  S: date => pad(date.getSeconds()),\n  U: date => date.getTime() / 1000,\n  W: function (date, _, options) {\n    return options.getWeek(date);\n  },\n  Y: date => pad(date.getFullYear(), 4),\n  d: date => pad(date.getDate()),\n  h: date => date.getHours() % 12 ? date.getHours() % 12 : 12,\n  i: date => pad(date.getMinutes()),\n  j: date => date.getDate(),\n  l: function (date, locale) {\n    return locale.weekdays.longhand[date.getDay()];\n  },\n  m: date => pad(date.getMonth() + 1),\n  n: date => date.getMonth() + 1,\n  s: date => date.getSeconds(),\n  u: date => date.getTime(),\n  w: date => date.getDay(),\n  y: date => String(date.getFullYear()).substring(2)\n};","map":null,"metadata":{},"sourceType":"module"}