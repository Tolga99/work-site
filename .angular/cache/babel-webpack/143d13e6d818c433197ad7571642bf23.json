{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { UUID } from 'angular2-uuid';\nimport { Chantier } from '../models/chantier';\nimport { NgbdModalFocus } from '../modal/modal-focus';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"../services/storage.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@ngx-translate/core\";\n\nfunction CreateWorksite_ion_select_option_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-select-option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const name_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", name_r1.userId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", name_r1.lastName.toUpperCase(), \" \", name_r1.firstName, \" \");\n  }\n}\n\nexport let CreateWorksite = /*#__PURE__*/(() => {\n  class CreateWorksite {\n    constructor(modalS, storageService, router, route) {\n      this.modalS = modalS;\n      this.storageService = storageService;\n      this.router = router;\n      this.route = route;\n      this.chantierList = [];\n      this.clientList = [];\n      this.formWork = new FormGroup({\n        worksiteName: new FormControl('', Validators.required),\n        client: new FormControl('', Validators.required),\n        description: new FormControl(''),\n        address: new FormControl('')\n      });\n      this.modal = new NgbdModalFocus(this.modalS);\n    }\n\n    ionViewDidEnter() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('view did enter'); //this.storageService.init();\n        //this.clientList = await this.storageService.get('Contacts');\n      });\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const nowDate = new Date();\n        this.date = nowDate.getDate() + '/' + (nowDate.getMonth() + 1) + '/' + nowDate.getFullYear();\n        this.userId = this.route.snapshot.paramMap.get('userId');\n        console.log(this.userId);\n        this.storageService.init();\n        this.clientList = yield this.storageService.get('Contacts');\n        console.log(this.clientList);\n\n        if (this.userId !== null) {\n          this.formWork.get('client').setValue(this.clientList.find(a => a.userId === this.userId).userId); // this.formWork.get('client').setValue(this.clientList.find(a => a.userId === this.userId));\n          // this.formWork.get('client').setValue(this.clientList.find(a => a.userId === this.userId).userId);\n          // this.formWork.patchValue({client : this.clientList.find(a => a.userId === this.userId).lastName.toUpperCase()});\n        }\n      });\n    }\n\n    CreateWorksite() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const invalid = [];\n        const controls = this.formWork.controls;\n\n        for (const name in controls) {\n          if (controls[name].invalid) {\n            let nom = '';\n            if (name === 'worksiteName') nom = 'Nom chantier';\n            if (name === 'client') nom = 'Client';\n            invalid.push(nom);\n          }\n        }\n\n        if (!this.formWork.valid) {\n          let res = null;\n          yield this.modal.open('field', invalid.toString()).then(result => result.result.then(data => {\n            res = 'OK';\n          }, reason => {\n            res = 'DISMISS';\n          }));\n          return;\n        }\n\n        this.client = this.clientList.find(x => x.userId === this.formWork.get('client').value);\n        this.storageService.init();\n        this.newWorksite = new Chantier(this.generateUUID(), this.formWork.get('worksiteName').value, // this.client.lastName,\n        this.client.userId, this.formWork.get('description').value, this.formWork.get('address').value, this.date, null, 'En cours', null, null, null, null, null);\n        this.chantierList = yield this.storageService.get('Chantiers');\n        if (this.chantierList == null) this.chantierList = [];\n        this.chantierList.push(this.newWorksite);\n        this.storageService.set('Chantiers', this.chantierList);\n        if (this.client.historique == null) this.client.historique = new Array();\n        this.client.historique.push(this.newWorksite.chantierId);\n        this.clientList[this.clientList.findIndex(a => a.userId == this.client.userId)] = this.client;\n        this.storageService.set('Contacts', this.clientList);\n        console.log('Chantier crée, redirection...');\n        this.router.navigate(['/tb-home'], {\n          replaceUrl: true\n        });\n      });\n    }\n\n    NewClient() {\n      console.log('create client');\n      this.router.navigate(['new-contact', {\n        tag: 'chantier'\n      }], {\n        replaceUrl: true\n      });\n    }\n\n    generateUUID() {\n      this.uuidValue = UUID.UUID();\n      return this.uuidValue;\n    }\n\n    selectClient(event) {\n      const s = event.target.value;\n      this.formWork.patchValue({\n        address: this.clientList.find(a => a.userId === s).address\n      });\n    }\n\n    GoBack() {\n      this.router.navigate(['tb-home'], {\n        replaceUrl: true\n      });\n    }\n\n  }\n\n  CreateWorksite.ɵfac = function CreateWorksite_Factory(t) {\n    return new (t || CreateWorksite)(i0.ɵɵdirectiveInject(i1.NgbModal), i0.ɵɵdirectiveInject(i2.StorageService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n\n  CreateWorksite.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateWorksite,\n    selectors: [[\"app-createworksite\"]],\n    decls: 37,\n    vars: 23,\n    consts: [[1, \"container\", 2, \"overflow-y\", \"auto\"], [3, \"click\"], [\"name\", \"arrow-back\"], [3, \"formGroup\", \"ngSubmit\"], [\"required\", \"required\", 1, \"form-group\"], [\"position\", \"floating\"], [\"type\", \"text\", \"id\", \"name\", \"name\", \"name\", \"formControlName\", \"worksiteName\", \"placeholder\", \"...\", \"required\", \"required\"], [\"interface\", \"alert\", \"okText\", \"Ok\", \"cancelText\", \"Annuler\", \"formControlName\", \"client\", 3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 3, \"click\"], [\"type\", \"text\", \"id\", \"address\", \"name\", \"address\", \"formControlName\", \"address\", \"placeholder\", \"...\"], [\"id\", \"description\", \"name\", \"description\", \"formControlName\", \"description\", \"placeholder\", \"...\", 2, \"height\", \"100px\"], [\"type\", \"submit\", 3, \"value\"], [3, \"value\"]],\n    template: function CreateWorksite_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"ion-header\");\n        i0.ɵɵelementStart(2, \"ion-toolbar\");\n        i0.ɵɵelementStart(3, \"ion-button\", 1);\n        i0.ɵɵlistener(\"click\", function CreateWorksite_Template_ion_button_click_3_listener() {\n          return ctx.GoBack();\n        });\n        i0.ɵɵelement(4, \"ion-icon\", 2);\n        i0.ɵɵelementStart(5, \"ion-label\");\n        i0.ɵɵtext(6);\n        i0.ɵɵpipe(7, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function CreateWorksite_Template_form_ngSubmit_8_listener() {\n          return ctx.CreateWorksite();\n        });\n        i0.ɵɵelementStart(9, \"ion-item\", 4);\n        i0.ɵɵelementStart(10, \"ion-label\", 5);\n        i0.ɵɵtext(11);\n        i0.ɵɵpipe(12, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"ion-input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"ion-item\");\n        i0.ɵɵelementStart(15, \"ion-label\");\n        i0.ɵɵtext(16);\n        i0.ɵɵpipe(17, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"ion-select\", 7);\n        i0.ɵɵlistener(\"change\", function CreateWorksite_Template_ion_select_change_18_listener($event) {\n          return ctx.selectClient($event);\n        });\n        i0.ɵɵelement(19, \"ion-select-option\");\n        i0.ɵɵtemplate(20, CreateWorksite_ion_select_option_20_Template, 2, 3, \"ion-select-option\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(21, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function CreateWorksite_Template_button_click_21_listener() {\n          return ctx.NewClient();\n        });\n        i0.ɵɵtext(22);\n        i0.ɵɵpipe(23, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"hr\");\n        i0.ɵɵelementStart(25, \"ion-item\", 4);\n        i0.ɵɵelementStart(26, \"ion-label\", 5);\n        i0.ɵɵtext(27);\n        i0.ɵɵpipe(28, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"ion-input\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"ion-item\");\n        i0.ɵɵelementStart(31, \"ion-label\", 5);\n        i0.ɵɵtext(32);\n        i0.ɵɵpipe(33, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(34, \"ion-textarea\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(35, \"input\", 12);\n        i0.ɵɵpipe(36, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(7, 9, \"back\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.formWork);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(12, 11, \"nameWorksite\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(17, 13, \"client\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.clientList);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(23, 15, \"newClient?\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(28, 17, \"worksiteAddress\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(33, 19, \"description\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(36, 21, \"createWorksite\"));\n      }\n    },\n    directives: [i4.IonHeader, i4.IonToolbar, i4.IonButton, i4.IonIcon, i4.IonLabel, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i4.IonItem, i4.IonInput, i4.TextValueAccessor, i5.NgControlStatus, i5.FormControlName, i5.RequiredValidator, i4.IonSelect, i4.SelectValueAccessor, i4.IonSelectOption, i6.NgForOf, i4.IonTextarea],\n    pipes: [i7.TranslatePipe],\n    styles: [\".abs-center-x[_ngcontent-%COMP%]{position:absolute;left:50%;transform:translate(-50%)}.my-custom-scrollbar[_ngcontent-%COMP%]{position:relative;height:200px;overflow:auto}.table-wrapper-scroll-y[_ngcontent-%COMP%]{display:block}input[type=text][_ngcontent-%COMP%], select[_ngcontent-%COMP%], textarea[_ngcontent-%COMP%]{width:100%;padding:12px;border:1px solid #ccc;border-radius:4px;box-sizing:border-box;margin-top:6px;margin-bottom:16px;resize:vertical}input[type=submit][_ngcontent-%COMP%]{background-color:#04aa6d;color:#fff;padding:12px 20px;border:none;border-radius:4px;cursor:pointer}input[type=submit][_ngcontent-%COMP%]:hover{background-color:#45a049}.form-group[required=required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:not(.required){border:1px solid black}.form-group[required=required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid red}.form-group[required=required][_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:after{content:\\\" *\\\";color:red}.form-group[required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid red}.form-group[required][_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:after{content:\\\" *\\\";color:red}\"]\n  });\n  return CreateWorksite;\n})();","map":null,"metadata":{},"sourceType":"module"}