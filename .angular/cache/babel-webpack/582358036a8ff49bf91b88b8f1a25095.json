{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { UUID } from 'angular2-uuid';\nimport { NgbdModalFocus } from '../modal/modal-focus';\nimport { Category } from '../models/category';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i2 from \"../services/storage.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@ionic/angular\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@ngx-translate/core\";\n\nfunction CategoryForm_ion_select_option_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-select-option\", 16);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const c_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", c_r1.categoryId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", c_r1.categoryName, \" \");\n  }\n}\n\nexport let CategoryForm = /*#__PURE__*/(() => {\n  class CategoryForm {\n    constructor(modalS, storageService, router, route) {\n      this.modalS = modalS;\n      this.storageService = storageService;\n      this.router = router;\n      this.route = route;\n      this.images = ''; // indexFind: number;\n\n      this.catList = [];\n      this.formCat = new FormGroup({\n        categoryName: new FormControl('', Validators.required),\n        description: new FormControl(''),\n        categoryPar: new FormControl('')\n      });\n      this.modal = new NgbdModalFocus(this.modalS);\n    }\n\n    ngOnDestroy() {\n      console.log('Cleared');\n    }\n\n    ngOnInit() {\n      var _a;\n\n      return __awaiter(this, void 0, void 0, function* () {\n        this.catList = yield this.storageService.get('Categories');\n        if (this.catList == null) this.catList = new Array();\n        this.modif = this.route.snapshot.paramMap.get('modif');\n        this.modifCat = this.catList.find(a => a.categoryId === this.route.snapshot.paramMap.get('modifCat')); // this.chantierId = this.route.snapshot.paramMap.get('chantierId');\n\n        this.ActualCat = this.route.snapshot.paramMap.get('actualCat');\n\n        if (this.modif === 'YES' && this.modifCat !== null) {\n          console.log('modification', this.modif); // if(this.indexFind>=0)\n          // {\n\n          let catParentId;\n          if (this.modifCat.categoryParent != null) catParentId = this.modifCat.categoryParent.categoryId;else catParentId = '';\n          this.catId = this.modifCat.categoryId;\n          this.formCat.setValue({\n            categoryName: this.modifCat.categoryName,\n            description: this.modifCat.description,\n            categoryPar: catParentId\n          });\n          if (this.modifCat.categoryImage != null) this.images = (_a = this.modifCat) === null || _a === void 0 ? void 0 : _a.categoryImage; // }\n        } else {\n          this.modif = 'NO';\n          console.log('creation', this.modif);\n          this.catId = this.generateUUID();\n          if (this.ActualCat != null) this.formCat.get('categoryPar').setValue(this.ActualCat);\n        }\n      });\n    }\n\n    CreateWorksite() {\n      return __awaiter(this, void 0, void 0, function* () {});\n    }\n\n    get f() {\n      return this.formCat.controls;\n    }\n\n    onFileChange(event) {\n      if (event.target.files && event.target.files[0]) {\n        const filesAmount = event.target.files.length;\n\n        for (let i = 0; i < filesAmount; i++) {\n          const reader = new FileReader();\n\n          reader.onload = event => {\n            console.log(event.target.result);\n            this.images = event.target.result;\n            this.formCat.patchValue({\n              fileSource: this.images\n            });\n          };\n\n          reader.readAsDataURL(event.target.files[i]);\n        }\n      }\n    }\n\n    onSubmit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let parent = true;\n        const invalid = [];\n        const controls = this.formCat.controls;\n\n        for (const name in controls) {\n          if (controls[name].invalid) {\n            let nom = '';\n            if (name === 'productName') nom = 'Nom catégorie';\n\n            if (name === 'categoryPar') {\n              console.log('Pas de categorie parent');\n              parent = false;\n            }\n\n            invalid.push(nom);\n          }\n        }\n\n        if (!this.formCat.valid) {\n          let res = null;\n          yield this.modal.open('field', invalid.toString()).then(result => result.result.then(data => {\n            res = 'OK';\n          }, reason => {\n            res = 'DISMISS';\n          }));\n          return;\n        }\n\n        if (parent === false) {\n          this.parentCat = null;\n        } else {\n          this.parentCat = this.catList.find(a => a.categoryId === this.formCat.get('categoryPar').value);\n        }\n\n        if (this.modif === 'YES') {\n          // RETRAIT DE LA CATEGORIE PARENT si il y'en a\n          if (this.modifCat.categoryParent) {\n            const subCats = this.modifCat.categoryParent.subCategories;\n            subCats.splice(subCats.findIndex(a => a.categoryId === this.modifCat.categoryId), 1);\n            this.catList[this.catList.findIndex(a => a.categoryId === this.modifCat.categoryParent.categoryId)].subCategories = subCats;\n          }\n\n          this.cat = new Category(this.catId, this.formCat.get('categoryName').value, this.formCat.get('description').value, this.parentCat, this.catList.find(a => a.categoryId === this.modifCat.categoryId).subCategories, this.images);\n        } else {\n          this.cat = new Category(this.catId, this.formCat.get('categoryName').value, this.formCat.get('description').value, this.parentCat, null, this.images);\n        }\n\n        if (parent === true) {\n          // AJOUT DE LA CATEGORIE PARENT\n          if (this.parentCat != null) {\n            if (this.parentCat.subCategories == null) this.parentCat.subCategories = new Array();\n            this.parentCat.subCategories.push(this.cat);\n            this.catList[this.catList.findIndex(a => a.categoryId === this.parentCat.categoryId)] = this.parentCat;\n          }\n        }\n\n        if (this.modif === 'YES') {\n          const indexFind = this.catList.findIndex(x => x.categoryId === this.cat.categoryId); // this.catList.splice(indexFind,1);\n\n          this.catList[indexFind] = this.cat;\n          this.catList.forEach(element => {\n            if (element.categoryParent != null) {\n              if (element.categoryParent.categoryId === this.cat.categoryId) {\n                element.categoryParent = this.cat;\n              }\n            }\n\n            if (element.subCategories != null) {\n              element.subCategories.forEach(element => {\n                if (element.categoryId === this.cat.categoryId) {\n                  element = this.cat;\n                }\n              });\n            }\n          });\n        } else this.catList.push(this.cat);\n\n        this.storageService.set('Categories', this.catList);\n        console.log('cat saved', this.catList);\n        this.router.navigate(['/articles', {\n          actualCat: this.ActualCat\n        }], {\n          replaceUrl: true\n        });\n      });\n    }\n\n    generateUUID() {\n      this.uuidValue = UUID.UUID();\n      return this.uuidValue;\n    }\n\n    resetImages() {\n      this.images = '';\n      return null;\n    }\n\n    GoBack() {\n      this.router.navigate(['articles', {\n        actualCat: this.ActualCat\n      }], {\n        replaceUrl: true\n      });\n    }\n\n    changePar(e) {\n      this.formCat.get('categoryPar').setValue(e.target.value, {\n        onlySelf: true\n      });\n    }\n\n  }\n\n  CategoryForm.ɵfac = function CategoryForm_Factory(t) {\n    return new (t || CategoryForm)(i0.ɵɵdirectiveInject(i1.NgbModal), i0.ɵɵdirectiveInject(i2.StorageService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n  };\n\n  CategoryForm.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CategoryForm,\n    selectors: [[\"app-category-form\"]],\n    hostBindings: function CategoryForm_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"unloaded\", function CategoryForm_unloaded_HostBindingHandler() {\n          return ctx.ngOnDestroy();\n        });\n      }\n    },\n    decls: 37,\n    vars: 21,\n    consts: [[3, \"click\"], [\"name\", \"arrow-back\"], [1, \"container\", 2, \"overflow-y\", \"auto\"], [3, \"formGroup\", \"ngSubmit\"], [\"required\", \"required\", 1, \"form-group\"], [\"position\", \"floating\"], [\"type\", \"text\", \"id\", \"categoryName\", \"name\", \"categoryName\", \"formControlName\", \"categoryName\", \"placeholder\", \"...\", \"required\", \"required\"], [\"interface\", \"alert\", \"okText\", \"Ok\", \"cancelText\", \"Annuler\", \"formControlName\", \"categoryPar\", 3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"imgCat\"], [\"id\", \"imgCat\", \"type\", \"file\", \"multiple\", \"\", 1, \"form-control\", 3, \"change\"], [\"height\", \"150\", \"width\", \"200px\", 1, \"original\", 2, \"margin\", \"3px\", 3, \"src\"], [\"type\", \"submit\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"far\", \"fa-trash-alt\"], [\"id\", \"description\", \"name\", \"description\", \"formControlName\", \"description\", \"placeholder\", \"...\", 2, \"height\", \"100px\"], [\"type\", \"submit\", 3, \"value\"], [3, \"value\"]],\n    template: function CategoryForm_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-button\", 0);\n        i0.ɵɵlistener(\"click\", function CategoryForm_Template_ion_button_click_2_listener() {\n          return ctx.GoBack();\n        });\n        i0.ɵɵelement(3, \"ion-icon\", 1);\n        i0.ɵɵelementStart(4, \"ion-label\");\n        i0.ɵɵtext(5);\n        i0.ɵɵpipe(6, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 2);\n        i0.ɵɵelementStart(8, \"form\", 3);\n        i0.ɵɵlistener(\"ngSubmit\", function CategoryForm_Template_form_ngSubmit_8_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(9, \"ion-item\", 4);\n        i0.ɵɵelementStart(10, \"ion-label\", 5);\n        i0.ɵɵtext(11);\n        i0.ɵɵpipe(12, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"ion-input\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"ion-item\");\n        i0.ɵɵelementStart(15, \"ion-label\");\n        i0.ɵɵtext(16);\n        i0.ɵɵpipe(17, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"ion-select\", 7);\n        i0.ɵɵlistener(\"change\", function CategoryForm_Template_ion_select_change_18_listener($event) {\n          return ctx.changePar($event);\n        });\n        i0.ɵɵelement(19, \"ion-select-option\");\n        i0.ɵɵtemplate(20, CategoryForm_ion_select_option_20_Template, 2, 2, \"ion-select-option\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(21, \"hr\");\n        i0.ɵɵelementStart(22, \"label\", 9);\n        i0.ɵɵtext(23);\n        i0.ɵɵpipe(24, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"input\", 10);\n        i0.ɵɵlistener(\"change\", function CategoryForm_Template_input_change_25_listener($event) {\n          return ctx.onFileChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(26, \"img\", 11);\n        i0.ɵɵelementStart(27, \"button\", 12);\n        i0.ɵɵlistener(\"click\", function CategoryForm_Template_button_click_27_listener() {\n          return ctx.resetImages();\n        });\n        i0.ɵɵelement(28, \"i\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(29, \"hr\");\n        i0.ɵɵelementStart(30, \"ion-item\");\n        i0.ɵɵelementStart(31, \"ion-label\", 5);\n        i0.ɵɵtext(32);\n        i0.ɵɵpipe(33, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(34, \"ion-textarea\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(35, \"input\", 15);\n        i0.ɵɵpipe(36, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(6, 9, \"back\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.formCat);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(12, 11, \"nameCategory\"));\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(17, 13, \"subCategory\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngForOf\", ctx.catList);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(24, 15, \"picCategory\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"src\", ctx.images, i0.ɵɵsanitizeUrl);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(33, 17, \"description\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵpropertyInterpolate(\"value\", i0.ɵɵpipeBind1(36, 19, \"createCategory\"));\n      }\n    },\n    directives: [i4.IonHeader, i4.IonToolbar, i4.IonButton, i4.IonIcon, i4.IonLabel, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i4.IonItem, i4.IonInput, i4.TextValueAccessor, i5.NgControlStatus, i5.FormControlName, i5.RequiredValidator, i4.IonSelect, i4.SelectValueAccessor, i4.IonSelectOption, i6.NgForOf, i4.IonTextarea],\n    pipes: [i7.TranslatePipe],\n    styles: [\".form-group[required=required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]:not(.required){border:1px solid black}.form-group[required=required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid red}.form-group[required=required][_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:after{content:\\\" *\\\";color:red}.form-group[required][_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{border:1px solid red}.form-group[required][_ngcontent-%COMP%]   label[_ngcontent-%COMP%]:after{content:\\\" *\\\";color:red}ion-select[_ngcontent-%COMP%]{width:100%;justify-content:center}ion-select[_ngcontent-%COMP%]::part(placeholder), ion-select[_ngcontent-%COMP%]::part(text){flex:0 0 auto}ion-select[_ngcontent-%COMP%]::part(placeholder){color:#20a08a;opacity:1}ion-select[_ngcontent-%COMP%]::part(placeholder):first-letter{font-size:24px;font-weight:500}ion-select[_ngcontent-%COMP%]::part(text){color:#545ca7}ion-select[_ngcontent-%COMP%]::part(icon){color:#971e49;opacity:1}\"]\n  });\n  return CategoryForm;\n})();","map":null,"metadata":{},"sourceType":"module"}