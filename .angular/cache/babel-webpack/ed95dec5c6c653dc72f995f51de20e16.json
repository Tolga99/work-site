{"ast":null,"code":"import { tokenRegex, revFormat, formats } from \"./formatting\";\nimport { defaults } from \"../types/options\";\nimport { english } from \"../l10n/default\";\nexport const createDateFormatter = ({\n  config = defaults,\n  l10n = english,\n  isMobile = false\n}) => (dateObj, frmt, overrideLocale) => {\n  const locale = overrideLocale || l10n;\n\n  if (config.formatDate !== undefined && !isMobile) {\n    return config.formatDate(dateObj, frmt, locale);\n  }\n\n  return frmt.split(\"\").map((c, i, arr) => formats[c] && arr[i - 1] !== \"\\\\\" ? formats[c](dateObj, locale, config) : c !== \"\\\\\" ? c : \"\").join(\"\");\n};\nexport const createDateParser = ({\n  config = defaults,\n  l10n = english\n}) => (date, givenFormat, timeless, customLocale) => {\n  if (date !== 0 && !date) return undefined;\n  const locale = customLocale || l10n;\n  let parsedDate;\n  const dateOrig = date;\n  if (date instanceof Date) parsedDate = new Date(date.getTime());else if (typeof date !== \"string\" && date.toFixed !== undefined) parsedDate = new Date(date);else if (typeof date === \"string\") {\n    const format = givenFormat || (config || defaults).dateFormat;\n    const datestr = String(date).trim();\n\n    if (datestr === \"today\") {\n      parsedDate = new Date();\n      timeless = true;\n    } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) parsedDate = new Date(date);else if (config && config.parseDate) parsedDate = config.parseDate(date, format);else {\n      parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));\n      let matched,\n          ops = [];\n\n      for (let i = 0, matchIndex = 0, regexStr = \"\"; i < format.length; i++) {\n        const token = format[i];\n        const isBackSlash = token === \"\\\\\";\n        const escaped = format[i - 1] === \"\\\\\" || isBackSlash;\n\n        if (tokenRegex[token] && !escaped) {\n          regexStr += tokenRegex[token];\n          const match = new RegExp(regexStr).exec(date);\n\n          if (match && (matched = true)) {\n            ops[token !== \"Y\" ? \"push\" : \"unshift\"]({\n              fn: revFormat[token],\n              val: match[++matchIndex]\n            });\n          }\n        } else if (!isBackSlash) regexStr += \".\";\n\n        ops.forEach(({\n          fn,\n          val\n        }) => parsedDate = fn(parsedDate, val, locale) || parsedDate);\n      }\n\n      parsedDate = matched ? parsedDate : undefined;\n    }\n  }\n\n  if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {\n    config.errorHandler(new Error(`Invalid date provided: ${dateOrig}`));\n    return undefined;\n  }\n\n  if (timeless === true) parsedDate.setHours(0, 0, 0, 0);\n  return parsedDate;\n};\nexport function compareDates(date1, date2, timeless = true) {\n  if (timeless !== false) {\n    return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);\n  }\n\n  return date1.getTime() - date2.getTime();\n}\nexport function compareTimes(date1, date2) {\n  return 3600 * (date1.getHours() - date2.getHours()) + 60 * (date1.getMinutes() - date2.getMinutes()) + date1.getSeconds() - date2.getSeconds();\n}\nexport const isBetween = (ts, ts1, ts2) => {\n  return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);\n};\nexport const duration = {\n  DAY: 86400000\n};\nexport function getDefaultHours(config) {\n  let hours = config.defaultHour;\n  let minutes = config.defaultMinute;\n  let seconds = config.defaultSeconds;\n\n  if (config.minDate !== undefined) {\n    const minHour = config.minDate.getHours();\n    const minMinutes = config.minDate.getMinutes();\n    const minSeconds = config.minDate.getSeconds();\n\n    if (hours < minHour) {\n      hours = minHour;\n    }\n\n    if (hours === minHour && minutes < minMinutes) {\n      minutes = minMinutes;\n    }\n\n    if (hours === minHour && minutes === minMinutes && seconds < minSeconds) seconds = config.minDate.getSeconds();\n  }\n\n  if (config.maxDate !== undefined) {\n    const maxHr = config.maxDate.getHours();\n    const maxMinutes = config.maxDate.getMinutes();\n    hours = Math.min(hours, maxHr);\n    if (hours === maxHr) minutes = Math.min(maxMinutes, minutes);\n    if (hours === maxHr && minutes === maxMinutes) seconds = config.maxDate.getSeconds();\n  }\n\n  return {\n    hours,\n    minutes,\n    seconds\n  };\n}","map":null,"metadata":{},"sourceType":"module"}