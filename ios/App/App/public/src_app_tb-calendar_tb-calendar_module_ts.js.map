{"version":3,"file":"src_app_tb-calendar_tb-calendar_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAA8J;AAC3G;AACjB;;AAElC;AACA;AACA,cAAc,YAAY;AAC1B;AACwC;AACxiEAAiE;AACjE,wCAAwC,gEAAyB,GAAG,2DAA2D;AAC/H,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,qDAAU;AACxB,KAAK,iBAAiB,YAAY,UAAU;;AAE5C;AACA;AACA,cAAc,YAAY;AAC1B;AACA,iBAAiB,GAAG;AACpB,aAAa,6DAAiB;AAC9B,iBAAiB,yDAAU;AAC3B;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uDAAY;AAC9C;AACA;AACA;AACA,mCAAmC,uDAAY;AAC/C;AACA;AACA;AACA,wCAAwC,uDAAY;AACpD;AACA;AACA;AACA,iCAAiC,uDAAY;AAC7C;AACA;AACA;AACA,kCAAkC,uDAAY;AAC9C;AACA;AACA;AACA,wCAAwC,uDAAY;AACpD;AACA;AACA;AACA,uCAAuC,uDAAY;AACnD;AACA;AACA;AACA,sCAAsC,uDAAY;AAClD;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,qCAAqC;AACjF,aAAa;AACb;AACA,0CAA0C,qCAAqC;AAC/E,aAAa;AACb;AACA,2CAA2C,qCAAqC;AAChF,aAAa;AACb;AACA,iDAAiD,qCAAqC;AACtF,aAAa;AACb;AACA,gDAAgD,qCAAqC;AACrF,aAAa;AACb;AACA,2CAA2C,qCAAqC;AAChF,aAAa;AACb;AACA,iDAAiD,qCAAqC;AACtF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,+CAA+C,GAAG;AAClD;AACA;AACA,+CAA+C,GAAG;AAClD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,GAAG,IAAI,qDAAS;AACnD;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,6CAA6C,GAAG,2BAA2B,GAAG;AAC9E,aAAa;AACb;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,uBAAuB,GAAG;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,yBAAyB,GAAG;AAC5B;AACA;AACA;AACA,qCAAqC,GAAG;AACxC,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,UAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,qCAAqC,+DAAwB,CAAC,qDAAiB,GAAG,+DAAwB,qBAAqB,+DAAwB,CAAC,oDAAgB;AAC3O,wCAAwC,+DAAwB,GAAG,mIAAmI;AACtM,QAAQ,wDAAiB,iEAAiE,2BAA2B,oEAAoE,4BAA4B;AACrN,OAAO,YAAY,ggCAAggC,aAAa,0TAA0T,yCAAyC,gEAAyB,sCAAsC,kEAA2B,GAAG;AACh+C;AACA;AACA,MAAM,MAAM,qDAAU,EAAE;AACxB,MAAM,yBAAyB;AAC/B,MAAM,MAAM,oDAAS;AACrB;AACA;AACA,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,iBAAiB,MAAM,gDAAK,EAAE;AAC9B,sBAAsB,MAAM,gDAAK,EAAE;AACnC,mBAAmB,MAAM,gDAAK,EAAE;AAChC,iBAAiB,MAAM,gDAAK,EAAE;AAC9B,uBAAuB,MAAM,gDAAK,EAAE;AACpC,mBAAmB,MAAM,gDAAK,EAAE;AAChC,mBAAmB,MAAM,gDAAK,EAAE;AAChC,oBAAoB,MAAM,gDAAK,EAAE;AACjC,sBAAsB,MAAM,gDAAK,EAAE;AACnC,uBAAuB,MAAM,gDAAK,EAAE;AACpC,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,sBAAsB,MAAM,gDAAK,EAAE;AACnC,eAAe,MAAM,gDAAK,EAAE;AAC5B,mBAAmB,MAAM,gDAAK,EAAE;AAChC,sBAAsB,MAAM,gDAAK,EAAE;AACnC,mBAAmB,MAAM,gDAAK,EAAE;AAChC,sBAAsB,MAAM,gDAAK,EAAE;AACnC,eAAe,MAAM,gDAAK,EAAE;AAC5B,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,wBAAwB,MAAM,gDAAK,EAAE;AACrC,aAAa,MAAM,gDAAK,EAAE;AAC1B,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,mBAAmB,MAAM,gDAAK,EAAE;AAChC,YAAY,MAAM,gDAAK,EAAE;AACzB,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,kBAAkB,MAAM,gDAAK,EAAE;AAC/B,8BAA8B,MAAM,gDAAK,EAAE;AAC3C,mBAAmB,MAAM,gDAAK,EAAE;AAChC,eAAe,MAAM,gDAAK,EAAE;AAC5B,iBAAiB,MAAM,gDAAK,EAAE;AAC9B,oBAAoB,MAAM,gDAAK,EAAE;AACjC,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,aAAa,MAAM,gDAAK,EAAE;AAC1B,gBAAgB,MAAM,gDAAK,EAAE;AAC7B,eAAe,MAAM,gDAAK,EAAE;AAC5B,0BAA0B,MAAM,gDAAK,EAAE;AACvC,0BAA0B,MAAM,gDAAK,EAAE;AACvC,uBAAuB,MAAM,iDAAM,EAAE;AACrC,wBAAwB,MAAM,iDAAM,EAAE;AACtC,6BAA6B,MAAM,iDAAM,EAAE;AAC3C,sBAAsB,MAAM,iDAAM,EAAE;AACpC,uBAAuB,MAAM,iDAAM,EAAE;AACrC,6BAA6B,MAAM,iDAAM,EAAE;AAC3C,4BAA4B,MAAM,iDAAM,EAAE;AAC1C,2BAA2B,MAAM,iDAAM,EAAE;AACzC,qBAAqB,MAAM,uDAAY,oBAAoB;AAC3D;AACA,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,oDAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb,KAAK,iBAAiB,UAAU,MAAM,qDAAiB,EAAE,IAAI,yBAAyB,IAAI,MAAM,oDAAgB,EAAE,IAAI,IAAI;AAC1H,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT,kBAAkB,iDAAM;AACxB,SAAS;AACT;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,uDAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS;AACT,kBAAkB,gDAAK;AACvB,SAAS,GAAG,IAAI;;AAEhB;AACA;AACA,cAAc,YAAY;AAC1B;AACA,iBAAiB,GAAG,uBAAuB,yDAAc;AACzD;AACA,WAAW,GAAG;AACd,YAAY;AACZ;AACA;AACA,qBAAqB,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI;AACnB,gBAAgB;AAChB;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D,qCAAqC,8DAAuB,GAAG,uBAAuB;AACtF,qCAAqC,8DAAuB,GAAG;AAC/D,eAAe,mDAAmD,+DAAwB;AAC1F,cAAc,mDAAQ;AACtB;AACA;AACA;AACA,aAAa;AACb,KAAK,iBAAiB;AACtB,eAAe,mDAAmD,gEAAyB,oBAAoB,mEAAmE,IAAI;;AAEtL;AACA;AACA,cAAc,YAAY;AAC1B;;AAEA;AACA;AACA,cAAc,YAAY;AAC1B;;AAE0I;;;;;;;;;;;;;;;;;;;;;;;;AChqBrE;AAChC;AACkB;AAC6D;AACO;AAC/D;AACjC;AAC3B;AACA;AACA;AACA,8CAA8C,EAAE,oDAAc;AAC9D,cAAc,qDAAO;AACrB;AACA,qBAAqB,8DAAgB,GAAG,sCAAsC;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qDAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAY;AAC5B;AACA;AACA,6BAA6B,6DAAe;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,2CAAG;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAY;AAC5B;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,2CAAG;AACpC,yCAAyC,2CAAG;AAC5C;AACA,mCAAmC,2CAAG;AACtC;AACA,mDAAmD,2CAAG;AACtD;AACA,uCAAuC,2CAAG;AAC1C;AACA;AACA,4BAA4B,0DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,IAAI;AACxF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,gCAAgC,gDAAQ;AACxC,gCAAgC,gDAAQ;AACxC;AACA;AACA;AACA,gCAAgC,0DAAc;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,eAAe;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0DAAc;AACjD;AACA,2DAA2D,eAAe;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAc;AAC1C;AACA;AACA;AACA;AACA,4BAA4B,0DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yDAAa;AAC9C;AACA;AACA;AACA,kCAAkC,yDAAa;AAC/C;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA,8BAA8B,yDAAa;AAC3C;AACA;AACA,qCAAqC,yDAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAW;AACnB,QAAQ,uDAAW;AACnB,QAAQ,uDAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yDAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,yDAAa;AAC/E;AACA;AACA;AACA;AACA,YAAY,0DAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uDAAW;AAC/B,wBAAwB,0DAAY;AACpC,oBAAoB,uDAAW;AAC/B,wBAAwB,0DAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,eAAe;AAChD;AACA;AACA;AACA,qCAAqC,eAAe;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,eAAe;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oEAAoE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4BAA4B;AAC3C;AACA;AACA,4BAA4B,0BAA0B;AACtD;AACA;AACA,2CAA2C;AAC3C,kEAAkE;AAClE;AACA;AACA,6BAA6B,yDAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAS;AACjB;AACA,YAAY,qDAAS;AACrB;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA,0BAA0B,yDAAa;AACvC;AACA,gCAAgC,6DAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yDAAa;AACvC;AACA;AACA;AACA;AACA,2BAA2B,yDAAa;AACxC;AACA;AACA,2CAA2C,yDAAa;AACxD;AACA;AACA,+BAA+B,0DAAc;AAC7C;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,0BAA0B,6DAAiB,eAAe,gBAAgB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yDAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAS;AACjB;AACA;AACA;AACA;AACA;AACA,6CAA6C,IAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yDAAa;AACrC;AACA;AACA,4BAA4B,yDAAa;AACzC;AACA,4BAA4B,yDAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uDAAW;AAC/B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,oBAAoB,uDAAW;AAC/B;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,6DAAe;AACxC,6BAA6B,yDAAa;AAC1C;AACA,0BAA0B,yDAAa;AACvC,0BAA0B,6DAAiB;AAC3C;AACA,SAAS;AACT;AACA,4BAA4B,6DAAiB;AAC7C;AACA,SAAS;AACT;AACA;AACA,iCAAiC,2CAAG;AACpC;AACA;AACA;AACA;AACA,mCAAmC,2CAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6DAAiB;AACjD;AACA,uCAAuC,2CAAG;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,yDAAa;AACxD;AACA;AACA;AACA,wBAAwB,yDAAa,2CAA2C,2CAAG;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,yDAAa;AACjD;AACA,YAAY,qDAAS;AACrB,6CAA6C,IAAI;AACjD,8BAA8B,yDAAa;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,IAAI;AACjD;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yDAAa;AACzC,gCAAgC,yDAAa;AAC7C,4BAA4B,yDAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,0BAA0B,EAAE,6DAAe;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,IAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0DAAc;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAY;AACxB;AACA;AACA,gBAAgB,0DAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAcqCAAqC,kBAAkB,KAAK,sDAAY;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA,uDAAuD,OAAO;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,0DAAc;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,KAAK;AAClD,mDAAmD,+BAA+B;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,iDAAiD;AAC1G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,4EAA4E,+DAAyB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,8DAAwB;AAClG;AACA;AACA;AACA,gDAAgD,sCAAsC;AACtF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA,QAAQ,wDAAY;AACpB,gCAAgC,gDAAQ;AACxC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gCAAgC;AACxD;AACA;AACA,oBAAoB,yDAAa;AACjC,uCAAuC,gDAAQ;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,mBAAmB;AAC/F,kDAAkD;AAClD;AACA;AACA;AACA;AACA,QAAQ,2DAAY,OAAO,kBAAkB,GAAG,kBAAkB,GAAG,gCAAgC,GAAG,gCAAgC;AACxI,yDAAyD,kEAAkE;AAC3H;AACA;AACA;AACA;AACA,0BAA0B,iEAAmB;AAC7C,yBAAyB,8DAAgB,GAAG,sCAAsC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAW;AACnB,QAAQ,uDAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAW;AACnB,QAAQ,uDAAW;AACnB,QAAQ,uDAAW;AACnB;AACA;AACA;AACA;AACA,QAAQ,uDAAW;AACnB;AACA;AACA,8CAA8C,IAAI;AAClD;AACA,mDAAmD,KAAK;AACxD;AACA;AACA;AACA;AACA,oDAAoD,MAAM;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,OAAO,iBAAiB,GAAG,YAAY;AACzE,YAAY,uDAAW;AACvB,YAAY,uDAAW;AACvB,8BAA8B,aAAa,GAAG,YAAY,EAAE,YAAY;AACxE,mDAAmD,WAAW;AAC9D;AACA;AACA;AACA;AACA;AACA,wBAAwB,iCAAiC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,sDAAU,CAAC,0DAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,yDAAa;AAClC,sCAAsC,gDAAQ;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,0BAA0B;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yDAAa;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yDAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0DAAc;AACvC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,8BAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+BAA+B;AACvD,gBAAgB,0DAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0DAAY;AAC5B,YAAY,0DAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6DAAU;AAC9B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,0DAAc;AAC5E;AACA;AACA,+BAA+B,2CAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2CAAG;AAC3B,yBAAyB,2CAAG,gBAAgB,2CAAG;AAC/C;AACA;AACA;AACA;AACA;AACA,kEAAkE,2CAAG;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2CAAG;AACtC;AACA,0BAA0B,2CAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,kBAAkB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE,qDAAO;AACjC,6BAA6B,EAAE,qDAAO;AACtC;AACA;AACA,4DAA4D;AAC5D;AACA;AACA,4DAA4D;AAC5D;AACA,sBAAsB,8DAAgB,GAAG;AACzC,uBAAuB,iEAAmB,GAAG;AAC7C,yBAAyB,sDAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,SAAS,EAAC;;;;;;;;;;;;;;;;ACv7DlB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;ACvEhB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AChF+D;AACnB;AACF;AACnC,+BAA+B,SAAS,oDAAQ,SAAS,kDAAO,qBAAqB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gDAAO;AACnC,UAAU,gDAAO;AACjB;AACA;AACA;AACA;AACA;AACO,4BAA4B,SAAS,oDAAQ,SAAS,kDAAO,EAAE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,oDAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,mBAAmB;AAC9E;AACA;AACA;AACA,oBAAoB,mDAAU;AAC9B,gCAAgC,mDAAU;AAC1C;AACA;AACA;AACA,gCAAgC,kDAAS;AACzC;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,+BAA+B,SAAS;AACxC;AACA;AACA;AACA;AACA;AACA,gEAAgE,SAAS;AACzE;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;;;;;;;;;;;;;;;;;;;ACzHO;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrDoC;AACpC;AACO;AACA;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,iBAAiB,2CAAG;AACpB,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,EAAE;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,EAAE;AACf;AACO;AACP;AACA;AACA;AACA,KA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","sources":["./node_modules/angularx-flatpickr/__ivy_ngcc__/fesm2015/angularx-flatpickr.js","./node_modules/flatpickr/dist/esm/index.js","./node_modules/flatpickr/dist/esm/l10n/default.js","./node_modules/flatpickr/dist/esm/types/options.js","./node_modules/flatpickr/dist/esm/utils/dates.js","./node_modules/flatpickr/dist/esm/utils/dom.js","./node_modules/flatpickr/dist/esm/utils/formatting.js","./node_modules/flatpickr/dist/esm/utils/index.js","./node_modules/flatpickr/dist/esm/utils/polyfills.js","./src/app/explore-container/explore-container.component.ts","./src/app/explore-container/explore-container.module.ts","./src/app/tb-calendar/tb-calendar-routing.module.ts","./src/app/tb-calendar/tb-calendar.module.ts","./src/app/tb-calendar/tb-calendar.ts","./src/app/utils/calendar-header.component..ts","./src/app/utils/colors.ts","./src/app/utils/module.ts","./src/app/explore-container/explore-container.component.html","./src/app/tb-calendar/tb-calendar.html","./node_modules/@angular/common/locales/fr.mjs","./node_modules/@angular/common/locales/tr.mjs"],"sourcesContent":["import { Injectable, Directive, ElementRef, Input, Output, EventEmitter, forwardRef, HostListener, Renderer2, NgModule, InjectionToken } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport flatpickr from 'flatpickr';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport * as ɵngcc0 from '@angular/core';\nclass FlatpickrDefaults {\n    constructor() {\n        /**\n         * Exactly the same as date format, but for the altInput field.\n         */\n        this.altFormat = 'F j, Y';\n        /**\n         * \tShow the user a readable date (as per altFormat), but return something totally different to the server.\n         */\n        this.altInput = false;\n        /**\n         * This class will be added to the input element created by the altInput option.\n         * Note that `altInput` already inherits classes from the original input.\n         */\n        this.altInputClass = '';\n        /**\n         * Allows the user to enter a date directly input the input field. By default, direct entry is disabled.\n         */\n        this.allowInput = false;\n        /**\n         * Instead of `body`, appends the calendar to the specified node instead.\n         */\n        this.appendTo = undefined;\n        /**\n         * Defines how the date will be formatted in the aria-label for calendar days, using the same tokens as dateFormat. If you change this, you should choose a value that will make sense if a screen reader reads it out loud.\n         */\n        this.ariaDateFormat = 'F j, Y';\n        /**\n         * Whether clicking on the input should open the picker.\n         * You could disable this if you wish to open the calendar manually `with.open()`.\n         */\n        this.clickOpens = true;\n        /**\n         * A string of characters which are used to define how the date will be displayed in the input box.\n         * The supported characters are defined in the table below.\n         */\n        this.dateFormat = 'Y-m-d';\n        /**\n         * Initial value of the hour element.\n         */\n        this.defaultHour = 12;\n        /**\n         * Initial value of the minute element.\n         */\n        this.defaultMinute = 0;\n        /**\n         * Initial value of the seconds element.\n         */\n        this.defaultSeconds = 0;\n        /**\n         * See <a href=\"https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\">disabling dates</a>.\n         */\n        this.disable = [];\n        /**\n         * Set disableMobile to true to always use the non-native picker.\n         * By default, Flatpickr utilizes native datetime widgets unless certain options (e.g. disable) are used.\n         */\n        this.disableMobile = false;\n        /**\n         * Enables time picker.\n         */\n        this.enableTime = false;\n        /**\n         * Enables seconds in the time picker.\n         */\n        this.enableSeconds = false;\n        /**\n         * Allows using a custom date formatting function instead of the built-in handling for date formats using dateFormat, altFormat, etc.\n         */\n        this.formatDate = undefined;\n        /**\n         * Adjusts the step for the hour input (incl. scrolling).\n         */\n        this.hourIncrement = 1;\n        /**\n         * Displays the calendar inline.\n         */\n        this.inline = false;\n        /**\n         * The maximum date that a user can pick to (inclusive).\n         */\n        this.maxDate = undefined;\n        /**\n         * The minimum date that a user can start picking from (inclusive).\n         */\n        this.minDate = undefined;\n        /**\n         * Adjusts the step for the minute input (incl. scrolling).\n         */\n        this.minuteIncrement = 5;\n        /**\n         * Select a single date, multiple dates or a date range.\n         */\n        this.mode = 'single';\n        /**\n         * HTML for the arrow icon, used to switch months.\n         */\n        this.nextArrow = '>';\n        /**\n         * Hides the day selection in calendar. Use it along with `enableTime` to create a time picker.\n         */\n        this.noCalendar = false;\n        /**\n         * Default now to the current date\n         */\n        this.now = new Date();\n        /**\n         * HTML for the left arrow icon.\n         */\n        this.prevArrow = '<';\n        /**\n         * Show the month using the shorthand version (ie, Sep instead of September).\n         */\n        this.shorthandCurrentMonth = false;\n        /**\n         * Position the calendar inside the wrapper and next to the input element. (Leave `false` unless you know what you're doing).\n         */\n        this.static = false;\n        /**\n         * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n         */\n        this.time24hr = false;\n        /**\n         * When true, dates will parsed, formatted, and displayed in UTC.\n         * It's recommended that date strings contain the timezone, but not necessary.\n         */\n        this.utc = false;\n        /**\n         * Enables display of week numbers in calendar.\n         */\n        this.weekNumbers = false;\n        /**\n         * Custom elements and input groups.\n         */\n        this.wrap = false;\n        /**\n         * Array of plugin instances to use.\n         */\n        this.plugins = [];\n        /**\n         * The locale object or string to use for the locale.\n         */\n        this.locale = 'default';\n        /**\n         * Auto convert the ngModel value from a string to a date / array of dates / from - to date object depending on the `mode`\n         */\n        this.convertModelValue = false;\n        /**\n         * The number of months shown.\n         */\n        this.showMonths = 1;\n        /**\n         * How the month should be displayed in the header of the calendar.\n         */\n        this.monthSelectorType = 'static';\n    }\n}\nFlatpickrDefaults.ɵfac = function FlatpickrDefaults_Factory(t) { return new (t || FlatpickrDefaults)(); };\nFlatpickrDefaults.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: FlatpickrDefaults, factory: FlatpickrDefaults.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FlatpickrDefaults, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ FLATPICKR_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => FlatpickrDirective),\n    //tslint:disable-line\n    multi: true\n};\nclass FlatpickrDirective {\n    /**\n     * @param {?} elm\n     * @param {?} defaults\n     * @param {?} renderer\n     */\n    constructor(elm, defaults, renderer) {\n        this.elm = elm;\n        this.defaults = defaults;\n        this.renderer = renderer;\n        /**\n         * Object-options that can be user for multiple instances of Flatpickr.\n         * Option from this object is applied only if specific option is not specified.\n         * Example:\n         * ```typescript\n         * options: FlatpickrDefaultsInterface = {\n         *      altFormat: 'd/m/Y',   // will be ignored since altFormat is provided via specific attribute\n         *      altInput: true        // will be used since specific attribute is not provided\n         * };\n         * ```\n         * ```html\n         * <input\n         *   class=\"form-control\"\n         *   type=\"text\"\n         *   mwlFlatpickr\n         *   [options]=\"options\"\n         *   altFormat=\"d/m/Y\">\n         * ```\n         */\n        this.options = {};\n        /**\n         * Gets triggered once the calendar is in a ready state\n         */\n        this.flatpickrReady = new EventEmitter();\n        /**\n         * Gets triggered when the user selects a date, or changes the time on a selected date.\n         */\n        this.flatpickrChange = new EventEmitter();\n        /**\n         * Gets triggered when the input value is updated with a new date string.\n         */\n        this.flatpickrValueUpdate = new EventEmitter();\n        /**\n         * Gets triggered when the calendar is opened.\n         */\n        this.flatpickrOpen = new EventEmitter();\n        /**\n         * Gets triggered when the calendar is closed.\n         */\n        this.flatpickrClose = new EventEmitter();\n        /**\n         * Gets triggered when the month is changed, either by the user or programmatically.\n         */\n        this.flatpickrMonthChange = new EventEmitter();\n        /**\n         * Gets triggered when the year is changed, either by the user or programmatically.\n         */\n        this.flatpickrYearChange = new EventEmitter();\n        /**\n         * Take full control of every date cell with this output\n         */\n        this.flatpickrDayCreate = new EventEmitter();\n        this.isDisabled = false;\n        this.onChangeFn = () => { };\n        this.onTouchedFn = () => { };\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        const /** @type {?} */ options = {\n            altFormat: this.altFormat,\n            altInput: this.altInput,\n            altInputClass: this.altInputClass,\n            allowInput: this.allowInput,\n            appendTo: this.appendTo,\n            ariaDateFormat: this.ariaDateFormat,\n            clickOpens: this.clickOpens,\n            dateFormat: this.dateFormat,\n            defaultHour: this.defaultHour,\n            defaultMinute: this.defaultMinute,\n            defaultSeconds: this.defaultSeconds,\n            disable: this.disable,\n            disableMobile: this.disableMobile,\n            enable: this.enable,\n            enableTime: this.enableTime,\n            enableSeconds: this.enableSeconds,\n            formatDate: this.formatDate,\n            hourIncrement: this.hourIncrement,\n            defaultDate: this.initialValue,\n            inline: this.inline,\n            maxDate: this.maxDate,\n            minDate: this.minDate,\n            minuteIncrement: this.minuteIncrement,\n            mode: this.mode,\n            nextArrow: this.nextArrow,\n            noCalendar: this.noCalendar,\n            now: this.now,\n            parseDate: this.parseDate,\n            prevArrow: this.prevArrow,\n            shorthandCurrentMonth: this.shorthandCurrentMonth,\n            showMonths: this.showMonths,\n            monthSelectorType: this.monthSelectorType,\n            static: this.static,\n            time24hr: this.time24hr,\n            weekNumbers: this.weekNumbers,\n            getWeek: this.getWeek,\n            wrap: this.wrap,\n            plugins: this.plugins,\n            locale: this.locale,\n            onChange: (selectedDates, dateString, instance) => {\n                this.flatpickrChange.emit({ selectedDates, dateString, instance });\n            },\n            onOpen: (selectedDates, dateString, instance) => {\n                this.flatpickrOpen.emit({ selectedDates, dateString, instance });\n            },\n            onClose: (selectedDates, dateString, instance) => {\n                this.flatpickrClose.emit({ selectedDates, dateString, instance });\n            },\n            onMonthChange: (selectedDates, dateString, instance) => {\n                this.flatpickrMonthChange.emit({ selectedDates, dateString, instance });\n            },\n            onYearChange: (selectedDates, dateString, instance) => {\n                this.flatpickrYearChange.emit({ selectedDates, dateString, instance });\n            },\n            onReady: (selectedDates, dateString, instance) => {\n                this.flatpickrReady.emit({ selectedDates, dateString, instance });\n            },\n            onValueUpdate: (selectedDates, dateString, instance) => {\n                this.flatpickrValueUpdate.emit({ selectedDates, dateString, instance });\n            },\n            onDayCreate: (selectedDates, dateString, instance, dayElement) => {\n                this.flatpickrDayCreate.emit({\n                    selectedDates,\n                    dateString,\n                    instance,\n                    dayElement\n                });\n            }\n        };\n        Object.keys(options).forEach(key => {\n            if (typeof options[key] === 'undefined') {\n                if (typeof this.options[key] !== 'undefined') {\n                    options[key] = (/** @type {?} */ (this.options))[key];\n                }\n                else {\n                    options[key] = (/** @type {?} */ (this.defaults))[key];\n                }\n            }\n        });\n        options.time_24hr = options.time24hr;\n        // workaround bug in flatpickr 4.6 where it doesn't copy the classes across\n        // TODO - remove once fix in https://github.com/flatpickr/flatpickr/issues/1860 is released\n        options.altInputClass =\n            (options.altInputClass || '') + ' ' + this.elm.nativeElement.className;\n        if (!options.enable) {\n            delete options.enable;\n        }\n        this.instance = /** @type {?} */ (flatpickr(this.elm.nativeElement, options));\n        this.setDisabledState(this.isDisabled);\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        if (this.instance) {\n            Object.keys(changes).forEach(inputKey => {\n                this.instance.set(/** @type {?} */ (inputKey), (/** @type {?} */ (this))[inputKey]);\n            });\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        if (this.instance) {\n            this.instance.destroy();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n        let /** @type {?} */ convertedValue = value;\n        if (this.convertModelValue && this.mode === 'range' && value) {\n            convertedValue = [value.from, value.to];\n        }\n        if (this.instance) {\n            this.instance.setDate(convertedValue);\n        }\n        else {\n            // flatpickr hasn't been initialised yet, store the value for later use\n            this.initialValue = convertedValue;\n        }\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onChangeFn = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouchedFn = fn;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.isDisabled = isDisabled;\n        if (this.instance) {\n            if (this.isDisabled) {\n                this.renderer.setProperty(this.instance._input, 'disabled', 'disabled');\n            }\n            else {\n                this.renderer.removeAttribute(this.instance._input, 'disabled');\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    inputChanged() {\n        const /** @type {?} */ value = this.elm.nativeElement.value;\n        if (this.convertModelValue && typeof value === 'string') {\n            switch (this.mode) {\n                case 'multiple':\n                    const /** @type {?} */ dates = value\n                        .split('; ')\n                        .map(str => this.instance.parseDate(str, this.instance.config.dateFormat, !this.instance.config.enableTime));\n                    this.onChangeFn(dates);\n                    break;\n                case 'range':\n                    const [from, to] = value\n                        .split(this.instance.l10n.rangeSeparator)\n                        .map(str => this.instance.parseDate(str, this.instance.config.dateFormat, !this.instance.config.enableTime));\n                    this.onChangeFn({ from, to });\n                    break;\n                case 'single':\n                default:\n                    this.onChangeFn(this.instance.parseDate(value, this.instance.config.dateFormat, !this.instance.config.enableTime));\n            }\n        }\n        else {\n            this.onChangeFn(value);\n        }\n    }\n}\nFlatpickrDirective.ɵfac = function FlatpickrDirective_Factory(t) { return new (t || FlatpickrDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FlatpickrDefaults), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nFlatpickrDirective.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: FlatpickrDirective, selectors: [[\"\", \"mwlFlatpickr\", \"\"]], hostBindings: function FlatpickrDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"blur\", function FlatpickrDirective_blur_HostBindingHandler() { return ctx.onTouchedFn(); })(\"input\", function FlatpickrDirective_input_HostBindingHandler() { return ctx.inputChanged(); });\n    } }, inputs: { options: \"options\", altFormat: \"altFormat\", altInput: \"altInput\", altInputClass: \"altInputClass\", allowInput: \"allowInput\", appendTo: \"appendTo\", ariaDateFormat: \"ariaDateFormat\", clickOpens: \"clickOpens\", dateFormat: \"dateFormat\", defaultHour: \"defaultHour\", defaultMinute: \"defaultMinute\", defaultSeconds: \"defaultSeconds\", disable: \"disable\", disableMobile: \"disableMobile\", enable: \"enable\", enableTime: \"enableTime\", enableSeconds: \"enableSeconds\", formatDate: \"formatDate\", hourIncrement: \"hourIncrement\", inline: \"inline\", maxDate: \"maxDate\", minDate: \"minDate\", minuteIncrement: \"minuteIncrement\", mode: \"mode\", nextArrow: \"nextArrow\", noCalendar: \"noCalendar\", now: \"now\", parseDate: \"parseDate\", prevArrow: \"prevArrow\", shorthandCurrentMonth: \"shorthandCurrentMonth\", showMonths: \"showMonths\", static: \"static\", time24hr: \"time24hr\", weekNumbers: \"weekNumbers\", getWeek: \"getWeek\", wrap: \"wrap\", plugins: \"plugins\", locale: \"locale\", convertModelValue: \"convertModelValue\", monthSelectorType: \"monthSelectorType\" }, outputs: { flatpickrReady: \"flatpickrReady\", flatpickrChange: \"flatpickrChange\", flatpickrValueUpdate: \"flatpickrValueUpdate\", flatpickrOpen: \"flatpickrOpen\", flatpickrClose: \"flatpickrClose\", flatpickrMonthChange: \"flatpickrMonthChange\", flatpickrYearChange: \"flatpickrYearChange\", flatpickrDayCreate: \"flatpickrDayCreate\" }, exportAs: [\"mwlFlatpickr\"], features: [ɵngcc0.ɵɵProvidersFeature([FLATPICKR_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nFlatpickrDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FlatpickrDefaults },\n    { type: Renderer2 }\n];\nFlatpickrDirective.propDecorators = {\n    options: [{ type: Input }],\n    altFormat: [{ type: Input }],\n    altInput: [{ type: Input }],\n    altInputClass: [{ type: Input }],\n    allowInput: [{ type: Input }],\n    appendTo: [{ type: Input }],\n    ariaDateFormat: [{ type: Input }],\n    clickOpens: [{ type: Input }],\n    dateFormat: [{ type: Input }],\n    defaultHour: [{ type: Input }],\n    defaultMinute: [{ type: Input }],\n    defaultSeconds: [{ type: Input }],\n    disable: [{ type: Input }],\n    disableMobile: [{ type: Input }],\n    enable: [{ type: Input }],\n    enableTime: [{ type: Input }],\n    enableSeconds: [{ type: Input }],\n    formatDate: [{ type: Input }],\n    hourIncrement: [{ type: Input }],\n    inline: [{ type: Input }],\n    maxDate: [{ type: Input }],\n    minDate: [{ type: Input }],\n    minuteIncrement: [{ type: Input }],\n    mode: [{ type: Input }],\n    nextArrow: [{ type: Input }],\n    noCalendar: [{ type: Input }],\n    now: [{ type: Input }],\n    parseDate: [{ type: Input }],\n    prevArrow: [{ type: Input }],\n    shorthandCurrentMonth: [{ type: Input }],\n    showMonths: [{ type: Input }],\n    static: [{ type: Input }],\n    time24hr: [{ type: Input }],\n    weekNumbers: [{ type: Input }],\n    getWeek: [{ type: Input }],\n    wrap: [{ type: Input }],\n    plugins: [{ type: Input }],\n    locale: [{ type: Input }],\n    convertModelValue: [{ type: Input }],\n    monthSelectorType: [{ type: Input }],\n    flatpickrReady: [{ type: Output }],\n    flatpickrChange: [{ type: Output }],\n    flatpickrValueUpdate: [{ type: Output }],\n    flatpickrOpen: [{ type: Output }],\n    flatpickrClose: [{ type: Output }],\n    flatpickrMonthChange: [{ type: Output }],\n    flatpickrYearChange: [{ type: Output }],\n    flatpickrDayCreate: [{ type: Output }],\n    inputChanged: [{ type: HostListener, args: ['input',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FlatpickrDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[mwlFlatpickr]',\n                providers: [FLATPICKR_CONTROL_VALUE_ACCESSOR],\n                host: {\n                    // tslint:disable-line use-host-property-decorator\n                    '(blur)': 'onTouchedFn()'\n                },\n                exportAs: 'mwlFlatpickr'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FlatpickrDefaults }, { type: ɵngcc0.Renderer2 }]; }, { options: [{\n            type: Input\n        }], flatpickrReady: [{\n            type: Output\n        }], flatpickrChange: [{\n            type: Output\n        }], flatpickrValueUpdate: [{\n            type: Output\n        }], flatpickrOpen: [{\n            type: Output\n        }], flatpickrClose: [{\n            type: Output\n        }], flatpickrMonthChange: [{\n            type: Output\n        }], flatpickrYearChange: [{\n            type: Output\n        }], flatpickrDayCreate: [{\n            type: Output\n        }], \n    /**\n     * @return {?}\n     */\n    inputChanged: [{\n            type: HostListener,\n            args: ['input']\n        }], altFormat: [{\n            type: Input\n        }], altInput: [{\n            type: Input\n        }], altInputClass: [{\n            type: Input\n        }], allowInput: [{\n            type: Input\n        }], appendTo: [{\n            type: Input\n        }], ariaDateFormat: [{\n            type: Input\n        }], clickOpens: [{\n            type: Input\n        }], dateFormat: [{\n            type: Input\n        }], defaultHour: [{\n            type: Input\n        }], defaultMinute: [{\n            type: Input\n        }], defaultSeconds: [{\n            type: Input\n        }], disable: [{\n            type: Input\n        }], disableMobile: [{\n            type: Input\n        }], enable: [{\n            type: Input\n        }], enableTime: [{\n            type: Input\n        }], enableSeconds: [{\n            type: Input\n        }], formatDate: [{\n            type: Input\n        }], hourIncrement: [{\n            type: Input\n        }], inline: [{\n            type: Input\n        }], maxDate: [{\n            type: Input\n        }], minDate: [{\n            type: Input\n        }], minuteIncrement: [{\n            type: Input\n        }], mode: [{\n            type: Input\n        }], nextArrow: [{\n            type: Input\n        }], noCalendar: [{\n            type: Input\n        }], now: [{\n            type: Input\n        }], parseDate: [{\n            type: Input\n        }], prevArrow: [{\n            type: Input\n        }], shorthandCurrentMonth: [{\n            type: Input\n        }], showMonths: [{\n            type: Input\n        }], static: [{\n            type: Input\n        }], time24hr: [{\n            type: Input\n        }], weekNumbers: [{\n            type: Input\n        }], getWeek: [{\n            type: Input\n        }], wrap: [{\n            type: Input\n        }], plugins: [{\n            type: Input\n        }], locale: [{\n            type: Input\n        }], convertModelValue: [{\n            type: Input\n        }], monthSelectorType: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst /** @type {?} */ USER_DEFAULTS = new InjectionToken('flatpickr defaults');\n/**\n * @param {?} userDefaults\n * @return {?}\n */\nfunction defaultsFactory(userDefaults) {\n    const /** @type {?} */ defaults = new FlatpickrDefaults();\n    Object.assign(defaults, userDefaults);\n    return defaults;\n}\nclass FlatpickrModule {\n    /**\n     * @param {?=} userDefaults\n     * @return {?}\n     */\n    static forRoot(userDefaults = {}) {\n        return {\n            ngModule: FlatpickrModule,\n            providers: [\n                {\n                    provide: USER_DEFAULTS,\n                    useValue: userDefaults\n                },\n                {\n                    provide: FlatpickrDefaults,\n                    useFactory: defaultsFactory,\n                    deps: [USER_DEFAULTS]\n                }\n            ]\n        };\n    }\n}\nFlatpickrModule.ɵfac = function FlatpickrModule_Factory(t) { return new (t || FlatpickrModule)(); };\nFlatpickrModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: FlatpickrModule });\nFlatpickrModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FlatpickrModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [FlatpickrDirective],\n                exports: [FlatpickrDirective]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FlatpickrModule, { declarations: [FlatpickrDirective], exports: [FlatpickrDirective] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\nexport { FlatpickrDefaults, FlatpickrDirective, USER_DEFAULTS, defaultsFactory, FlatpickrModule, FLATPICKR_CONTROL_VALUE_ACCESSOR as ɵa };\n\n","import { defaults as defaultOptions, HOOKS, } from \"./types/options\";\nimport English from \"./l10n/default\";\nimport { arrayify, debounce, int, pad } from \"./utils\";\nimport { clearNode, createElement, createNumberInput, findParent, toggleClass, getEventTarget, } from \"./utils/dom\";\nimport { compareDates, createDateParser, createDateFormatter, duration, isBetween, getDefaultHours, } from \"./utils/dates\";\nimport { tokenRegex, monthToStr } from \"./utils/formatting\";\nimport \"./utils/polyfills\";\nconst DEBOUNCED_CHANGE_MS = 300;\nfunction FlatpickrInstance(element, instanceConfig) {\n    const self = {\n        config: Object.assign(Object.assign({}, defaultOptions), flatpickr.defaultConfig),\n        l10n: English,\n    };\n    self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });\n    self._handlers = [];\n    self.pluginElements = [];\n    self.loadedPlugins = [];\n    self._bind = bind;\n    self._setHoursFromDate = setHoursFromDate;\n    self._positionCalendar = positionCalendar;\n    self.changeMonth = changeMonth;\n    self.changeYear = changeYear;\n    self.clear = clear;\n    self.close = close;\n    self._createElement = createElement;\n    self.destroy = destroy;\n    self.isEnabled = isEnabled;\n    self.jumpToDate = jumpToDate;\n    self.open = open;\n    self.redraw = redraw;\n    self.set = set;\n    self.setDate = setDate;\n    self.toggle = toggle;\n    function setupHelperFunctions() {\n        self.utils = {\n            getDaysInMonth(month = self.currentMonth, yr = self.currentYear) {\n                if (month === 1 && ((yr % 4 === 0 && yr % 100 !== 0) || yr % 400 === 0))\n                    return 29;\n                return self.l10n.daysInMonth[month];\n            },\n        };\n    }\n    function init() {\n        self.element = self.input = element;\n        self.isOpen = false;\n        parseConfig();\n        setupLocale();\n        setupInputs();\n        setupDates();\n        setupHelperFunctions();\n        if (!self.isMobile)\n            build();\n        bindEvents();\n        if (self.selectedDates.length || self.config.noCalendar) {\n            if (self.config.enableTime) {\n                setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : undefined);\n            }\n            updateValue(false);\n        }\n        setCalendarWidth();\n        const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n        if (!self.isMobile && isSafari) {\n            positionCalendar();\n        }\n        triggerEvent(\"onReady\");\n    }\n    function bindToInstance(fn) {\n        return fn.bind(self);\n    }\n    function setCalendarWidth() {\n        const config = self.config;\n        if (config.weekNumbers === false && config.showMonths === 1) {\n            return;\n        }\n        else if (config.noCalendar !== true) {\n            window.requestAnimationFrame(function () {\n                if (self.calendarContainer !== undefined) {\n                    self.calendarContainer.style.visibility = \"hidden\";\n                    self.calendarContainer.style.display = \"block\";\n                }\n                if (self.daysContainer !== undefined) {\n                    const daysWidth = (self.days.offsetWidth + 1) * config.showMonths;\n                    self.daysContainer.style.width = daysWidth + \"px\";\n                    self.calendarContainer.style.width =\n                        daysWidth +\n                            (self.weekWrapper !== undefined\n                                ? self.weekWrapper.offsetWidth\n                                : 0) +\n                            \"px\";\n                    self.calendarContainer.style.removeProperty(\"visibility\");\n                    self.calendarContainer.style.removeProperty(\"display\");\n                }\n            });\n        }\n    }\n    function updateTime(e) {\n        if (self.selectedDates.length === 0) {\n            const defaultDate = self.config.minDate === undefined ||\n                compareDates(new Date(), self.config.minDate) >= 0\n                ? new Date()\n                : new Date(self.config.minDate.getTime());\n            const defaults = getDefaultHours(self.config);\n            defaultDate.setHours(defaults.hours, defaults.minutes, defaults.seconds, defaultDate.getMilliseconds());\n            self.selectedDates = [defaultDate];\n            self.latestSelectedDateObj = defaultDate;\n        }\n        if (e !== undefined && e.type !== \"blur\") {\n            timeWrapper(e);\n        }\n        const prevValue = self._input.value;\n        setHoursFromInputs();\n        updateValue();\n        if (self._input.value !== prevValue) {\n            self._debouncedChange();\n        }\n    }\n    function ampm2military(hour, amPM) {\n        return (hour % 12) + 12 * int(amPM === self.l10n.amPM[1]);\n    }\n    function military2ampm(hour) {\n        switch (hour % 24) {\n            case 0:\n            case 12:\n                return 12;\n            default:\n                return hour % 12;\n        }\n    }\n    function setHoursFromInputs() {\n        if (self.hourElement === undefined || self.minuteElement === undefined)\n            return;\n        let hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== undefined\n            ? (parseInt(self.secondElement.value, 10) || 0) % 60\n            : 0;\n        if (self.amPM !== undefined) {\n            hours = ampm2military(hours, self.amPM.textContent);\n        }\n        const limitMinHours = self.config.minTime !== undefined ||\n            (self.config.minDate &&\n                self.minDateHasTime &&\n                self.latestSelectedDateObj &&\n                compareDates(self.latestSelectedDateObj, self.config.minDate, true) ===\n                    0);\n        const limitMaxHours = self.config.maxTime !== undefined ||\n            (self.config.maxDate &&\n                self.maxDateHasTime &&\n                self.latestSelectedDateObj &&\n                compareDates(self.latestSelectedDateObj, self.config.maxDate, true) ===\n                    0);\n        if (limitMaxHours) {\n            const maxTime = self.config.maxTime !== undefined\n                ? self.config.maxTime\n                : self.config.maxDate;\n            hours = Math.min(hours, maxTime.getHours());\n            if (hours === maxTime.getHours())\n                minutes = Math.min(minutes, maxTime.getMinutes());\n            if (minutes === maxTime.getMinutes())\n                seconds = Math.min(seconds, maxTime.getSeconds());\n        }\n        if (limitMinHours) {\n            const minTime = self.config.minTime !== undefined\n                ? self.config.minTime\n                : self.config.minDate;\n            hours = Math.max(hours, minTime.getHours());\n            if (hours === minTime.getHours() && minutes < minTime.getMinutes())\n                minutes = minTime.getMinutes();\n            if (minutes === minTime.getMinutes())\n                seconds = Math.max(seconds, minTime.getSeconds());\n        }\n        setHours(hours, minutes, seconds);\n    }\n    function setHoursFromDate(dateObj) {\n        const date = dateObj || self.latestSelectedDateObj;\n        if (date) {\n            setHours(date.getHours(), date.getMinutes(), date.getSeconds());\n        }\n    }\n    function setHours(hours, minutes, seconds) {\n        if (self.latestSelectedDateObj !== undefined) {\n            self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);\n        }\n        if (!self.hourElement || !self.minuteElement || self.isMobile)\n            return;\n        self.hourElement.value = pad(!self.config.time_24hr\n            ? ((12 + hours) % 12) + 12 * int(hours % 12 === 0)\n            : hours);\n        self.minuteElement.value = pad(minutes);\n        if (self.amPM !== undefined)\n            self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];\n        if (self.secondElement !== undefined)\n            self.secondElement.value = pad(seconds);\n    }\n    function onYearInput(event) {\n        const eventTarget = getEventTarget(event);\n        const year = parseInt(eventTarget.value) + (event.delta || 0);\n        if (year / 1000 > 1 ||\n            (event.key === \"Enter\" && !/[^\\d]/.test(year.toString()))) {\n            changeYear(year);\n        }\n    }\n    function bind(element, event, handler, options) {\n        if (event instanceof Array)\n            return event.forEach((ev) => bind(element, ev, handler, options));\n        if (element instanceof Array)\n            return element.forEach((el) => bind(el, event, handler, options));\n        element.addEventListener(event, handler, options);\n        self._handlers.push({\n            remove: () => element.removeEventListener(event, handler),\n        });\n    }\n    function triggerChange() {\n        triggerEvent(\"onChange\");\n    }\n    function bindEvents() {\n        if (self.config.wrap) {\n            [\"open\", \"close\", \"toggle\", \"clear\"].forEach((evt) => {\n                Array.prototype.forEach.call(self.element.querySelectorAll(`[data-${evt}]`), (el) => bind(el, \"click\", self[evt]));\n            });\n        }\n        if (self.isMobile) {\n            setupMobile();\n            return;\n        }\n        const debouncedResize = debounce(onResize, 50);\n        self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS);\n        if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))\n            bind(self.daysContainer, \"mouseover\", (e) => {\n                if (self.config.mode === \"range\")\n                    onMouseOver(getEventTarget(e));\n            });\n        bind(window.document.body, \"keydown\", onKeyDown);\n        if (!self.config.inline && !self.config.static)\n            bind(window, \"resize\", debouncedResize);\n        if (window.ontouchstart !== undefined)\n            bind(window.document, \"touchstart\", documentClick);\n        else\n            bind(window.document, \"mousedown\", documentClick);\n        bind(window.document, \"focus\", documentClick, { capture: true });\n        if (self.config.clickOpens === true) {\n            bind(self._input, \"focus\", self.open);\n            bind(self._input, \"click\", self.open);\n        }\n        if (self.daysContainer !== undefined) {\n            bind(self.monthNav, \"click\", onMonthNavClick);\n            bind(self.monthNav, [\"keyup\", \"increment\"], onYearInput);\n            bind(self.daysContainer, \"click\", selectDate);\n        }\n        if (self.timeContainer !== undefined &&\n            self.minuteElement !== undefined &&\n            self.hourElement !== undefined) {\n            const selText = (e) => getEventTarget(e).select();\n            bind(self.timeContainer, [\"increment\"], updateTime);\n            bind(self.timeContainer, \"blur\", updateTime, { capture: true });\n            bind(self.timeContainer, \"click\", timeIncrement);\n            bind([self.hourElement, self.minuteElement], [\"focus\", \"click\"], selText);\n            if (self.secondElement !== undefined)\n                bind(self.secondElement, \"focus\", () => self.secondElement && self.secondElement.select());\n            if (self.amPM !== undefined) {\n                bind(self.amPM, \"click\", (e) => {\n                    updateTime(e);\n                    triggerChange();\n                });\n            }\n        }\n        if (self.config.allowInput) {\n            bind(self._input, \"blur\", onBlur);\n        }\n    }\n    function jumpToDate(jumpDate, triggerChange) {\n        const jumpTo = jumpDate !== undefined\n            ? self.parseDate(jumpDate)\n            : self.latestSelectedDateObj ||\n                (self.config.minDate && self.config.minDate > self.now\n                    ? self.config.minDate\n                    : self.config.maxDate && self.config.maxDate < self.now\n                        ? self.config.maxDate\n                        : self.now);\n        const oldYear = self.currentYear;\n        const oldMonth = self.currentMonth;\n        try {\n            if (jumpTo !== undefined) {\n                self.currentYear = jumpTo.getFullYear();\n                self.currentMonth = jumpTo.getMonth();\n            }\n        }\n        catch (e) {\n            e.message = \"Invalid date supplied: \" + jumpTo;\n            self.config.errorHandler(e);\n        }\n        if (triggerChange && self.currentYear !== oldYear) {\n            triggerEvent(\"onYearChange\");\n            buildMonthSwitch();\n        }\n        if (triggerChange &&\n            (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {\n            triggerEvent(\"onMonthChange\");\n        }\n        self.redraw();\n    }\n    function timeIncrement(e) {\n        const eventTarget = getEventTarget(e);\n        if (~eventTarget.className.indexOf(\"arrow\"))\n            incrementNumInput(e, eventTarget.classList.contains(\"arrowUp\") ? 1 : -1);\n    }\n    function incrementNumInput(e, delta, inputElem) {\n        const target = e && getEventTarget(e);\n        const input = inputElem ||\n            (target && target.parentNode && target.parentNode.firstChild);\n        const event = createEvent(\"increment\");\n        event.delta = delta;\n        input && input.dispatchEvent(event);\n    }\n    function build() {\n        const fragment = window.document.createDocumentFragment();\n        self.calendarContainer = createElement(\"div\", \"flatpickr-calendar\");\n        self.calendarContainer.tabIndex = -1;\n        if (!self.config.noCalendar) {\n            fragment.appendChild(buildMonthNav());\n            self.innerContainer = createElement(\"div\", \"flatpickr-innerContainer\");\n            if (self.config.weekNumbers) {\n                const { weekWrapper, weekNumbers } = buildWeeks();\n                self.innerContainer.appendChild(weekWrapper);\n                self.weekNumbers = weekNumbers;\n                self.weekWrapper = weekWrapper;\n            }\n            self.rContainer = createElement(\"div\", \"flatpickr-rContainer\");\n            self.rContainer.appendChild(buildWeekdays());\n            if (!self.daysContainer) {\n                self.daysContainer = createElement(\"div\", \"flatpickr-days\");\n                self.daysContainer.tabIndex = -1;\n            }\n            buildDays();\n            self.rContainer.appendChild(self.daysContainer);\n            self.innerContainer.appendChild(self.rContainer);\n            fragment.appendChild(self.innerContainer);\n        }\n        if (self.config.enableTime) {\n            fragment.appendChild(buildTime());\n        }\n        toggleClass(self.calendarContainer, \"rangeMode\", self.config.mode === \"range\");\n        toggleClass(self.calendarContainer, \"animate\", self.config.animate === true);\n        toggleClass(self.calendarContainer, \"multiMonth\", self.config.showMonths > 1);\n        self.calendarContainer.appendChild(fragment);\n        const customAppend = self.config.appendTo !== undefined &&\n            self.config.appendTo.nodeType !== undefined;\n        if (self.config.inline || self.config.static) {\n            self.calendarContainer.classList.add(self.config.inline ? \"inline\" : \"static\");\n            if (self.config.inline) {\n                if (!customAppend && self.element.parentNode)\n                    self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);\n                else if (self.config.appendTo !== undefined)\n                    self.config.appendTo.appendChild(self.calendarContainer);\n            }\n            if (self.config.static) {\n                const wrapper = createElement(\"div\", \"flatpickr-wrapper\");\n                if (self.element.parentNode)\n                    self.element.parentNode.insertBefore(wrapper, self.element);\n                wrapper.appendChild(self.element);\n                if (self.altInput)\n                    wrapper.appendChild(self.altInput);\n                wrapper.appendChild(self.calendarContainer);\n            }\n        }\n        if (!self.config.static && !self.config.inline)\n            (self.config.appendTo !== undefined\n                ? self.config.appendTo\n                : window.document.body).appendChild(self.calendarContainer);\n    }\n    function createDay(className, date, dayNumber, i) {\n        const dateIsEnabled = isEnabled(date, true), dayElement = createElement(\"span\", \"flatpickr-day \" + className, date.getDate().toString());\n        dayElement.dateObj = date;\n        dayElement.$i = i;\n        dayElement.setAttribute(\"aria-label\", self.formatDate(date, self.config.ariaDateFormat));\n        if (className.indexOf(\"hidden\") === -1 &&\n            compareDates(date, self.now) === 0) {\n            self.todayDateElem = dayElement;\n            dayElement.classList.add(\"today\");\n            dayElement.setAttribute(\"aria-current\", \"date\");\n        }\n        if (dateIsEnabled) {\n            dayElement.tabIndex = -1;\n            if (isDateSelected(date)) {\n                dayElement.classList.add(\"selected\");\n                self.selectedDateElem = dayElement;\n                if (self.config.mode === \"range\") {\n                    toggleClass(dayElement, \"startRange\", self.selectedDates[0] &&\n                        compareDates(date, self.selectedDates[0], true) === 0);\n                    toggleClass(dayElement, \"endRange\", self.selectedDates[1] &&\n                        compareDates(date, self.selectedDates[1], true) === 0);\n                    if (className === \"nextMonthDay\")\n                        dayElement.classList.add(\"inRange\");\n                }\n            }\n        }\n        else {\n            dayElement.classList.add(\"flatpickr-disabled\");\n        }\n        if (self.config.mode === \"range\") {\n            if (isDateInRange(date) && !isDateSelected(date))\n                dayElement.classList.add(\"inRange\");\n        }\n        if (self.weekNumbers &&\n            self.config.showMonths === 1 &&\n            className !== \"prevMonthDay\" &&\n            dayNumber % 7 === 1) {\n            self.weekNumbers.insertAdjacentHTML(\"beforeend\", \"<span class='flatpickr-day'>\" + self.config.getWeek(date) + \"</span>\");\n        }\n        triggerEvent(\"onDayCreate\", dayElement);\n        return dayElement;\n    }\n    function focusOnDayElem(targetNode) {\n        targetNode.focus();\n        if (self.config.mode === \"range\")\n            onMouseOver(targetNode);\n    }\n    function getFirstAvailableDay(delta) {\n        const startMonth = delta > 0 ? 0 : self.config.showMonths - 1;\n        const endMonth = delta > 0 ? self.config.showMonths : -1;\n        for (let m = startMonth; m != endMonth; m += delta) {\n            const month = self.daysContainer.children[m];\n            const startIndex = delta > 0 ? 0 : month.children.length - 1;\n            const endIndex = delta > 0 ? month.children.length : -1;\n            for (let i = startIndex; i != endIndex; i += delta) {\n                const c = month.children[i];\n                if (c.className.indexOf(\"hidden\") === -1 && isEnabled(c.dateObj))\n                    return c;\n            }\n        }\n        return undefined;\n    }\n    function getNextAvailableDay(current, delta) {\n        const givenMonth = current.className.indexOf(\"Month\") === -1\n            ? current.dateObj.getMonth()\n            : self.currentMonth;\n        const endMonth = delta > 0 ? self.config.showMonths : -1;\n        const loopDelta = delta > 0 ? 1 : -1;\n        for (let m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {\n            const month = self.daysContainer.children[m];\n            const startIndex = givenMonth - self.currentMonth === m\n                ? current.$i + delta\n                : delta < 0\n                    ? month.children.length - 1\n                    : 0;\n            const numMonthDays = month.children.length;\n            for (let i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {\n                const c = month.children[i];\n                if (c.className.indexOf(\"hidden\") === -1 &&\n                    isEnabled(c.dateObj) &&\n                    Math.abs(current.$i - i) >= Math.abs(delta))\n                    return focusOnDayElem(c);\n            }\n        }\n        self.changeMonth(loopDelta);\n        focusOnDay(getFirstAvailableDay(loopDelta), 0);\n        return undefined;\n    }\n    function focusOnDay(current, offset) {\n        const dayFocused = isInView(document.activeElement || document.body);\n        const startElem = current !== undefined\n            ? current\n            : dayFocused\n                ? document.activeElement\n                : self.selectedDateElem !== undefined && isInView(self.selectedDateElem)\n                    ? self.selectedDateElem\n                    : self.todayDateElem !== undefined && isInView(self.todayDateElem)\n                        ? self.todayDateElem\n                        : getFirstAvailableDay(offset > 0 ? 1 : -1);\n        if (startElem === undefined) {\n            self._input.focus();\n        }\n        else if (!dayFocused) {\n            focusOnDayElem(startElem);\n        }\n        else {\n            getNextAvailableDay(startElem, offset);\n        }\n    }\n    function buildMonthDays(year, month) {\n        const firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;\n        const prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);\n        const daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? \"prevMonthDay hidden\" : \"prevMonthDay\", nextMonthDayClass = isMultiMonth ? \"nextMonthDay hidden\" : \"nextMonthDay\";\n        let dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;\n        for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {\n            days.appendChild(createDay(prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));\n        }\n        for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {\n            days.appendChild(createDay(\"\", new Date(year, month, dayNumber), dayNumber, dayIndex));\n        }\n        for (let dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth &&\n            (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {\n            days.appendChild(createDay(nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));\n        }\n        const dayContainer = createElement(\"div\", \"dayContainer\");\n        dayContainer.appendChild(days);\n        return dayContainer;\n    }\n    function buildDays() {\n        if (self.daysContainer === undefined) {\n            return;\n        }\n        clearNode(self.daysContainer);\n        if (self.weekNumbers)\n            clearNode(self.weekNumbers);\n        const frag = document.createDocumentFragment();\n        for (let i = 0; i < self.config.showMonths; i++) {\n            const d = new Date(self.currentYear, self.currentMonth, 1);\n            d.setMonth(self.currentMonth + i);\n            frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));\n        }\n        self.daysContainer.appendChild(frag);\n        self.days = self.daysContainer.firstChild;\n        if (self.config.mode === \"range\" && self.selectedDates.length === 1) {\n            onMouseOver();\n        }\n    }\n    function buildMonthSwitch() {\n        if (self.config.showMonths > 1 ||\n            self.config.monthSelectorType !== \"dropdown\")\n            return;\n        const shouldBuildMonth = function (month) {\n            if (self.config.minDate !== undefined &&\n                self.currentYear === self.config.minDate.getFullYear() &&\n                month < self.config.minDate.getMonth()) {\n                return false;\n            }\n            return !(self.config.maxDate !== undefined &&\n                self.currentYear === self.config.maxDate.getFullYear() &&\n                month > self.config.maxDate.getMonth());\n        };\n        self.monthsDropdownContainer.tabIndex = -1;\n        self.monthsDropdownContainer.innerHTML = \"\";\n        for (let i = 0; i < 12; i++) {\n            if (!shouldBuildMonth(i))\n                continue;\n            const month = createElement(\"option\", \"flatpickr-monthDropdown-month\");\n            month.value = new Date(self.currentYear, i).getMonth().toString();\n            month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);\n            month.tabIndex = -1;\n            if (self.currentMonth === i) {\n                month.selected = true;\n            }\n            self.monthsDropdownContainer.appendChild(month);\n        }\n    }\n    function buildMonth() {\n        const container = createElement(\"div\", \"flatpickr-month\");\n        const monthNavFragment = window.document.createDocumentFragment();\n        let monthElement;\n        if (self.config.showMonths > 1 ||\n            self.config.monthSelectorType === \"static\") {\n            monthElement = createElement(\"span\", \"cur-month\");\n        }\n        else {\n            self.monthsDropdownContainer = createElement(\"select\", \"flatpickr-monthDropdown-months\");\n            self.monthsDropdownContainer.setAttribute(\"aria-label\", self.l10n.monthAriaLabel);\n            bind(self.monthsDropdownContainer, \"change\", (e) => {\n                const target = getEventTarget(e);\n                const selectedMonth = parseInt(target.value, 10);\n                self.changeMonth(selectedMonth - self.currentMonth);\n                triggerEvent(\"onMonthChange\");\n            });\n            buildMonthSwitch();\n            monthElement = self.monthsDropdownContainer;\n        }\n        const yearInput = createNumberInput(\"cur-year\", { tabindex: \"-1\" });\n        const yearElement = yearInput.getElementsByTagName(\"input\")[0];\n        yearElement.setAttribute(\"aria-label\", self.l10n.yearAriaLabel);\n        if (self.config.minDate) {\n            yearElement.setAttribute(\"min\", self.config.minDate.getFullYear().toString());\n        }\n        if (self.config.maxDate) {\n            yearElement.setAttribute(\"max\", self.config.maxDate.getFullYear().toString());\n            yearElement.disabled =\n                !!self.config.minDate &&\n                    self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();\n        }\n        const currentMonth = createElement(\"div\", \"flatpickr-current-month\");\n        currentMonth.appendChild(monthElement);\n        currentMonth.appendChild(yearInput);\n        monthNavFragment.appendChild(currentMonth);\n        container.appendChild(monthNavFragment);\n        return {\n            container,\n            yearElement,\n            monthElement,\n        };\n    }\n    function buildMonths() {\n        clearNode(self.monthNav);\n        self.monthNav.appendChild(self.prevMonthNav);\n        if (self.config.showMonths) {\n            self.yearElements = [];\n            self.monthElements = [];\n        }\n        for (let m = self.config.showMonths; m--;) {\n            const month = buildMonth();\n            self.yearElements.push(month.yearElement);\n            self.monthElements.push(month.monthElement);\n            self.monthNav.appendChild(month.container);\n        }\n        self.monthNav.appendChild(self.nextMonthNav);\n    }\n    function buildMonthNav() {\n        self.monthNav = createElement(\"div\", \"flatpickr-months\");\n        self.yearElements = [];\n        self.monthElements = [];\n        self.prevMonthNav = createElement(\"span\", \"flatpickr-prev-month\");\n        self.prevMonthNav.innerHTML = self.config.prevArrow;\n        self.nextMonthNav = createElement(\"span\", \"flatpickr-next-month\");\n        self.nextMonthNav.innerHTML = self.config.nextArrow;\n        buildMonths();\n        Object.defineProperty(self, \"_hidePrevMonthArrow\", {\n            get: () => self.__hidePrevMonthArrow,\n            set(bool) {\n                if (self.__hidePrevMonthArrow !== bool) {\n                    toggleClass(self.prevMonthNav, \"flatpickr-disabled\", bool);\n                    self.__hidePrevMonthArrow = bool;\n                }\n            },\n        });\n        Object.defineProperty(self, \"_hideNextMonthArrow\", {\n            get: () => self.__hideNextMonthArrow,\n            set(bool) {\n                if (self.__hideNextMonthArrow !== bool) {\n                    toggleClass(self.nextMonthNav, \"flatpickr-disabled\", bool);\n                    self.__hideNextMonthArrow = bool;\n                }\n            },\n        });\n        self.currentYearElement = self.yearElements[0];\n        updateNavigationCurrentMonth();\n        return self.monthNav;\n    }\n    function buildTime() {\n        self.calendarContainer.classList.add(\"hasTime\");\n        if (self.config.noCalendar)\n            self.calendarContainer.classList.add(\"noCalendar\");\n        const defaults = getDefaultHours(self.config);\n        self.timeContainer = createElement(\"div\", \"flatpickr-time\");\n        self.timeContainer.tabIndex = -1;\n        const separator = createElement(\"span\", \"flatpickr-time-separator\", \":\");\n        const hourInput = createNumberInput(\"flatpickr-hour\", {\n            \"aria-label\": self.l10n.hourAriaLabel,\n        });\n        self.hourElement = hourInput.getElementsByTagName(\"input\")[0];\n        const minuteInput = createNumberInput(\"flatpickr-minute\", {\n            \"aria-label\": self.l10n.minuteAriaLabel,\n        });\n        self.minuteElement = minuteInput.getElementsByTagName(\"input\")[0];\n        self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;\n        self.hourElement.value = pad(self.latestSelectedDateObj\n            ? self.latestSelectedDateObj.getHours()\n            : self.config.time_24hr\n                ? defaults.hours\n                : military2ampm(defaults.hours));\n        self.minuteElement.value = pad(self.latestSelectedDateObj\n            ? self.latestSelectedDateObj.getMinutes()\n            : defaults.minutes);\n        self.hourElement.setAttribute(\"step\", self.config.hourIncrement.toString());\n        self.minuteElement.setAttribute(\"step\", self.config.minuteIncrement.toString());\n        self.hourElement.setAttribute(\"min\", self.config.time_24hr ? \"0\" : \"1\");\n        self.hourElement.setAttribute(\"max\", self.config.time_24hr ? \"23\" : \"12\");\n        self.hourElement.setAttribute(\"maxlength\", \"2\");\n        self.minuteElement.setAttribute(\"min\", \"0\");\n        self.minuteElement.setAttribute(\"max\", \"59\");\n        self.minuteElement.setAttribute(\"maxlength\", \"2\");\n        self.timeContainer.appendChild(hourInput);\n        self.timeContainer.appendChild(separator);\n        self.timeContainer.appendChild(minuteInput);\n        if (self.config.time_24hr)\n            self.timeContainer.classList.add(\"time24hr\");\n        if (self.config.enableSeconds) {\n            self.timeContainer.classList.add(\"hasSeconds\");\n            const secondInput = createNumberInput(\"flatpickr-second\");\n            self.secondElement = secondInput.getElementsByTagName(\"input\")[0];\n            self.secondElement.value = pad(self.latestSelectedDateObj\n                ? self.latestSelectedDateObj.getSeconds()\n                : defaults.seconds);\n            self.secondElement.setAttribute(\"step\", self.minuteElement.getAttribute(\"step\"));\n            self.secondElement.setAttribute(\"min\", \"0\");\n            self.secondElement.setAttribute(\"max\", \"59\");\n            self.secondElement.setAttribute(\"maxlength\", \"2\");\n            self.timeContainer.appendChild(createElement(\"span\", \"flatpickr-time-separator\", \":\"));\n            self.timeContainer.appendChild(secondInput);\n        }\n        if (!self.config.time_24hr) {\n            self.amPM = createElement(\"span\", \"flatpickr-am-pm\", self.l10n.amPM[int((self.latestSelectedDateObj\n                ? self.hourElement.value\n                : self.config.defaultHour) > 11)]);\n            self.amPM.title = self.l10n.toggleTitle;\n            self.amPM.tabIndex = -1;\n            self.timeContainer.appendChild(self.amPM);\n        }\n        return self.timeContainer;\n    }\n    function buildWeekdays() {\n        if (!self.weekdayContainer)\n            self.weekdayContainer = createElement(\"div\", \"flatpickr-weekdays\");\n        else\n            clearNode(self.weekdayContainer);\n        for (let i = self.config.showMonths; i--;) {\n            const container = createElement(\"div\", \"flatpickr-weekdaycontainer\");\n            self.weekdayContainer.appendChild(container);\n        }\n        updateWeekdays();\n        return self.weekdayContainer;\n    }\n    function updateWeekdays() {\n        if (!self.weekdayContainer) {\n            return;\n        }\n        const firstDayOfWeek = self.l10n.firstDayOfWeek;\n        let weekdays = [...self.l10n.weekdays.shorthand];\n        if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {\n            weekdays = [\n                ...weekdays.splice(firstDayOfWeek, weekdays.length),\n                ...weekdays.splice(0, firstDayOfWeek),\n            ];\n        }\n        for (let i = self.config.showMonths; i--;) {\n            self.weekdayContainer.children[i].innerHTML = `\n      <span class='flatpickr-weekday'>\n        ${weekdays.join(\"</span><span class='flatpickr-weekday'>\")}\n      </span>\n      `;\n        }\n    }\n    function buildWeeks() {\n        self.calendarContainer.classList.add(\"hasWeeks\");\n        const weekWrapper = createElement(\"div\", \"flatpickr-weekwrapper\");\n        weekWrapper.appendChild(createElement(\"span\", \"flatpickr-weekday\", self.l10n.weekAbbreviation));\n        const weekNumbers = createElement(\"div\", \"flatpickr-weeks\");\n        weekWrapper.appendChild(weekNumbers);\n        return {\n            weekWrapper,\n            weekNumbers,\n        };\n    }\n    function changeMonth(value, isOffset = true) {\n        const delta = isOffset ? value : value - self.currentMonth;\n        if ((delta < 0 && self._hidePrevMonthArrow === true) ||\n            (delta > 0 && self._hideNextMonthArrow === true))\n            return;\n        self.currentMonth += delta;\n        if (self.currentMonth < 0 || self.currentMonth > 11) {\n            self.currentYear += self.currentMonth > 11 ? 1 : -1;\n            self.currentMonth = (self.currentMonth + 12) % 12;\n            triggerEvent(\"onYearChange\");\n            buildMonthSwitch();\n        }\n        buildDays();\n        triggerEvent(\"onMonthChange\");\n        updateNavigationCurrentMonth();\n    }\n    function clear(triggerChangeEvent = true, toInitial = true) {\n        self.input.value = \"\";\n        if (self.altInput !== undefined)\n            self.altInput.value = \"\";\n        if (self.mobileInput !== undefined)\n            self.mobileInput.value = \"\";\n        self.selectedDates = [];\n        self.latestSelectedDateObj = undefined;\n        if (toInitial === true) {\n            self.currentYear = self._initialDate.getFullYear();\n            self.currentMonth = self._initialDate.getMonth();\n        }\n        if (self.config.enableTime === true) {\n            const { hours, minutes, seconds } = getDefaultHours(self.config);\n            setHours(hours, minutes, seconds);\n        }\n        self.redraw();\n        if (triggerChangeEvent)\n            triggerEvent(\"onChange\");\n    }\n    function close() {\n        self.isOpen = false;\n        if (!self.isMobile) {\n            if (self.calendarContainer !== undefined) {\n                self.calendarContainer.classList.remove(\"open\");\n            }\n            if (self._input !== undefined) {\n                self._input.classList.remove(\"active\");\n            }\n        }\n        triggerEvent(\"onClose\");\n    }\n    function destroy() {\n        if (self.config !== undefined)\n            triggerEvent(\"onDestroy\");\n        for (let i = self._handlers.length; i--;) {\n            self._handlers[i].remove();\n        }\n        self._handlers = [];\n        if (self.mobileInput) {\n            if (self.mobileInput.parentNode)\n                self.mobileInput.parentNode.removeChild(self.mobileInput);\n            self.mobileInput = undefined;\n        }\n        else if (self.calendarContainer && self.calendarContainer.parentNode) {\n            if (self.config.static && self.calendarContainer.parentNode) {\n                const wrapper = self.calendarContainer.parentNode;\n                wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);\n                if (wrapper.parentNode) {\n                    while (wrapper.firstChild)\n                        wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                }\n            }\n            else\n                self.calendarContainer.parentNode.removeChild(self.calendarContainer);\n        }\n        if (self.altInput) {\n            self.input.type = \"text\";\n            if (self.altInput.parentNode)\n                self.altInput.parentNode.removeChild(self.altInput);\n            delete self.altInput;\n        }\n        if (self.input) {\n            self.input.type = self.input._type;\n            self.input.classList.remove(\"flatpickr-input\");\n            self.input.removeAttribute(\"readonly\");\n        }\n        [\n            \"_showTimeInput\",\n            \"latestSelectedDateObj\",\n            \"_hideNextMonthArrow\",\n            \"_hidePrevMonthArrow\",\n            \"__hideNextMonthArrow\",\n            \"__hidePrevMonthArrow\",\n            \"isMobile\",\n            \"isOpen\",\n            \"selectedDateElem\",\n            \"minDateHasTime\",\n            \"maxDateHasTime\",\n            \"days\",\n            \"daysContainer\",\n            \"_input\",\n            \"_positionElement\",\n            \"innerContainer\",\n            \"rContainer\",\n            \"monthNav\",\n            \"todayDateElem\",\n            \"calendarContainer\",\n            \"weekdayContainer\",\n            \"prevMonthNav\",\n            \"nextMonthNav\",\n            \"monthsDropdownContainer\",\n            \"currentMonthElement\",\n            \"currentYearElement\",\n            \"navigationCurrentMonth\",\n            \"selectedDateElem\",\n            \"config\",\n        ].forEach((k) => {\n            try {\n                delete self[k];\n            }\n            catch (_) { }\n        });\n    }\n    function isCalendarElem(elem) {\n        if (self.config.appendTo && self.config.appendTo.contains(elem))\n            return true;\n        return self.calendarContainer.contains(elem);\n    }\n    function documentClick(e) {\n        if (self.isOpen && !self.config.inline) {\n            const eventTarget = getEventTarget(e);\n            const isCalendarElement = isCalendarElem(eventTarget);\n            const isInput = eventTarget === self.input ||\n                eventTarget === self.altInput ||\n                self.element.contains(eventTarget) ||\n                (e.path &&\n                    e.path.indexOf &&\n                    (~e.path.indexOf(self.input) ||\n                        ~e.path.indexOf(self.altInput)));\n            const lostFocus = e.type === \"blur\"\n                ? isInput &&\n                    e.relatedTarget &&\n                    !isCalendarElem(e.relatedTarget)\n                : !isInput &&\n                    !isCalendarElement &&\n                    !isCalendarElem(e.relatedTarget);\n            const isIgnored = !self.config.ignoredFocusElements.some((elem) => elem.contains(eventTarget));\n            if (lostFocus && isIgnored) {\n                if (self.timeContainer !== undefined &&\n                    self.minuteElement !== undefined &&\n                    self.hourElement !== undefined &&\n                    self.input.value !== \"\" &&\n                    self.input.value !== undefined) {\n                    updateTime();\n                }\n                self.close();\n                if (self.config &&\n                    self.config.mode === \"range\" &&\n                    self.selectedDates.length === 1) {\n                    self.clear(false);\n                    self.redraw();\n                }\n            }\n        }\n    }\n    function changeYear(newYear) {\n        if (!newYear ||\n            (self.config.minDate && newYear < self.config.minDate.getFullYear()) ||\n            (self.config.maxDate && newYear > self.config.maxDate.getFullYear()))\n            return;\n        const newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;\n        self.currentYear = newYearNum || self.currentYear;\n        if (self.config.maxDate &&\n            self.currentYear === self.config.maxDate.getFullYear()) {\n            self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);\n        }\n        else if (self.config.minDate &&\n            self.currentYear === self.config.minDate.getFullYear()) {\n            self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);\n        }\n        if (isNewYear) {\n            self.redraw();\n            triggerEvent(\"onYearChange\");\n            buildMonthSwitch();\n        }\n    }\n    function isEnabled(date, timeless = true) {\n        var _a;\n        const dateToCheck = self.parseDate(date, undefined, timeless);\n        if ((self.config.minDate &&\n            dateToCheck &&\n            compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0) ||\n            (self.config.maxDate &&\n                dateToCheck &&\n                compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0))\n            return false;\n        if (!self.config.enable && self.config.disable.length === 0)\n            return true;\n        if (dateToCheck === undefined)\n            return false;\n        const bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;\n        for (let i = 0, d; i < array.length; i++) {\n            d = array[i];\n            if (typeof d === \"function\" &&\n                d(dateToCheck))\n                return bool;\n            else if (d instanceof Date &&\n                dateToCheck !== undefined &&\n                d.getTime() === dateToCheck.getTime())\n                return bool;\n            else if (typeof d === \"string\") {\n                const parsed = self.parseDate(d, undefined, true);\n                return parsed && parsed.getTime() === dateToCheck.getTime()\n                    ? bool\n                    : !bool;\n            }\n            else if (typeof d === \"object\" &&\n                dateToCheck !== undefined &&\n                d.from &&\n                d.to &&\n                dateToCheck.getTime() >= d.from.getTime() &&\n                dateToCheck.getTime() <= d.to.getTime())\n                return bool;\n        }\n        return !bool;\n    }\n    function isInView(elem) {\n        if (self.daysContainer !== undefined)\n            return (elem.className.indexOf(\"hidden\") === -1 &&\n                elem.className.indexOf(\"flatpickr-disabled\") === -1 &&\n                self.daysContainer.contains(elem));\n        return false;\n    }\n    function onBlur(e) {\n        const isInput = e.target === self._input;\n        if (isInput &&\n            (self.selectedDates.length > 0 || self._input.value.length > 0) &&\n            !(e.relatedTarget && isCalendarElem(e.relatedTarget))) {\n            self.setDate(self._input.value, true, e.target === self.altInput\n                ? self.config.altFormat\n                : self.config.dateFormat);\n        }\n    }\n    function onKeyDown(e) {\n        const eventTarget = getEventTarget(e);\n        const isInput = self.config.wrap\n            ? element.contains(eventTarget)\n            : eventTarget === self._input;\n        const allowInput = self.config.allowInput;\n        const allowKeydown = self.isOpen && (!allowInput || !isInput);\n        const allowInlineKeydown = self.config.inline && isInput && !allowInput;\n        if (e.keyCode === 13 && isInput) {\n            if (allowInput) {\n                self.setDate(self._input.value, true, eventTarget === self.altInput\n                    ? self.config.altFormat\n                    : self.config.dateFormat);\n                return eventTarget.blur();\n            }\n            else {\n                self.open();\n            }\n        }\n        else if (isCalendarElem(eventTarget) ||\n            allowKeydown ||\n            allowInlineKeydown) {\n            const isTimeObj = !!self.timeContainer &&\n                self.timeContainer.contains(eventTarget);\n            switch (e.keyCode) {\n                case 13:\n                    if (isTimeObj) {\n                        e.preventDefault();\n                        updateTime();\n                        focusAndClose();\n                    }\n                    else\n                        selectDate(e);\n                    break;\n                case 27:\n                    e.preventDefault();\n                    focusAndClose();\n                    break;\n                case 8:\n                case 46:\n                    if (isInput && !self.config.allowInput) {\n                        e.preventDefault();\n                        self.clear();\n                    }\n                    break;\n                case 37:\n                case 39:\n                    if (!isTimeObj && !isInput) {\n                        e.preventDefault();\n                        if (self.daysContainer !== undefined &&\n                            (allowInput === false ||\n                                (document.activeElement && isInView(document.activeElement)))) {\n                            const delta = e.keyCode === 39 ? 1 : -1;\n                            if (!e.ctrlKey)\n                                focusOnDay(undefined, delta);\n                            else {\n                                e.stopPropagation();\n                                changeMonth(delta);\n                                focusOnDay(getFirstAvailableDay(1), 0);\n                            }\n                        }\n                    }\n                    else if (self.hourElement)\n                        self.hourElement.focus();\n                    break;\n                case 38:\n                case 40:\n                    e.preventDefault();\n                    const delta = e.keyCode === 40 ? 1 : -1;\n                    if ((self.daysContainer &&\n                        eventTarget.$i !== undefined) ||\n                        eventTarget === self.input ||\n                        eventTarget === self.altInput) {\n                        if (e.ctrlKey) {\n                            e.stopPropagation();\n                            changeYear(self.currentYear - delta);\n                            focusOnDay(getFirstAvailableDay(1), 0);\n                        }\n                        else if (!isTimeObj)\n                            focusOnDay(undefined, delta * 7);\n                    }\n                    else if (eventTarget === self.currentYearElement) {\n                        changeYear(self.currentYear - delta);\n                    }\n                    else if (self.config.enableTime) {\n                        if (!isTimeObj && self.hourElement)\n                            self.hourElement.focus();\n                        updateTime(e);\n                        self._debouncedChange();\n                    }\n                    break;\n                case 9:\n                    if (isTimeObj) {\n                        const elems = [\n                            self.hourElement,\n                            self.minuteElement,\n                            self.secondElement,\n                            self.amPM,\n                        ]\n                            .concat(self.pluginElements)\n                            .filter((x) => x);\n                        const i = elems.indexOf(eventTarget);\n                        if (i !== -1) {\n                            const target = elems[i + (e.shiftKey ? -1 : 1)];\n                            e.preventDefault();\n                            (target || self._input).focus();\n                        }\n                    }\n                    else if (!self.config.noCalendar &&\n                        self.daysContainer &&\n                        self.daysContainer.contains(eventTarget) &&\n                        e.shiftKey) {\n                        e.preventDefault();\n                        self._input.focus();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        if (self.amPM !== undefined && eventTarget === self.amPM) {\n            switch (e.key) {\n                case self.l10n.amPM[0].charAt(0):\n                case self.l10n.amPM[0].charAt(0).toLowerCase():\n                    self.amPM.textContent = self.l10n.amPM[0];\n                    setHoursFromInputs();\n                    updateValue();\n                    break;\n                case self.l10n.amPM[1].charAt(0):\n                case self.l10n.amPM[1].charAt(0).toLowerCase():\n                    self.amPM.textContent = self.l10n.amPM[1];\n                    setHoursFromInputs();\n                    updateValue();\n                    break;\n            }\n        }\n        if (isInput || isCalendarElem(eventTarget)) {\n            triggerEvent(\"onKeyDown\", e);\n        }\n    }\n    function onMouseOver(elem) {\n        if (self.selectedDates.length !== 1 ||\n            (elem &&\n                (!elem.classList.contains(\"flatpickr-day\") ||\n                    elem.classList.contains(\"flatpickr-disabled\"))))\n            return;\n        const hoverDate = elem\n            ? elem.dateObj.getTime()\n            : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());\n        let containsDisabled = false;\n        let minRange = 0, maxRange = 0;\n        for (let t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {\n            if (!isEnabled(new Date(t), true)) {\n                containsDisabled =\n                    containsDisabled || (t > rangeStartDate && t < rangeEndDate);\n                if (t < initialDate && (!minRange || t > minRange))\n                    minRange = t;\n                else if (t > initialDate && (!maxRange || t < maxRange))\n                    maxRange = t;\n            }\n        }\n        for (let m = 0; m < self.config.showMonths; m++) {\n            const month = self.daysContainer.children[m];\n            for (let i = 0, l = month.children.length; i < l; i++) {\n                const dayElem = month.children[i], date = dayElem.dateObj;\n                const timestamp = date.getTime();\n                const outOfRange = (minRange > 0 && timestamp < minRange) ||\n                    (maxRange > 0 && timestamp > maxRange);\n                if (outOfRange) {\n                    dayElem.classList.add(\"notAllowed\");\n                    [\"inRange\", \"startRange\", \"endRange\"].forEach((c) => {\n                        dayElem.classList.remove(c);\n                    });\n                    continue;\n                }\n                else if (containsDisabled && !outOfRange)\n                    continue;\n                [\"startRange\", \"inRange\", \"endRange\", \"notAllowed\"].forEach((c) => {\n                    dayElem.classList.remove(c);\n                });\n                if (elem !== undefined) {\n                    elem.classList.add(hoverDate <= self.selectedDates[0].getTime()\n                        ? \"startRange\"\n                        : \"endRange\");\n                    if (initialDate < hoverDate && timestamp === initialDate)\n                        dayElem.classList.add(\"startRange\");\n                    else if (initialDate > hoverDate && timestamp === initialDate)\n                        dayElem.classList.add(\"endRange\");\n                    if (timestamp >= minRange &&\n                        (maxRange === 0 || timestamp <= maxRange) &&\n                        isBetween(timestamp, initialDate, hoverDate))\n                        dayElem.classList.add(\"inRange\");\n                }\n            }\n        }\n    }\n    function onResize() {\n        if (self.isOpen && !self.config.static && !self.config.inline)\n            positionCalendar();\n    }\n    function open(e, positionElement = self._positionElement) {\n        if (self.isMobile === true) {\n            if (e) {\n                e.preventDefault();\n                const eventTarget = getEventTarget(e);\n                if (eventTarget) {\n                    eventTarget.blur();\n                }\n            }\n            if (self.mobileInput !== undefined) {\n                self.mobileInput.focus();\n                self.mobileInput.click();\n            }\n            triggerEvent(\"onOpen\");\n            return;\n        }\n        else if (self._input.disabled || self.config.inline) {\n            return;\n        }\n        const wasOpen = self.isOpen;\n        self.isOpen = true;\n        if (!wasOpen) {\n            self.calendarContainer.classList.add(\"open\");\n            self._input.classList.add(\"active\");\n            triggerEvent(\"onOpen\");\n            positionCalendar(positionElement);\n        }\n        if (self.config.enableTime === true && self.config.noCalendar === true) {\n            if (self.config.allowInput === false &&\n                (e === undefined ||\n                    !self.timeContainer.contains(e.relatedTarget))) {\n                setTimeout(() => self.hourElement.select(), 50);\n            }\n        }\n    }\n    function minMaxDateSetter(type) {\n        return (date) => {\n            const dateObj = (self.config[`_${type}Date`] = self.parseDate(date, self.config.dateFormat));\n            const inverseDateObj = self.config[`_${type === \"min\" ? \"max\" : \"min\"}Date`];\n            if (dateObj !== undefined) {\n                self[type === \"min\" ? \"minDateHasTime\" : \"maxDateHasTime\"] =\n                    dateObj.getHours() > 0 ||\n                        dateObj.getMinutes() > 0 ||\n                        dateObj.getSeconds() > 0;\n            }\n            if (self.selectedDates) {\n                self.selectedDates = self.selectedDates.filter((d) => isEnabled(d));\n                if (!self.selectedDates.length && type === \"min\")\n                    setHoursFromDate(dateObj);\n                updateValue();\n            }\n            if (self.daysContainer) {\n                redraw();\n                if (dateObj !== undefined)\n                    self.currentYearElement[type] = dateObj.getFullYear().toString();\n                else\n                    self.currentYearElement.removeAttribute(type);\n                self.currentYearElement.disabled =\n                    !!inverseDateObj &&\n                        dateObj !== undefined &&\n                        inverseDateObj.getFullYear() === dateObj.getFullYear();\n            }\n        };\n    }\n    function parseConfig() {\n        const boolOpts = [\n            \"wrap\",\n            \"weekNumbers\",\n            \"allowInput\",\n            \"allowInvalidPreload\",\n            \"clickOpens\",\n            \"time_24hr\",\n            \"enableTime\",\n            \"noCalendar\",\n            \"altInput\",\n            \"shorthandCurrentMonth\",\n            \"inline\",\n            \"static\",\n            \"enableSeconds\",\n            \"disableMobile\",\n        ];\n        const userConfig = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);\n        const formats = {};\n        self.config.parseDate = userConfig.parseDate;\n        self.config.formatDate = userConfig.formatDate;\n        Object.defineProperty(self.config, \"enable\", {\n            get: () => self.config._enable,\n            set: (dates) => {\n                self.config._enable = parseDateRules(dates);\n            },\n        });\n        Object.defineProperty(self.config, \"disable\", {\n            get: () => self.config._disable,\n            set: (dates) => {\n                self.config._disable = parseDateRules(dates);\n            },\n        });\n        const timeMode = userConfig.mode === \"time\";\n        if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {\n            const defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaultOptions.dateFormat;\n            formats.dateFormat =\n                userConfig.noCalendar || timeMode\n                    ? \"H:i\" + (userConfig.enableSeconds ? \":S\" : \"\")\n                    : defaultDateFormat + \" H:i\" + (userConfig.enableSeconds ? \":S\" : \"\");\n        }\n        if (userConfig.altInput &&\n            (userConfig.enableTime || timeMode) &&\n            !userConfig.altFormat) {\n            const defaultAltFormat = flatpickr.defaultConfig.altFormat || defaultOptions.altFormat;\n            formats.altFormat =\n                userConfig.noCalendar || timeMode\n                    ? \"h:i\" + (userConfig.enableSeconds ? \":S K\" : \" K\")\n                    : defaultAltFormat + ` h:i${userConfig.enableSeconds ? \":S\" : \"\"} K`;\n        }\n        Object.defineProperty(self.config, \"minDate\", {\n            get: () => self.config._minDate,\n            set: minMaxDateSetter(\"min\"),\n        });\n        Object.defineProperty(self.config, \"maxDate\", {\n            get: () => self.config._maxDate,\n            set: minMaxDateSetter(\"max\"),\n        });\n        const minMaxTimeSetter = (type) => (val) => {\n            self.config[type === \"min\" ? \"_minTime\" : \"_maxTime\"] = self.parseDate(val, \"H:i:S\");\n        };\n        Object.defineProperty(self.config, \"minTime\", {\n            get: () => self.config._minTime,\n            set: minMaxTimeSetter(\"min\"),\n        });\n        Object.defineProperty(self.config, \"maxTime\", {\n            get: () => self.config._maxTime,\n            set: minMaxTimeSetter(\"max\"),\n        });\n        if (userConfig.mode === \"time\") {\n            self.config.noCalendar = true;\n            self.config.enableTime = true;\n        }\n        Object.assign(self.config, formats, userConfig);\n        for (let i = 0; i < boolOpts.length; i++)\n            self.config[boolOpts[i]] =\n                self.config[boolOpts[i]] === true ||\n                    self.config[boolOpts[i]] === \"true\";\n        HOOKS.filter((hook) => self.config[hook] !== undefined).forEach((hook) => {\n            self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);\n        });\n        self.isMobile =\n            !self.config.disableMobile &&\n                !self.config.inline &&\n                self.config.mode === \"single\" &&\n                !self.config.disable.length &&\n                !self.config.enable &&\n                !self.config.weekNumbers &&\n                /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n        for (let i = 0; i < self.config.plugins.length; i++) {\n            const pluginConf = self.config.plugins[i](self) || {};\n            for (const key in pluginConf) {\n                if (HOOKS.indexOf(key) > -1) {\n                    self.config[key] = arrayify(pluginConf[key])\n                        .map(bindToInstance)\n                        .concat(self.config[key]);\n                }\n                else if (typeof userConfig[key] === \"undefined\")\n                    self.config[key] = pluginConf[key];\n            }\n        }\n        if (!userConfig.altInputClass) {\n            self.config.altInputClass =\n                getInputElem().className + \" \" + self.config.altInputClass;\n        }\n        triggerEvent(\"onParseConfig\");\n    }\n    function getInputElem() {\n        return self.config.wrap\n            ? element.querySelector(\"[data-input]\")\n            : element;\n    }\n    function setupLocale() {\n        if (typeof self.config.locale !== \"object\" &&\n            typeof flatpickr.l10ns[self.config.locale] === \"undefined\")\n            self.config.errorHandler(new Error(`flatpickr: invalid locale ${self.config.locale}`));\n        self.l10n = Object.assign(Object.assign({}, flatpickr.l10ns.default), (typeof self.config.locale === \"object\"\n            ? self.config.locale\n            : self.config.locale !== \"default\"\n                ? flatpickr.l10ns[self.config.locale]\n                : undefined));\n        tokenRegex.K = `(${self.l10n.amPM[0]}|${self.l10n.amPM[1]}|${self.l10n.amPM[0].toLowerCase()}|${self.l10n.amPM[1].toLowerCase()})`;\n        const userConfig = Object.assign(Object.assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));\n        if (userConfig.time_24hr === undefined &&\n            flatpickr.defaultConfig.time_24hr === undefined) {\n            self.config.time_24hr = self.l10n.time_24hr;\n        }\n        self.formatDate = createDateFormatter(self);\n        self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });\n    }\n    function positionCalendar(customPositionElement) {\n        if (typeof self.config.position === \"function\") {\n            return void self.config.position(self, customPositionElement);\n        }\n        if (self.calendarContainer === undefined)\n            return;\n        triggerEvent(\"onPreCalendarPosition\");\n        const positionElement = customPositionElement || self._positionElement;\n        const calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, ((acc, child) => acc + child.offsetHeight), 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(\" \"), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === \"above\" ||\n            (configPosVertical !== \"below\" &&\n                distanceFromBottom < calendarHeight &&\n                inputBounds.top > calendarHeight);\n        const top = window.pageYOffset +\n            inputBounds.top +\n            (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);\n        toggleClass(self.calendarContainer, \"arrowTop\", !showOnTop);\n        toggleClass(self.calendarContainer, \"arrowBottom\", showOnTop);\n        if (self.config.inline)\n            return;\n        let left = window.pageXOffset + inputBounds.left;\n        let isCenter = false;\n        let isRight = false;\n        if (configPosHorizontal === \"center\") {\n            left -= (calendarWidth - inputBounds.width) / 2;\n            isCenter = true;\n        }\n        else if (configPosHorizontal === \"right\") {\n            left -= calendarWidth - inputBounds.width;\n            isRight = true;\n        }\n        toggleClass(self.calendarContainer, \"arrowLeft\", !isCenter && !isRight);\n        toggleClass(self.calendarContainer, \"arrowCenter\", isCenter);\n        toggleClass(self.calendarContainer, \"arrowRight\", isRight);\n        const right = window.document.body.offsetWidth -\n            (window.pageXOffset + inputBounds.right);\n        const rightMost = left + calendarWidth > window.document.body.offsetWidth;\n        const centerMost = right + calendarWidth > window.document.body.offsetWidth;\n        toggleClass(self.calendarContainer, \"rightMost\", rightMost);\n        if (self.config.static)\n            return;\n        self.calendarContainer.style.top = `${top}px`;\n        if (!rightMost) {\n            self.calendarContainer.style.left = `${left}px`;\n            self.calendarContainer.style.right = \"auto\";\n        }\n        else if (!centerMost) {\n            self.calendarContainer.style.left = \"auto\";\n            self.calendarContainer.style.right = `${right}px`;\n        }\n        else {\n            const doc = getDocumentStyleSheet();\n            if (doc === undefined)\n                return;\n            const bodyWidth = window.document.body.offsetWidth;\n            const centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);\n            const centerBefore = \".flatpickr-calendar.centerMost:before\";\n            const centerAfter = \".flatpickr-calendar.centerMost:after\";\n            const centerIndex = doc.cssRules.length;\n            const centerStyle = `{left:${inputBounds.left}px;right:auto;}`;\n            toggleClass(self.calendarContainer, \"rightMost\", false);\n            toggleClass(self.calendarContainer, \"centerMost\", true);\n            doc.insertRule(`${centerBefore},${centerAfter}${centerStyle}`, centerIndex);\n            self.calendarContainer.style.left = `${centerLeft}px`;\n            self.calendarContainer.style.right = \"auto\";\n        }\n    }\n    function getDocumentStyleSheet() {\n        let editableSheet = null;\n        for (let i = 0; i < document.styleSheets.length; i++) {\n            const sheet = document.styleSheets[i];\n            try {\n                sheet.cssRules;\n            }\n            catch (err) {\n                continue;\n            }\n            editableSheet = sheet;\n            break;\n        }\n        return editableSheet != null ? editableSheet : createStyleSheet();\n    }\n    function createStyleSheet() {\n        const style = document.createElement(\"style\");\n        document.head.appendChild(style);\n        return style.sheet;\n    }\n    function redraw() {\n        if (self.config.noCalendar || self.isMobile)\n            return;\n        buildMonthSwitch();\n        updateNavigationCurrentMonth();\n        buildDays();\n    }\n    function focusAndClose() {\n        self._input.focus();\n        if (window.navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.msMaxTouchPoints !== undefined) {\n            setTimeout(self.close, 0);\n        }\n        else {\n            self.close();\n        }\n    }\n    function selectDate(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const isSelectable = (day) => day.classList &&\n            day.classList.contains(\"flatpickr-day\") &&\n            !day.classList.contains(\"flatpickr-disabled\") &&\n            !day.classList.contains(\"notAllowed\");\n        const t = findParent(getEventTarget(e), isSelectable);\n        if (t === undefined)\n            return;\n        const target = t;\n        const selectedDate = (self.latestSelectedDateObj = new Date(target.dateObj.getTime()));\n        const shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth ||\n            selectedDate.getMonth() >\n                self.currentMonth + self.config.showMonths - 1) &&\n            self.config.mode !== \"range\";\n        self.selectedDateElem = target;\n        if (self.config.mode === \"single\")\n            self.selectedDates = [selectedDate];\n        else if (self.config.mode === \"multiple\") {\n            const selectedIndex = isDateSelected(selectedDate);\n            if (selectedIndex)\n                self.selectedDates.splice(parseInt(selectedIndex), 1);\n            else\n                self.selectedDates.push(selectedDate);\n        }\n        else if (self.config.mode === \"range\") {\n            if (self.selectedDates.length === 2) {\n                self.clear(false, false);\n            }\n            self.latestSelectedDateObj = selectedDate;\n            self.selectedDates.push(selectedDate);\n            if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)\n                self.selectedDates.sort((a, b) => a.getTime() - b.getTime());\n        }\n        setHoursFromInputs();\n        if (shouldChangeMonth) {\n            const isNewYear = self.currentYear !== selectedDate.getFullYear();\n            self.currentYear = selectedDate.getFullYear();\n            self.currentMonth = selectedDate.getMonth();\n            if (isNewYear) {\n                triggerEvent(\"onYearChange\");\n                buildMonthSwitch();\n            }\n            triggerEvent(\"onMonthChange\");\n        }\n        updateNavigationCurrentMonth();\n        buildDays();\n        updateValue();\n        if (!shouldChangeMonth &&\n            self.config.mode !== \"range\" &&\n            self.config.showMonths === 1)\n            focusOnDayElem(target);\n        else if (self.selectedDateElem !== undefined &&\n            self.hourElement === undefined) {\n            self.selectedDateElem && self.selectedDateElem.focus();\n        }\n        if (self.hourElement !== undefined)\n            self.hourElement !== undefined && self.hourElement.focus();\n        if (self.config.closeOnSelect) {\n            const single = self.config.mode === \"single\" && !self.config.enableTime;\n            const range = self.config.mode === \"range\" &&\n                self.selectedDates.length === 2 &&\n                !self.config.enableTime;\n            if (single || range) {\n                focusAndClose();\n            }\n        }\n        triggerChange();\n    }\n    const CALLBACKS = {\n        locale: [setupLocale, updateWeekdays],\n        showMonths: [buildMonths, setCalendarWidth, buildWeekdays],\n        minDate: [jumpToDate],\n        maxDate: [jumpToDate],\n        clickOpens: [\n            () => {\n                if (self.config.clickOpens === true) {\n                    bind(self._input, \"focus\", self.open);\n                    bind(self._input, \"click\", self.open);\n                }\n                else {\n                    self._input.removeEventListener(\"focus\", self.open);\n                    self._input.removeEventListener(\"click\", self.open);\n                }\n            },\n        ],\n    };\n    function set(option, value) {\n        if (option !== null && typeof option === \"object\") {\n            Object.assign(self.config, option);\n            for (const key in option) {\n                if (CALLBACKS[key] !== undefined)\n                    CALLBACKS[key].forEach((x) => x());\n            }\n        }\n        else {\n            self.config[option] = value;\n            if (CALLBACKS[option] !== undefined)\n                CALLBACKS[option].forEach((x) => x());\n            else if (HOOKS.indexOf(option) > -1)\n                self.config[option] = arrayify(value);\n        }\n        self.redraw();\n        updateValue(true);\n    }\n    function setSelectedDate(inputDate, format) {\n        let dates = [];\n        if (inputDate instanceof Array)\n            dates = inputDate.map((d) => self.parseDate(d, format));\n        else if (inputDate instanceof Date || typeof inputDate === \"number\")\n            dates = [self.parseDate(inputDate, format)];\n        else if (typeof inputDate === \"string\") {\n            switch (self.config.mode) {\n                case \"single\":\n                case \"time\":\n                    dates = [self.parseDate(inputDate, format)];\n                    break;\n                case \"multiple\":\n                    dates = inputDate\n                        .split(self.config.conjunction)\n                        .map((date) => self.parseDate(date, format));\n                    break;\n                case \"range\":\n                    dates = inputDate\n                        .split(self.l10n.rangeSeparator)\n                        .map((date) => self.parseDate(date, format));\n                    break;\n                default:\n                    break;\n            }\n        }\n        else\n            self.config.errorHandler(new Error(`Invalid date supplied: ${JSON.stringify(inputDate)}`));\n        self.selectedDates = (self.config.allowInvalidPreload\n            ? dates\n            : dates.filter((d) => d instanceof Date && isEnabled(d, false)));\n        if (self.config.mode === \"range\")\n            self.selectedDates.sort((a, b) => a.getTime() - b.getTime());\n    }\n    function setDate(date, triggerChange = false, format = self.config.dateFormat) {\n        if ((date !== 0 && !date) || (date instanceof Array && date.length === 0))\n            return self.clear(triggerChange);\n        setSelectedDate(date, format);\n        self.latestSelectedDateObj =\n            self.selectedDates[self.selectedDates.length - 1];\n        self.redraw();\n        jumpToDate(undefined, triggerChange);\n        setHoursFromDate();\n        if (self.selectedDates.length === 0) {\n            self.clear(false);\n        }\n        updateValue(triggerChange);\n        if (triggerChange)\n            triggerEvent(\"onChange\");\n    }\n    function parseDateRules(arr) {\n        return arr\n            .slice()\n            .map((rule) => {\n            if (typeof rule === \"string\" ||\n                typeof rule === \"number\" ||\n                rule instanceof Date) {\n                return self.parseDate(rule, undefined, true);\n            }\n            else if (rule &&\n                typeof rule === \"object\" &&\n                rule.from &&\n                rule.to)\n                return {\n                    from: self.parseDate(rule.from, undefined),\n                    to: self.parseDate(rule.to, undefined),\n                };\n            return rule;\n        })\n            .filter((x) => x);\n    }\n    function setupDates() {\n        self.selectedDates = [];\n        self.now = self.parseDate(self.config.now) || new Date();\n        const preloadedDate = self.config.defaultDate ||\n            ((self.input.nodeName === \"INPUT\" ||\n                self.input.nodeName === \"TEXTAREA\") &&\n                self.input.placeholder &&\n                self.input.value === self.input.placeholder\n                ? null\n                : self.input.value);\n        if (preloadedDate)\n            setSelectedDate(preloadedDate, self.config.dateFormat);\n        self._initialDate =\n            self.selectedDates.length > 0\n                ? self.selectedDates[0]\n                : self.config.minDate &&\n                    self.config.minDate.getTime() > self.now.getTime()\n                    ? self.config.minDate\n                    : self.config.maxDate &&\n                        self.config.maxDate.getTime() < self.now.getTime()\n                        ? self.config.maxDate\n                        : self.now;\n        self.currentYear = self._initialDate.getFullYear();\n        self.currentMonth = self._initialDate.getMonth();\n        if (self.selectedDates.length > 0)\n            self.latestSelectedDateObj = self.selectedDates[0];\n        if (self.config.minTime !== undefined)\n            self.config.minTime = self.parseDate(self.config.minTime, \"H:i\");\n        if (self.config.maxTime !== undefined)\n            self.config.maxTime = self.parseDate(self.config.maxTime, \"H:i\");\n        self.minDateHasTime =\n            !!self.config.minDate &&\n                (self.config.minDate.getHours() > 0 ||\n                    self.config.minDate.getMinutes() > 0 ||\n                    self.config.minDate.getSeconds() > 0);\n        self.maxDateHasTime =\n            !!self.config.maxDate &&\n                (self.config.maxDate.getHours() > 0 ||\n                    self.config.maxDate.getMinutes() > 0 ||\n                    self.config.maxDate.getSeconds() > 0);\n    }\n    function setupInputs() {\n        self.input = getInputElem();\n        if (!self.input) {\n            self.config.errorHandler(new Error(\"Invalid input element specified\"));\n            return;\n        }\n        self.input._type = self.input.type;\n        self.input.type = \"text\";\n        self.input.classList.add(\"flatpickr-input\");\n        self._input = self.input;\n        if (self.config.altInput) {\n            self.altInput = createElement(self.input.nodeName, self.config.altInputClass);\n            self._input = self.altInput;\n            self.altInput.placeholder = self.input.placeholder;\n            self.altInput.disabled = self.input.disabled;\n            self.altInput.required = self.input.required;\n            self.altInput.tabIndex = self.input.tabIndex;\n            self.altInput.type = \"text\";\n            self.input.setAttribute(\"type\", \"hidden\");\n            if (!self.config.static && self.input.parentNode)\n                self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);\n        }\n        if (!self.config.allowInput)\n            self._input.setAttribute(\"readonly\", \"readonly\");\n        self._positionElement = self.config.positionElement || self._input;\n    }\n    function setupMobile() {\n        const inputType = self.config.enableTime\n            ? self.config.noCalendar\n                ? \"time\"\n                : \"datetime-local\"\n            : \"date\";\n        self.mobileInput = createElement(\"input\", self.input.className + \" flatpickr-mobile\");\n        self.mobileInput.tabIndex = 1;\n        self.mobileInput.type = inputType;\n        self.mobileInput.disabled = self.input.disabled;\n        self.mobileInput.required = self.input.required;\n        self.mobileInput.placeholder = self.input.placeholder;\n        self.mobileFormatStr =\n            inputType === \"datetime-local\"\n                ? \"Y-m-d\\\\TH:i:S\"\n                : inputType === \"date\"\n                    ? \"Y-m-d\"\n                    : \"H:i:S\";\n        if (self.selectedDates.length > 0) {\n            self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);\n        }\n        if (self.config.minDate)\n            self.mobileInput.min = self.formatDate(self.config.minDate, \"Y-m-d\");\n        if (self.config.maxDate)\n            self.mobileInput.max = self.formatDate(self.config.maxDate, \"Y-m-d\");\n        if (self.input.getAttribute(\"step\"))\n            self.mobileInput.step = String(self.input.getAttribute(\"step\"));\n        self.input.type = \"hidden\";\n        if (self.altInput !== undefined)\n            self.altInput.type = \"hidden\";\n        try {\n            if (self.input.parentNode)\n                self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);\n        }\n        catch (_a) { }\n        bind(self.mobileInput, \"change\", (e) => {\n            self.setDate(getEventTarget(e).value, false, self.mobileFormatStr);\n            triggerEvent(\"onChange\");\n            triggerEvent(\"onClose\");\n        });\n    }\n    function toggle(e) {\n        if (self.isOpen === true)\n            return self.close();\n        self.open(e);\n    }\n    function triggerEvent(event, data) {\n        if (self.config === undefined)\n            return;\n        const hooks = self.config[event];\n        if (hooks !== undefined && hooks.length > 0) {\n            for (let i = 0; hooks[i] && i < hooks.length; i++)\n                hooks[i](self.selectedDates, self.input.value, self, data);\n        }\n        if (event === \"onChange\") {\n            self.input.dispatchEvent(createEvent(\"change\"));\n            self.input.dispatchEvent(createEvent(\"input\"));\n        }\n    }\n    function createEvent(name) {\n        const e = document.createEvent(\"Event\");\n        e.initEvent(name, true, true);\n        return e;\n    }\n    function isDateSelected(date) {\n        for (let i = 0; i < self.selectedDates.length; i++) {\n            if (compareDates(self.selectedDates[i], date) === 0)\n                return \"\" + i;\n        }\n        return false;\n    }\n    function isDateInRange(date) {\n        if (self.config.mode !== \"range\" || self.selectedDates.length < 2)\n            return false;\n        return (compareDates(date, self.selectedDates[0]) >= 0 &&\n            compareDates(date, self.selectedDates[1]) <= 0);\n    }\n    function updateNavigationCurrentMonth() {\n        if (self.config.noCalendar || self.isMobile || !self.monthNav)\n            return;\n        self.yearElements.forEach((yearElement, i) => {\n            const d = new Date(self.currentYear, self.currentMonth, 1);\n            d.setMonth(self.currentMonth + i);\n            if (self.config.showMonths > 1 ||\n                self.config.monthSelectorType === \"static\") {\n                self.monthElements[i].textContent =\n                    monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + \" \";\n            }\n            else {\n                self.monthsDropdownContainer.value = d.getMonth().toString();\n            }\n            yearElement.value = d.getFullYear().toString();\n        });\n        self._hidePrevMonthArrow =\n            self.config.minDate !== undefined &&\n                (self.currentYear === self.config.minDate.getFullYear()\n                    ? self.currentMonth <= self.config.minDate.getMonth()\n                    : self.currentYear < self.config.minDate.getFullYear());\n        self._hideNextMonthArrow =\n            self.config.maxDate !== undefined &&\n                (self.currentYear === self.config.maxDate.getFullYear()\n                    ? self.currentMonth + 1 > self.config.maxDate.getMonth()\n                    : self.currentYear > self.config.maxDate.getFullYear());\n    }\n    function getDateStr(format) {\n        return self.selectedDates\n            .map((dObj) => self.formatDate(dObj, format))\n            .filter((d, i, arr) => self.config.mode !== \"range\" ||\n            self.config.enableTime ||\n            arr.indexOf(d) === i)\n            .join(self.config.mode !== \"range\"\n            ? self.config.conjunction\n            : self.l10n.rangeSeparator);\n    }\n    function updateValue(triggerChange = true) {\n        if (self.mobileInput !== undefined && self.mobileFormatStr) {\n            self.mobileInput.value =\n                self.latestSelectedDateObj !== undefined\n                    ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr)\n                    : \"\";\n        }\n        self.input.value = getDateStr(self.config.dateFormat);\n        if (self.altInput !== undefined) {\n            self.altInput.value = getDateStr(self.config.altFormat);\n        }\n        if (triggerChange !== false)\n            triggerEvent(\"onValueUpdate\");\n    }\n    function onMonthNavClick(e) {\n        const eventTarget = getEventTarget(e);\n        const isPrevMonth = self.prevMonthNav.contains(eventTarget);\n        const isNextMonth = self.nextMonthNav.contains(eventTarget);\n        if (isPrevMonth || isNextMonth) {\n            changeMonth(isPrevMonth ? -1 : 1);\n        }\n        else if (self.yearElements.indexOf(eventTarget) >= 0) {\n            eventTarget.select();\n        }\n        else if (eventTarget.classList.contains(\"arrowUp\")) {\n            self.changeYear(self.currentYear + 1);\n        }\n        else if (eventTarget.classList.contains(\"arrowDown\")) {\n            self.changeYear(self.currentYear - 1);\n        }\n    }\n    function timeWrapper(e) {\n        e.preventDefault();\n        const isKeyDown = e.type === \"keydown\", eventTarget = getEventTarget(e), input = eventTarget;\n        if (self.amPM !== undefined && eventTarget === self.amPM) {\n            self.amPM.textContent =\n                self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];\n        }\n        const min = parseFloat(input.getAttribute(\"min\")), max = parseFloat(input.getAttribute(\"max\")), step = parseFloat(input.getAttribute(\"step\")), curValue = parseInt(input.value, 10), delta = e.delta ||\n            (isKeyDown ? (e.which === 38 ? 1 : -1) : 0);\n        let newValue = curValue + step * delta;\n        if (typeof input.value !== \"undefined\" && input.value.length === 2) {\n            const isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;\n            if (newValue < min) {\n                newValue =\n                    max +\n                        newValue +\n                        int(!isHourElem) +\n                        (int(isHourElem) && int(!self.amPM));\n                if (isMinuteElem)\n                    incrementNumInput(undefined, -1, self.hourElement);\n            }\n            else if (newValue > max) {\n                newValue =\n                    input === self.hourElement ? newValue - max - int(!self.amPM) : min;\n                if (isMinuteElem)\n                    incrementNumInput(undefined, 1, self.hourElement);\n            }\n            if (self.amPM &&\n                isHourElem &&\n                (step === 1\n                    ? newValue + curValue === 23\n                    : Math.abs(newValue - curValue) > step)) {\n                self.amPM.textContent =\n                    self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];\n            }\n            input.value = pad(newValue);\n        }\n    }\n    init();\n    return self;\n}\nfunction _flatpickr(nodeList, config) {\n    const nodes = Array.prototype.slice\n        .call(nodeList)\n        .filter((x) => x instanceof HTMLElement);\n    const instances = [];\n    for (let i = 0; i < nodes.length; i++) {\n        const node = nodes[i];\n        try {\n            if (node.getAttribute(\"data-fp-omit\") !== null)\n                continue;\n            if (node._flatpickr !== undefined) {\n                node._flatpickr.destroy();\n                node._flatpickr = undefined;\n            }\n            node._flatpickr = FlatpickrInstance(node, config || {});\n            instances.push(node._flatpickr);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n    return instances.length === 1 ? instances[0] : instances;\n}\nif (typeof HTMLElement !== \"undefined\" &&\n    typeof HTMLCollection !== \"undefined\" &&\n    typeof NodeList !== \"undefined\") {\n    HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {\n        return _flatpickr(this, config);\n    };\n    HTMLElement.prototype.flatpickr = function (config) {\n        return _flatpickr([this], config);\n    };\n}\nvar flatpickr = function (selector, config) {\n    if (typeof selector === \"string\") {\n        return _flatpickr(window.document.querySelectorAll(selector), config);\n    }\n    else if (selector instanceof Node) {\n        return _flatpickr([selector], config);\n    }\n    else {\n        return _flatpickr(selector, config);\n    }\n};\nflatpickr.defaultConfig = {};\nflatpickr.l10ns = {\n    en: Object.assign({}, English),\n    default: Object.assign({}, English),\n};\nflatpickr.localize = (l10n) => {\n    flatpickr.l10ns.default = Object.assign(Object.assign({}, flatpickr.l10ns.default), l10n);\n};\nflatpickr.setDefaults = (config) => {\n    flatpickr.defaultConfig = Object.assign(Object.assign({}, flatpickr.defaultConfig), config);\n};\nflatpickr.parseDate = createDateParser({});\nflatpickr.formatDate = createDateFormatter({});\nflatpickr.compareDates = compareDates;\nif (typeof jQuery !== \"undefined\" && typeof jQuery.fn !== \"undefined\") {\n    jQuery.fn.flatpickr = function (config) {\n        return _flatpickr(this, config);\n    };\n}\nDate.prototype.fp_incr = function (days) {\n    return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === \"string\" ? parseInt(days, 10) : days));\n};\nif (typeof window !== \"undefined\") {\n    window.flatpickr = flatpickr;\n}\nexport default flatpickr;\n","export const english = {\n    weekdays: {\n        shorthand: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n        longhand: [\n            \"Sunday\",\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\",\n        ],\n    },\n    months: {\n        shorthand: [\n            \"Jan\",\n            \"Feb\",\n            \"Mar\",\n            \"Apr\",\n            \"May\",\n            \"Jun\",\n            \"Jul\",\n            \"Aug\",\n            \"Sep\",\n            \"Oct\",\n            \"Nov\",\n            \"Dec\",\n        ],\n        longhand: [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\",\n        ],\n    },\n    daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n    firstDayOfWeek: 0,\n    ordinal: (nth) => {\n        const s = nth % 100;\n        if (s > 3 && s < 21)\n            return \"th\";\n        switch (s % 10) {\n            case 1:\n                return \"st\";\n            case 2:\n                return \"nd\";\n            case 3:\n                return \"rd\";\n            default:\n                return \"th\";\n        }\n    },\n    rangeSeparator: \" to \",\n    weekAbbreviation: \"Wk\",\n    scrollTitle: \"Scroll to increment\",\n    toggleTitle: \"Click to toggle\",\n    amPM: [\"AM\", \"PM\"],\n    yearAriaLabel: \"Year\",\n    monthAriaLabel: \"Month\",\n    hourAriaLabel: \"Hour\",\n    minuteAriaLabel: \"Minute\",\n    time_24hr: false,\n};\nexport default english;\n","export const HOOKS = [\n    \"onChange\",\n    \"onClose\",\n    \"onDayCreate\",\n    \"onDestroy\",\n    \"onKeyDown\",\n    \"onMonthChange\",\n    \"onOpen\",\n    \"onParseConfig\",\n    \"onReady\",\n    \"onValueUpdate\",\n    \"onYearChange\",\n    \"onPreCalendarPosition\",\n];\nexport const defaults = {\n    _disable: [],\n    allowInput: false,\n    allowInvalidPreload: false,\n    altFormat: \"F j, Y\",\n    altInput: false,\n    altInputClass: \"form-control input\",\n    animate: typeof window === \"object\" &&\n        window.navigator.userAgent.indexOf(\"MSIE\") === -1,\n    ariaDateFormat: \"F j, Y\",\n    autoFillDefaultTime: true,\n    clickOpens: true,\n    closeOnSelect: true,\n    conjunction: \", \",\n    dateFormat: \"Y-m-d\",\n    defaultHour: 12,\n    defaultMinute: 0,\n    defaultSeconds: 0,\n    disable: [],\n    disableMobile: false,\n    enableSeconds: false,\n    enableTime: false,\n    errorHandler: (err) => typeof console !== \"undefined\" && console.warn(err),\n    getWeek: (givenDate) => {\n        const date = new Date(givenDate.getTime());\n        date.setHours(0, 0, 0, 0);\n        date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));\n        var week1 = new Date(date.getFullYear(), 0, 4);\n        return (1 +\n            Math.round(((date.getTime() - week1.getTime()) / 86400000 -\n                3 +\n                ((week1.getDay() + 6) % 7)) /\n                7));\n    },\n    hourIncrement: 1,\n    ignoredFocusElements: [],\n    inline: false,\n    locale: \"default\",\n    minuteIncrement: 5,\n    mode: \"single\",\n    monthSelectorType: \"dropdown\",\n    nextArrow: \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>\",\n    noCalendar: false,\n    now: new Date(),\n    onChange: [],\n    onClose: [],\n    onDayCreate: [],\n    onDestroy: [],\n    onKeyDown: [],\n    onMonthChange: [],\n    onOpen: [],\n    onParseConfig: [],\n    onReady: [],\n    onValueUpdate: [],\n    onYearChange: [],\n    onPreCalendarPosition: [],\n    plugins: [],\n    position: \"auto\",\n    positionElement: undefined,\n    prevArrow: \"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>\",\n    shorthandCurrentMonth: false,\n    showMonths: 1,\n    static: false,\n    time_24hr: false,\n    weekNumbers: false,\n    wrap: false,\n};\n","import { tokenRegex, revFormat, formats, } from \"./formatting\";\nimport { defaults } from \"../types/options\";\nimport { english } from \"../l10n/default\";\nexport const createDateFormatter = ({ config = defaults, l10n = english, isMobile = false, }) => (dateObj, frmt, overrideLocale) => {\n    const locale = overrideLocale || l10n;\n    if (config.formatDate !== undefined && !isMobile) {\n        return config.formatDate(dateObj, frmt, locale);\n    }\n    return frmt\n        .split(\"\")\n        .map((c, i, arr) => formats[c] && arr[i - 1] !== \"\\\\\"\n        ? formats[c](dateObj, locale, config)\n        : c !== \"\\\\\"\n            ? c\n            : \"\")\n        .join(\"\");\n};\nexport const createDateParser = ({ config = defaults, l10n = english }) => (date, givenFormat, timeless, customLocale) => {\n    if (date !== 0 && !date)\n        return undefined;\n    const locale = customLocale || l10n;\n    let parsedDate;\n    const dateOrig = date;\n    if (date instanceof Date)\n        parsedDate = new Date(date.getTime());\n    else if (typeof date !== \"string\" &&\n        date.toFixed !== undefined)\n        parsedDate = new Date(date);\n    else if (typeof date === \"string\") {\n        const format = givenFormat || (config || defaults).dateFormat;\n        const datestr = String(date).trim();\n        if (datestr === \"today\") {\n            parsedDate = new Date();\n            timeless = true;\n        }\n        else if (/Z$/.test(datestr) ||\n            /GMT$/.test(datestr))\n            parsedDate = new Date(date);\n        else if (config && config.parseDate)\n            parsedDate = config.parseDate(date, format);\n        else {\n            parsedDate =\n                !config || !config.noCalendar\n                    ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)\n                    : new Date(new Date().setHours(0, 0, 0, 0));\n            let matched, ops = [];\n            for (let i = 0, matchIndex = 0, regexStr = \"\"; i < format.length; i++) {\n                const token = format[i];\n                const isBackSlash = token === \"\\\\\";\n                const escaped = format[i - 1] === \"\\\\\" || isBackSlash;\n                if (tokenRegex[token] && !escaped) {\n                    regexStr += tokenRegex[token];\n                    const match = new RegExp(regexStr).exec(date);\n                    if (match && (matched = true)) {\n                        ops[token !== \"Y\" ? \"push\" : \"unshift\"]({\n                            fn: revFormat[token],\n                            val: match[++matchIndex],\n                        });\n                    }\n                }\n                else if (!isBackSlash)\n                    regexStr += \".\";\n                ops.forEach(({ fn, val }) => (parsedDate = fn(parsedDate, val, locale) || parsedDate));\n            }\n            parsedDate = matched ? parsedDate : undefined;\n        }\n    }\n    if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {\n        config.errorHandler(new Error(`Invalid date provided: ${dateOrig}`));\n        return undefined;\n    }\n    if (timeless === true)\n        parsedDate.setHours(0, 0, 0, 0);\n    return parsedDate;\n};\nexport function compareDates(date1, date2, timeless = true) {\n    if (timeless !== false) {\n        return (new Date(date1.getTime()).setHours(0, 0, 0, 0) -\n            new Date(date2.getTime()).setHours(0, 0, 0, 0));\n    }\n    return date1.getTime() - date2.getTime();\n}\nexport function compareTimes(date1, date2) {\n    return (3600 * (date1.getHours() - date2.getHours()) +\n        60 * (date1.getMinutes() - date2.getMinutes()) +\n        date1.getSeconds() -\n        date2.getSeconds());\n}\nexport const isBetween = (ts, ts1, ts2) => {\n    return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);\n};\nexport const duration = {\n    DAY: 86400000,\n};\nexport function getDefaultHours(config) {\n    let hours = config.defaultHour;\n    let minutes = config.defaultMinute;\n    let seconds = config.defaultSeconds;\n    if (config.minDate !== undefined) {\n        const minHour = config.minDate.getHours();\n        const minMinutes = config.minDate.getMinutes();\n        const minSeconds = config.minDate.getSeconds();\n        if (hours < minHour) {\n            hours = minHour;\n        }\n        if (hours === minHour && minutes < minMinutes) {\n            minutes = minMinutes;\n        }\n        if (hours === minHour && minutes === minMinutes && seconds < minSeconds)\n            seconds = config.minDate.getSeconds();\n    }\n    if (config.maxDate !== undefined) {\n        const maxHr = config.maxDate.getHours();\n        const maxMinutes = config.maxDate.getMinutes();\n        hours = Math.min(hours, maxHr);\n        if (hours === maxHr)\n            minutes = Math.min(maxMinutes, minutes);\n        if (hours === maxHr && minutes === maxMinutes)\n            seconds = config.maxDate.getSeconds();\n    }\n    return { hours, minutes, seconds };\n}\n","export function toggleClass(elem, className, bool) {\n    if (bool === true)\n        return elem.classList.add(className);\n    elem.classList.remove(className);\n}\nexport function createElement(tag, className, content) {\n    const e = window.document.createElement(tag);\n    className = className || \"\";\n    content = content || \"\";\n    e.className = className;\n    if (content !== undefined)\n        e.textContent = content;\n    return e;\n}\nexport function clearNode(node) {\n    while (node.firstChild)\n        node.removeChild(node.firstChild);\n}\nexport function findParent(node, condition) {\n    if (condition(node))\n        return node;\n    else if (node.parentNode)\n        return findParent(node.parentNode, condition);\n    return undefined;\n}\nexport function createNumberInput(inputClassName, opts) {\n    const wrapper = createElement(\"div\", \"numInputWrapper\"), numInput = createElement(\"input\", \"numInput \" + inputClassName), arrowUp = createElement(\"span\", \"arrowUp\"), arrowDown = createElement(\"span\", \"arrowDown\");\n    if (navigator.userAgent.indexOf(\"MSIE 9.0\") === -1) {\n        numInput.type = \"number\";\n    }\n    else {\n        numInput.type = \"text\";\n        numInput.pattern = \"\\\\d*\";\n    }\n    if (opts !== undefined)\n        for (const key in opts)\n            numInput.setAttribute(key, opts[key]);\n    wrapper.appendChild(numInput);\n    wrapper.appendChild(arrowUp);\n    wrapper.appendChild(arrowDown);\n    return wrapper;\n}\nexport function getEventTarget(event) {\n    try {\n        if (typeof event.composedPath === \"function\") {\n            const path = event.composedPath();\n            return path[0];\n        }\n        return event.target;\n    }\n    catch (error) {\n        return event.target;\n    }\n}\n","import { int, pad } from \"../utils\";\nconst doNothing = () => undefined;\nexport const monthToStr = (monthNumber, shorthand, locale) => locale.months[shorthand ? \"shorthand\" : \"longhand\"][monthNumber];\nexport const revFormat = {\n    D: doNothing,\n    F: function (dateObj, monthName, locale) {\n        dateObj.setMonth(locale.months.longhand.indexOf(monthName));\n    },\n    G: (dateObj, hour) => {\n        dateObj.setHours(parseFloat(hour));\n    },\n    H: (dateObj, hour) => {\n        dateObj.setHours(parseFloat(hour));\n    },\n    J: (dateObj, day) => {\n        dateObj.setDate(parseFloat(day));\n    },\n    K: (dateObj, amPM, locale) => {\n        dateObj.setHours((dateObj.getHours() % 12) +\n            12 * int(new RegExp(locale.amPM[1], \"i\").test(amPM)));\n    },\n    M: function (dateObj, shortMonth, locale) {\n        dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));\n    },\n    S: (dateObj, seconds) => {\n        dateObj.setSeconds(parseFloat(seconds));\n    },\n    U: (_, unixSeconds) => new Date(parseFloat(unixSeconds) * 1000),\n    W: function (dateObj, weekNum, locale) {\n        const weekNumber = parseInt(weekNum);\n        const date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);\n        date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);\n        return date;\n    },\n    Y: (dateObj, year) => {\n        dateObj.setFullYear(parseFloat(year));\n    },\n    Z: (_, ISODate) => new Date(ISODate),\n    d: (dateObj, day) => {\n        dateObj.setDate(parseFloat(day));\n    },\n    h: (dateObj, hour) => {\n        dateObj.setHours(parseFloat(hour));\n    },\n    i: (dateObj, minutes) => {\n        dateObj.setMinutes(parseFloat(minutes));\n    },\n    j: (dateObj, day) => {\n        dateObj.setDate(parseFloat(day));\n    },\n    l: doNothing,\n    m: (dateObj, month) => {\n        dateObj.setMonth(parseFloat(month) - 1);\n    },\n    n: (dateObj, month) => {\n        dateObj.setMonth(parseFloat(month) - 1);\n    },\n    s: (dateObj, seconds) => {\n        dateObj.setSeconds(parseFloat(seconds));\n    },\n    u: (_, unixMillSeconds) => new Date(parseFloat(unixMillSeconds)),\n    w: doNothing,\n    y: (dateObj, year) => {\n        dateObj.setFullYear(2000 + parseFloat(year));\n    },\n};\nexport const tokenRegex = {\n    D: \"(\\\\w+)\",\n    F: \"(\\\\w+)\",\n    G: \"(\\\\d\\\\d|\\\\d)\",\n    H: \"(\\\\d\\\\d|\\\\d)\",\n    J: \"(\\\\d\\\\d|\\\\d)\\\\w+\",\n    K: \"\",\n    M: \"(\\\\w+)\",\n    S: \"(\\\\d\\\\d|\\\\d)\",\n    U: \"(.+)\",\n    W: \"(\\\\d\\\\d|\\\\d)\",\n    Y: \"(\\\\d{4})\",\n    Z: \"(.+)\",\n    d: \"(\\\\d\\\\d|\\\\d)\",\n    h: \"(\\\\d\\\\d|\\\\d)\",\n    i: \"(\\\\d\\\\d|\\\\d)\",\n    j: \"(\\\\d\\\\d|\\\\d)\",\n    l: \"(\\\\w+)\",\n    m: \"(\\\\d\\\\d|\\\\d)\",\n    n: \"(\\\\d\\\\d|\\\\d)\",\n    s: \"(\\\\d\\\\d|\\\\d)\",\n    u: \"(.+)\",\n    w: \"(\\\\d\\\\d|\\\\d)\",\n    y: \"(\\\\d{2})\",\n};\nexport const formats = {\n    Z: (date) => date.toISOString(),\n    D: function (date, locale, options) {\n        return locale.weekdays.shorthand[formats.w(date, locale, options)];\n    },\n    F: function (date, locale, options) {\n        return monthToStr(formats.n(date, locale, options) - 1, false, locale);\n    },\n    G: function (date, locale, options) {\n        return pad(formats.h(date, locale, options));\n    },\n    H: (date) => pad(date.getHours()),\n    J: function (date, locale) {\n        return locale.ordinal !== undefined\n            ? date.getDate() + locale.ordinal(date.getDate())\n            : date.getDate();\n    },\n    K: (date, locale) => locale.amPM[int(date.getHours() > 11)],\n    M: function (date, locale) {\n        return monthToStr(date.getMonth(), true, locale);\n    },\n    S: (date) => pad(date.getSeconds()),\n    U: (date) => date.getTime() / 1000,\n    W: function (date, _, options) {\n        return options.getWeek(date);\n    },\n    Y: (date) => pad(date.getFullYear(), 4),\n    d: (date) => pad(date.getDate()),\n    h: (date) => (date.getHours() % 12 ? date.getHours() % 12 : 12),\n    i: (date) => pad(date.getMinutes()),\n    j: (date) => date.getDate(),\n    l: function (date, locale) {\n        return locale.weekdays.longhand[date.getDay()];\n    },\n    m: (date) => pad(date.getMonth() + 1),\n    n: (date) => date.getMonth() + 1,\n    s: (date) => date.getSeconds(),\n    u: (date) => date.getTime(),\n    w: (date) => date.getDay(),\n    y: (date) => String(date.getFullYear()).substring(2),\n};\n","export const pad = (number, length = 2) => `000${number}`.slice(length * -1);\nexport const int = (bool) => (bool === true ? 1 : 0);\nexport function debounce(fn, wait) {\n    let t;\n    return function () {\n        clearTimeout(t);\n        t = setTimeout(() => fn.apply(this, arguments), wait);\n    };\n}\nexport const arrayify = (obj) => obj instanceof Array ? obj : [obj];\n","\"use strict\";\nif (typeof Object.assign !== \"function\") {\n    Object.assign = function (target, ...args) {\n        if (!target) {\n            throw TypeError(\"Cannot convert undefined or null to object\");\n        }\n        for (const source of args) {\n            if (source) {\n                Object.keys(source).forEach((key) => (target[key] = source[key]));\n            }\n        }\n        return target;\n    };\n}\n","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-explore-container',\r\n  templateUrl: './explore-container.component.html',\r\n  styleUrls: ['./explore-container.component.scss'],\r\n})\r\nexport class ExploreContainerComponent implements OnInit {\r\n  @Input() name: string;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {}\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ExploreContainerComponent } from './explore-container.component';\r\n\r\n@NgModule({\r\n  imports: [ CommonModule, FormsModule, IonicModule],\r\n  declarations: [ExploreContainerComponent],\r\n  exports: [ExploreContainerComponent]\r\n})\r\nexport class ExploreContainerComponentModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { TabCalendar } from './tb-calendar';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: TabCalendar,\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class TabCalendarRoutingModule {}\r\n","import { IonicModule } from '@ionic/angular';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule, registerLocaleData } from '@angular/common';\r\nimport { TabCalendar } from './tb-calendar';\r\nimport { ExploreContainerComponentModule } from '../explore-container/explore-container.module';\r\nimport { FlatpickrModule } from 'angularx-flatpickr';\r\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\r\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\r\nimport { NgbModalModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n\r\nimport { TabCalendarRoutingModule } from './tb-calendar-routing.module';\r\nimport { UtilsModule } from '../utils/module';\r\n\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport localeFr from '@angular/common/locales/fr';\r\nimport localeTr from '@angular/common/locales/tr';\r\n\r\nregisterLocaleData(localeFr);\r\nregisterLocaleData(localeTr);\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    IonicModule,\r\n    CommonModule,\r\n    SharedModule,\r\n    ExploreContainerComponentModule,\r\n    TabCalendarRoutingModule,\r\n    NgbModalModule,\r\n    FlatpickrModule.forRoot(),\r\n    CalendarModule.forRoot({\r\n      provide: DateAdapter,\r\n      useFactory: adapterFactory,\r\n    }),\r\n    UtilsModule\r\n  ],\r\n  declarations: [TabCalendar],\r\n  exports: [TabCalendar],\r\n\r\n})\r\nexport class TabCalendarModule {}\r\n","import {\r\n  Component,\r\n  ChangeDetectionStrategy,\r\n  ViewChild,\r\n  TemplateRef,\r\n  OnInit,\r\n  NgZone,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport {\r\n  startOfDay,\r\n  endOfDay,\r\n  subDays,\r\n  addDays,\r\n  endOfMonth,\r\n  isSameDay,\r\n  isSameMonth,\r\n  addHours,\r\n  startOfMonth,\r\n  startOfWeek,\r\n  endOfWeek,\r\n} from 'date-fns';\r\nimport { Subject } from 'rxjs';\r\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\nimport {\r\n  CalendarEvent,\r\n  CalendarEventAction,\r\n  CalendarEventTimesChangedEvent,\r\n  CalendarView,\r\n} from 'angular-calendar';\r\nimport { colors } from '../utils/colors';\r\nimport { Router } from '@angular/router';\r\nimport { StorageService } from '../services/storage.service';\r\nimport { User } from '../models/user';\r\nimport { NgbdModalFocus } from '../modal/modal-focus';\r\nimport { MatListItem } from '@angular/material/list';\r\n\r\n\r\n@Component({\r\n  selector: 'mwl-demo-component',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n    styles: [\r\n      `\r\n        h3 {\r\n          margin: 0 0 10px;\r\n        }\r\n\r\n        pre {\r\n          background-color: #f5f5f5;\r\n          padding: 15px;\r\n        }\r\n      `,\r\n    ],\r\n    templateUrl: 'tb-calendar.html',\r\n  // styleUrls: ['tb-calendar.page.scss']\r\n})\r\nexport class TabCalendar implements OnInit {\r\n  locale: string = 'fr';\r\n\r\n  clientList : Array<User> = [];\r\n\r\n  // @Component({\r\n  //   selector: 'mwl-demo-component',\r\n  //   changeDetection: ChangeDetectionStrategy.OnPush,\r\n  //   styles: [\r\n  //     `\r\n  //       h3 {\r\n  //         margin: 0 0 10px;\r\n  //       }\r\n\r\n  //       pre {\r\n  //         background-color: #f5f5f5;\r\n  //         padding: 15px;\r\n  //       }\r\n  //     `,\r\n  //   ],\r\n  //   templateUrl: 'template.html',\r\n  // })\r\n    @ViewChild('modalContent', { static: true }) modalContent: TemplateRef<any>;\r\n\r\n    view: CalendarView = CalendarView.Month;\r\n\r\n    CalendarView = CalendarView;\r\n\r\n    viewDate: Date = new Date();\r\n\r\n    modalData: {\r\n      action: string;\r\n      event: CalendarEvent;\r\n    };\r\n    actions: CalendarEventAction[] = [\r\n      {\r\n        label: '<i class=\"fas fa-fw fa-pencil-alt\"></i>',\r\n        a11yLabel: 'Edit',\r\n        onClick: ({ event }: { event: CalendarEvent }): void => {\r\n          this.handleEvent('Edited', event);\r\n        },\r\n      },\r\n      {\r\n        label: '<i class=\"fas fa-fw fa-trash-alt\"></i>',\r\n        a11yLabel: 'Delete',\r\n        onClick: ({ event }: { event: CalendarEvent }): void => {\r\n          this.events = this.events.filter((iEvent) => iEvent !== event);\r\n          this.handleEvent('Deleted', event);\r\n        },\r\n      },\r\n    ];\r\n\r\n    refresh = new Subject<void>();\r\n\r\n    events: CalendarEvent[] = [];\r\n\r\n    activeDayIsOpen: boolean = true;\r\n    public modalTolg = new NgbdModalFocus(this.modalS);\r\n    constructor(private modalS :NgbModal,\r\n                private modal: NgbModal,\r\n                private router: Router,\r\n                private storageService: StorageService,\r\n                private cd : ChangeDetectorRef)\r\n                {\r\n                }\r\n    async ngOnInit(): Promise<void> {\r\n      this.storageService.init();\r\n      this.clientList = await this.storageService.get('Contacts');\r\n      this.events = await this.storageService.get('Events');\r\n      if(!this.events)\r\n        this.events = [];\r\n      console.log(this.events);\r\n      //this.fetchEvents();\r\n      this.events = Object.assign([],this.events);\r\n      this.cd.detectChanges();\r\n    }\r\n\r\n    async ionViewDidEnter(){\r\n      this.storageService.init();\r\n      this.clientList = await this.storageService.get('Contacts');\r\n      this.events = await this.storageService.get('Events');\r\n      if(!this.events)\r\n        this.events = [];\r\n      console.log(this.events);\r\n      this.events = Object.assign([],this.events);\r\n      this.cd.detectChanges();\r\n    }\r\n\r\n    async fetchEvents(): Promise<void> {\r\n      const getStart: any = {\r\n        month: startOfMonth,\r\n        week: startOfWeek,\r\n        day: startOfDay,\r\n      }[this.view];\r\n  \r\n      const getEnd: any = {\r\n        month: endOfMonth,\r\n        week: endOfWeek,\r\n        day: endOfDay,\r\n      }[this.view];\r\n      const list : CalendarEvent[] = await this.storageService.get('Events');\r\n      list.forEach(element => {\r\n        this.events.push(element);\r\n      });\r\n      // for(let i = 0; i<list.length; i++)\r\n      // {\r\n      //   this.events = [\r\n      //     ...this.events,\r\n      //     {\r\n      //       title: list[i].title,\r\n      //       client: null,\r\n      //       description: null,\r\n      //       start: startOfDay(new Date()),\r\n      //       end: endOfDay(new Date()),\r\n      //       color: colors.red,\r\n      //       draggable: true,\r\n      //       resizable: {\r\n      //         beforeStart: true,\r\n      //         afterEnd: true,\r\n      //       },\r\n      //     },\r\n      //   ];\r\n      // }\r\n      // this.events = list;\r\n      // this.events = list.map(({ value,index,array }: {value : CalendarEvent, index:number, array: CalendarEvent[] }) => {\r\n      //       return array.map((film: CalendarEvent) => {\r\n      //         return {\r\n      //           title: '',\r\n      //           client: null,\r\n      //           description: null,\r\n      //           start: startOfDay(new Date()),\r\n      //           end: endOfDay(new Date()),\r\n      //           color: colors.red,\r\n      //           draggable: true,\r\n      //           resizable: {\r\n      //             beforeStart: true,\r\n      //             afterEnd: true,\r\n      //           }\r\n      //         };\r\n      //       });\r\n      //     })\r\n      //   );\r\n    }\r\n    dayClicked({ date, events }: { date: Date; events: CalendarEvent[] }): void {\r\n      if (isSameMonth(date, this.viewDate)) {\r\n        if (\r\n          (isSameDay(this.viewDate, date) && this.activeDayIsOpen === true) ||\r\n          events.length === 0\r\n        ) {\r\n          this.activeDayIsOpen = false;\r\n        } else {\r\n          this.activeDayIsOpen = true;\r\n        }\r\n        this.viewDate = date;\r\n      }\r\n    }\r\n\r\n    eventTimesChanged({\r\n      event,\r\n      newStart,\r\n      newEnd,\r\n    }: CalendarEventTimesChangedEvent): void {\r\n      this.events = this.events.map((iEvent) => {\r\n        if (iEvent === event) {\r\n          return {\r\n            ...event,\r\n            start: newStart,\r\n            end: newEnd,\r\n          };\r\n        }\r\n        return iEvent;\r\n      });\r\n      this.handleEvent('Dropped or resized', event);\r\n      this.storageService.set('Events',this.events);\r\n    }\r\n\r\n    async handleEvent(action: string, event: CalendarEvent): Promise<void> {\r\n      this.storageService.set('Events',this.events);\r\n      let res : string =null;\r\n      const start = event.start.toLocaleTimeString()+' - '\r\n                    +event.start.getDate()+'/'\r\n                    +(event.start.getMonth()+1)+'/'\r\n                    +event.start.getFullYear();\r\n\r\n      const end = event.end.toLocaleTimeString()+' - '\r\n                  +event.end.getDate()+'/'\r\n                  +(event.end.getMonth()+1)+'/'\r\n                  +event.end.getFullYear();\r\n\r\n      const client = this.clientList.find(a=>a.userId === event.client)?.lastName?.toUpperCase() +' '\r\n                      +this.clientList.find(a=>a.userId === event.client)?.firstName;\r\n\r\n      const infos = event.title + '|'+\r\n                    client + '|'+ event.description + '|'+ start + '|'+ end;\r\n      await this.modalTolg.open('calendar',infos)\r\n      .then(result => result.result\r\n      .then((data) => {res='OK';} , (reason) => {\r\n        res='DISMISS' }\r\n        ));\r\n        return;\r\n    }\r\n\r\n    addEvent(): void {\r\n      this.events = [\r\n        ...this.events,\r\n        {\r\n          title: '',\r\n          client: null,\r\n          description: null,\r\n          start: startOfDay(new Date()),\r\n          end: endOfDay(new Date()),\r\n          color: colors.red,\r\n          draggable: true,\r\n          resizable: {\r\n            beforeStart: true,\r\n            afterEnd: true,\r\n          },\r\n        },\r\n      ];\r\n      this.storageService.set('Events',this.events);\r\n    }\r\n\r\n    deleteEvent(eventToDelete: CalendarEvent) {\r\n      this.events = this.events.filter((event) => event !== eventToDelete);\r\n      this.storageService.set('Events',this.events);\r\n    }\r\n\r\n    LoadEvents()\r\n    {\r\n      this.addEvent();\r\n      this.deleteEvent(this.events[this.events.length]);\r\n    }\r\n    setView(view: CalendarView) {\r\n      this.view = view;\r\n    }\r\n\r\n    closeOpenMonthViewDay() {\r\n      this.activeDayIsOpen = false;\r\n    }\r\n    NewClient()\r\n    {\r\n      console.log('create client');\r\n      this.router.navigate(['new-contact',{tag: 'chantier'}],{replaceUrl:true});\r\n    }\r\n    GoBack()\r\n    {\r\n      this.storageService.set('Events',this.events);\r\n      this.router.navigate(['tb-contacts'],{replaceUrl:true});\r\n    }\r\n  }\r\n\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CalendarView } from 'angular-calendar';\r\n\r\n@Component({\r\n  selector: 'mwl-demo-utils-calendar-header',\r\n  template: `\r\n    <div class=\"row text-center\">\r\n      <div class=\"col-md-4\">\r\n        <div class=\"btn-group\">\r\n          <div\r\n            class=\"btn btn-primary\"\r\n            mwlCalendarPreviousView\r\n            [view]=\"view\"\r\n            [(viewDate)]=\"viewDate\"\r\n            (viewDateChange)=\"viewDateChange.next(viewDate)\"\r\n          >\r\n            Previous\r\n          </div>\r\n          <div\r\n            class=\"btn btn-outline-secondary\"\r\n            mwlCalendarToday\r\n            [(viewDate)]=\"viewDate\"\r\n            (viewDateChange)=\"viewDateChange.next(viewDate)\"\r\n          >\r\n            Today\r\n          </div>\r\n          <div\r\n            class=\"btn btn-primary\"\r\n            mwlCalendarNextView\r\n            [view]=\"view\"\r\n            [(viewDate)]=\"viewDate\"\r\n            (viewDateChange)=\"viewDateChange.next(viewDate)\"\r\n          >\r\n            Next\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-md-4\">\r\n        <h3>{{ viewDate | calendarDate: view + 'ViewTitle':locale }}</h3>\r\n      </div>\r\n      <div class=\"col-md-4\">\r\n        <div class=\"btn-group\">\r\n          <div\r\n            class=\"btn btn-primary\"\r\n            (click)=\"viewChange.emit(CalendarView.Month)\"\r\n            [class.active]=\"view === CalendarView.Month\"\r\n          >\r\n            Month\r\n          </div>\r\n          <div\r\n            class=\"btn btn-primary\"\r\n            (click)=\"viewChange.emit(CalendarView.Week)\"\r\n            [class.active]=\"view === CalendarView.Week\"\r\n          >\r\n            Week\r\n          </div>\r\n          <div\r\n            class=\"btn btn-primary\"\r\n            (click)=\"viewChange.emit(CalendarView.Day)\"\r\n            [class.active]=\"view === CalendarView.Day\"\r\n          >\r\n            Day\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <br />\r\n  `,\r\n})\r\nexport class CalendarHeaderComponent {\r\n  @Input() view: CalendarView;\r\n\r\n  @Input() viewDate: Date;\r\n\r\n  @Input() locale: string = 'en';\r\n\r\n  @Output() viewChange = new EventEmitter<CalendarView>();\r\n\r\n  @Output() viewDateChange = new EventEmitter<Date>();\r\n\r\n  CalendarView = CalendarView;\r\n}\r\n","export const colors: any = {\r\n  red: {\r\n    primary: '#ad2121',\r\n    secondary: '#FAE3E3',\r\n  },\r\n  blue: {\r\n    primary: '#1e90ff',\r\n    secondary: '#D1E8FF',\r\n  },\r\n  yellow: {\r\n    primary: '#e3bc08',\r\n    secondary: '#FDF1BA',\r\n  },\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CalendarModule } from 'angular-calendar';\r\nimport { CalendarHeaderComponent } from './calendar-header.component.';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, CalendarModule],\r\n  declarations: [CalendarHeaderComponent],\r\n  exports: [CalendarHeaderComponent],\r\n})\r\nexport class UtilsModule {}\r\n","export default \"<div id=\\\"container\\\">\\r\\n  <strong>{{ name }}</strong>\\r\\n  <p>Explore <a target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\" href=\\\"https://ionicframework.com/docs/components\\\">UI Components</a></p>\\r\\n</div>\";","export default \"\\r\\n<div style=\\\"overflow-y: auto;\\\">\\r\\n  <div class=\\\"row text-center\\\">\\r\\n    <div class=\\\"col-md-4\\\">\\r\\n      <div class=\\\"btn-group\\\">\\r\\n        <div class=\\\"btn btn-primary\\\" \\r\\n             mwlCalendarPreviousView \\r\\n             [view]=\\\"view\\\" \\r\\n             [(viewDate)]=\\\"viewDate\\\"\\r\\n             (viewDateChange)=\\\"closeOpenMonthViewDay()\\\"\\r\\n             (viewDateChange)=\\\"fetchEvents()\\\"\\r\\n             (viewChange)=\\\"fetchEvents()\\\">\\r\\n          <!-- Previous -->\\r\\n          Précédent\\r\\n        </div>\\r\\n        <div class=\\\"btn btn-outline-secondary\\\" \\r\\n             mwlCalendarToday \\r\\n             [(viewDate)]=\\\"viewDate\\\"\\r\\n             (viewDateChange)=\\\"fetchEvents()\\\"\\r\\n             (viewChange)=\\\"fetchEvents()\\\">\\r\\n          <!-- Today -->\\r\\n          Aujourd'hui\\r\\n        </div>\\r\\n        <div class=\\\"btn btn-primary\\\" \\r\\n             mwlCalendarNextView \\r\\n             [view]=\\\"view\\\" \\r\\n             [(viewDate)]=\\\"viewDate\\\"\\r\\n             (viewDateChange)=\\\"closeOpenMonthViewDay()\\\"\\r\\n             (viewDateChange)=\\\"fetchEvents()\\\"\\r\\n             (viewChange)=\\\"fetchEvents()\\\">\\r\\n          <!-- Next -->\\r\\n          Suivant\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-4\\\">\\r\\n      <h3>{{ viewDate | calendarDate:(view + 'ViewTitle'):locale }}</h3>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-4\\\">\\r\\n      <div class=\\\"btn-group\\\">\\r\\n        <div class=\\\"btn btn-primary\\\" (click)=\\\"setView(CalendarView.Month)\\\" [class.active]=\\\"view === CalendarView.Month\\\">\\r\\n          <!-- Month -->\\r\\n          Mois\\r\\n        </div>\\r\\n        <div class=\\\"btn btn-primary\\\" (click)=\\\"setView(CalendarView.Week)\\\" [class.active]=\\\"view === CalendarView.Week\\\">\\r\\n          <!-- Week -->\\r\\n          Semaine\\r\\n        </div>\\r\\n        <div class=\\\"btn btn-primary\\\" (click)=\\\"setView(CalendarView.Day)\\\" [class.active]=\\\"view === CalendarView.Day\\\">\\r\\n          <!-- Day -->\\r\\n          Jour\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <br />\\r\\n  <div [ngSwitch]=\\\"view\\\">\\r\\n    <mwl-calendar-month-view [locale]=\\\"locale\\\" *ngSwitchCase=\\\"CalendarView.Month\\\" [viewDate]=\\\"viewDate\\\" [events]=\\\"events\\\"\\r\\n      [refresh]=\\\"refresh\\\" [activeDayIsOpen]=\\\"activeDayIsOpen\\\" (dayClicked)=\\\"dayClicked($event.day)\\\"\\r\\n      (eventClicked)=\\\"handleEvent('Clicked', $event.event)\\\" (eventTimesChanged)=\\\"eventTimesChanged($event)\\\">\\r\\n    </mwl-calendar-month-view>\\r\\n    <mwl-calendar-week-view [locale]=\\\"locale\\\" *ngSwitchCase=\\\"CalendarView.Week\\\" [viewDate]=\\\"viewDate\\\" [events]=\\\"events\\\"\\r\\n      [refresh]=\\\"refresh\\\" (eventClicked)=\\\"handleEvent('Clicked', $event.event)\\\"\\r\\n      (eventTimesChanged)=\\\"eventTimesChanged($event)\\\">\\r\\n    </mwl-calendar-week-view>\\r\\n    <mwl-calendar-day-view [locale]=\\\"locale\\\" *ngSwitchCase=\\\"CalendarView.Day\\\" [viewDate]=\\\"viewDate\\\" [events]=\\\"events\\\" [refresh]=\\\"refresh\\\"\\r\\n      (eventClicked)=\\\"handleEvent('Clicked', $event.event)\\\" (eventTimesChanged)=\\\"eventTimesChanged($event)\\\">\\r\\n    </mwl-calendar-day-view>\\r\\n  </div>\\r\\n\\r\\n  <!-- Everything you see below is just for the demo, you don't need to include it in your app -->\\r\\n\\r\\n  <br /><br /><br />\\r\\n\\r\\n  <h3>\\r\\n    <!-- Edit events -->\\r\\n    Rendez-vous\\r\\n    <button class=\\\"btn btn-primary float-right\\\" (click)=\\\"addEvent()\\\">\\r\\n      <!-- Add new -->\\r\\n      Nouveau\\r\\n    </button>\\r\\n    <div class=\\\"clearfix\\\"></div>\\r\\n  </h3>\\r\\n\\r\\n  <div class=\\\"table-responsive\\\">\\r\\n    <table class=\\\"table table-bordered\\\">\\r\\n      <thead>\\r\\n        <tr>\\r\\n          <th>Titre</th>\\r\\n          <th>Client</th>\\r\\n          <th>Description</th>\\r\\n          <!-- <th>Primary color</th>\\r\\n          <th>Secondary color</th> -->\\r\\n          <th>Date début</th>\\r\\n          <th>Date fin</th>\\r\\n          <th>Supprimer</th>\\r\\n        </tr>\\r\\n      </thead>\\r\\n\\r\\n      <tbody>\\r\\n        <tr *ngFor=\\\"let event of events\\\">\\r\\n          <td>\\r\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"event.title\\\" (keyup)=\\\"refresh.next()\\\" />\\r\\n          </td>\\r\\n          <td>\\r\\n            <select [(ngModel)]=\\\"event.client\\\">\\r\\n              <option></option>\\r\\n              <option *ngFor=\\\"let name of clientList\\\" [value]=\\\"name.userId\\\"> {{name.lastName}} </option>\\r\\n            </select>\\r\\n            <ion-tab-button (click)=\\\"NewClient()\\\">\\r\\n              <ion-icon name=\\\"person-add\\\"></ion-icon>\\r\\n              <ion-label>Nouveau client ?</ion-label>\\r\\n            </ion-tab-button>\\r\\n          </td>\\r\\n          <td>\\r\\n            <textarea id=\\\"description\\\" name=\\\"description\\\" [(ngModel)]=\\\"event.description\\\" placeholder=\\\"...\\\"\\r\\n              style=\\\"height:100px;\\\"></textarea>\\r\\n          </td>\\r\\n          <!-- <td>\\r\\n            <input type=\\\"color\\\" [(ngModel)]=\\\"event.color.primary\\\" (change)=\\\"refresh.next()\\\" />\\r\\n          </td>\\r\\n          <td>\\r\\n            <input type=\\\"color\\\" [(ngModel)]=\\\"event.color.secondary\\\" (change)=\\\"refresh.next()\\\" />\\r\\n          </td> -->\\r\\n          <td>\\r\\n            <input class=\\\"form-control\\\" type=\\\"text\\\" mwlFlatpickr [(ngModel)]=\\\"event.start\\\"\\r\\n              (ngModelChange)=\\\"refresh.next()\\\" [altInput]=\\\"true\\\" [convertModelValue]=\\\"true\\\" [enableTime]=\\\"true\\\"\\r\\n              dateFormat=\\\"Y-m-dTH:i\\\" altFormat=\\\"F j, Y H:i\\\" placeholder=\\\"Not set\\\" />\\r\\n          </td>\\r\\n          <td>\\r\\n            <input class=\\\"form-control\\\" type=\\\"text\\\" mwlFlatpickr [(ngModel)]=\\\"event.end\\\"\\r\\n              (ngModelChange)=\\\"refresh.next()\\\" [altInput]=\\\"true\\\" [convertModelValue]=\\\"true\\\" [enableTime]=\\\"true\\\"\\r\\n              dateFormat=\\\"Y-m-dTH:i\\\" altFormat=\\\"F j, Y H:i\\\" placeholder=\\\"Not set\\\" />\\r\\n          </td>\\r\\n          <td>\\r\\n            <ion-tab-button (click)=\\\"deleteEvent(event)\\\">\\r\\n              <ion-icon name=\\\"trash\\\"></ion-icon>\\r\\n            </ion-tab-button>\\r\\n          </td>\\r\\n        </tr>\\r\\n      </tbody>\\r\\n    </table>\\r\\n  </div>\\r\\n\\r\\n  <ng-template #modalContent let-close=\\\"close\\\">\\r\\n    <div class=\\\"modal-header\\\">\\r\\n      <h5 class=\\\"modal-title\\\">Détails</h5>\\r\\n      <button type=\\\"button\\\" class=\\\"close\\\" (click)=\\\"close()\\\">\\r\\n        <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n      </button>\\r\\n    </div>\\r\\n    <div class=\\\"modal-body\\\">\\r\\n      <div>\\r\\n        Action:\\r\\n        <pre>{{ modalData?.action }}</pre>\\r\\n      </div>\\r\\n      <div>\\r\\n        Event:\\r\\n        <pre>{{ modalData?.event | json }}</pre>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"modal-footer\\\">\\r\\n      <button type=\\\"button\\\" class=\\\"btn btn-outline-secondary\\\" (click)=\\\"close()\\\">\\r\\n        OK\\r\\n      </button>\\r\\n    </div>\\r\\n  </ng-template>\\r\\n\\r\\n</div>\";","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\nfunction plural(val) {\n    const n = val, i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\\.?/, '').length, e = parseInt(val.toString().replace(/^[^e]*(e([-+]?\\d+))?/, '$2')) || 0;\n    if (i === 0 || i === 1)\n        return 1;\n    if (e === 0 && (!(i === 0) && (i % 1000000 === 0 && v === 0)) || !(e >= 0 && e <= 5))\n        return 4;\n    return 5;\n}\nexport default [\"fr\", [[\"AM\", \"PM\"], u, u], u, [[\"D\", \"L\", \"M\", \"M\", \"J\", \"V\", \"S\"], [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"], [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"], [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"]], u, [[\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"], [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\"], [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\"]], u, [[\"av. J.-C.\", \"ap. J.-C.\"], u, [\"avant Jésus-Christ\", \"après Jésus-Christ\"]], 1, [6, 0], [\"dd/MM/y\", \"d MMM y\", \"d MMMM y\", \"EEEE d MMMM y\"], [\"HH:mm\", \"HH:mm:ss\", \"HH:mm:ss z\", \"HH:mm:ss zzzz\"], [\"{1} {0}\", \"{1}, {0}\", \"{1} 'à' {0}\", u], [\",\", \" \", \";\", \"%\", \"+\", \"-\", \"E\", \"×\", \"‰\", \"∞\", \"NaN\", \":\"], [\"#,##0.###\", \"#,##0 %\", \"#,##0.00 ¤\", \"#E0\"], \"EUR\", \"€\", \"euro\", { \"ARS\": [\"$AR\", \"$\"], \"AUD\": [\"$AU\", \"$\"], \"BEF\": [\"FB\"], \"BMD\": [\"$BM\", \"$\"], \"BND\": [\"$BN\", \"$\"], \"BZD\": [\"$BZ\", \"$\"], \"CAD\": [\"$CA\", \"$\"], \"CLP\": [\"$CL\", \"$\"], \"CNY\": [u, \"¥\"], \"COP\": [\"$CO\", \"$\"], \"CYP\": [\"£CY\"], \"EGP\": [u, \"£E\"], \"FJD\": [\"$FJ\", \"$\"], \"FKP\": [\"£FK\", \"£\"], \"FRF\": [\"F\"], \"GBP\": [\"£GB\", \"£\"], \"GIP\": [\"£GI\", \"£\"], \"HKD\": [u, \"$\"], \"IEP\": [\"£IE\"], \"ILP\": [\"£IL\"], \"ITL\": [\"₤IT\"], \"JPY\": [u, \"¥\"], \"KMF\": [u, \"FC\"], \"LBP\": [\"£LB\", \"£L\"], \"MTP\": [\"£MT\"], \"MXN\": [\"$MX\", \"$\"], \"NAD\": [\"$NA\", \"$\"], \"NIO\": [u, \"$C\"], \"NZD\": [\"$NZ\", \"$\"], \"PHP\": [u, \"₱\"], \"RHD\": [\"$RH\"], \"RON\": [u, \"L\"], \"RWF\": [u, \"FR\"], \"SBD\": [\"$SB\", \"$\"], \"SGD\": [\"$SG\", \"$\"], \"SRD\": [\"$SR\", \"$\"], \"TOP\": [u, \"$T\"], \"TTD\": [\"$TT\", \"$\"], \"TWD\": [u, \"NT$\"], \"USD\": [\"$US\", \"$\"], \"UYU\": [\"$UY\", \"$\"], \"WST\": [\"$WS\"], \"XCD\": [u, \"$\"], \"XPF\": [\"FCFP\"], \"ZMW\": [u, \"Kw\"] }, \"ltr\", plural];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// THIS CODE IS GENERATED - DO NOT MODIFY.\nconst u = undefined;\nfunction plural(val) {\n    const n = val;\n    if (n === 1)\n        return 1;\n    return 5;\n}\nexport default [\"tr\", [[\"öö\", \"ös\"], [\"ÖÖ\", \"ÖS\"], u], [[\"ÖÖ\", \"ÖS\"], u, u], [[\"P\", \"P\", \"S\", \"Ç\", \"P\", \"C\", \"C\"], [\"Paz\", \"Pzt\", \"Sal\", \"Çar\", \"Per\", \"Cum\", \"Cmt\"], [\"Pazar\", \"Pazartesi\", \"Salı\", \"Çarşamba\", \"Perşembe\", \"Cuma\", \"Cumartesi\"], [\"Pa\", \"Pt\", \"Sa\", \"Ça\", \"Pe\", \"Cu\", \"Ct\"]], u, [[\"O\", \"Ş\", \"M\", \"N\", \"M\", \"H\", \"T\", \"A\", \"E\", \"E\", \"K\", \"A\"], [\"Oca\", \"Şub\", \"Mar\", \"Nis\", \"May\", \"Haz\", \"Tem\", \"Ağu\", \"Eyl\", \"Eki\", \"Kas\", \"Ara\"], [\"Ocak\", \"Şubat\", \"Mart\", \"Nisan\", \"Mayıs\", \"Haziran\", \"Temmuz\", \"Ağustos\", \"Eylül\", \"Ekim\", \"Kasım\", \"Aralık\"]], u, [[\"MÖ\", \"MS\"], u, [\"Milattan Önce\", \"Milattan Sonra\"]], 1, [6, 0], [\"d.MM.y\", \"d MMM y\", \"d MMMM y\", \"d MMMM y EEEE\"], [\"HH:mm\", \"HH:mm:ss\", \"HH:mm:ss z\", \"HH:mm:ss zzzz\"], [\"{1} {0}\", u, u, u], [\",\", \".\", \";\", \"%\", \"+\", \"-\", \"E\", \"×\", \"‰\", \"∞\", \"NaN\", \":\"], [\"#,##0.###\", \"%#,##0\", \"¤#,##0.00\", \"#E0\"], \"TRY\", \"₺\", \"Türk Lirası\", { \"AUD\": [\"AU$\", \"$\"], \"PHP\": [u, \"₱\"], \"RON\": [u, \"L\"], \"THB\": [\"฿\"], \"TRY\": [\"₺\"], \"TWD\": [\"NT$\"] }, \"ltr\", plural];\n"],"names":[],"sourceRoot":"webpack:///"}